//
//  CTAStyleKit.swift
//  CuriosText
//
//  Created by Emiaostein on 1/11/16.
//  Copyright (c) 2016 com.botai. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class CTAStyleKit : NSObject {

    //// Drawing Methods

    public class func drawAlignmentCenter(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.11198 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.11198 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.00000 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.22135 * frame.width, frame.minY + 0.22135 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.77865 * frame.width, frame.minY + 0.22135 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.77865 * frame.width, frame.minY + 0.33333 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.22135 * frame.width, frame.minY + 0.33333 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.22135 * frame.width, frame.minY + 0.22135 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.55469 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.44531 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.44531 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.55469 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.55469 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.88802 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.88802 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.22135 * frame.width, frame.minY + 0.66667 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.77865 * frame.width, frame.minY + 0.66667 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.77865 * frame.width, frame.minY + 0.77865 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.22135 * frame.width, frame.minY + 0.77865 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.22135 * frame.width, frame.minY + 0.66667 * frame.height))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        normalColor.setFill()
        bezierPath.fill()
    }

    public class func drawAlignmentCenterNormal(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX + floor(frame.width * 0.00000 + 0.5), frame.minY + floor(frame.height * 0.00000 + 0.5), floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        CTAStyleKit.drawAlignmentCenter(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), normalColor: normalColor)
        CGContextRestoreGState(context)
    }

    public class func drawAlignmentCenterSelected(frame frame: CGRect = CGRectMake(0, 0, 30, 30), selectedColor: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX + floor(frame.width * 0.00000 + 0.5), frame.minY + floor(frame.height * 0.00000 + 0.5), floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        CTAStyleKit.drawAlignmentCenterNormal(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), normalColor: selectedColor)
        CGContextRestoreGState(context)
    }

    public class func drawAlignmentJust(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.11198 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.11198 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.00000 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.33333 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.22135 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.22135 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.33333 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.33333 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.55469 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.44531 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.44531 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.55469 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.55469 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.77865 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.66667 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.66667 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.77865 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.77865 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.88802 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.88802 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        normalColor.setFill()
        bezierPath.fill()
    }

    public class func drawAlignmentJustNormal(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, 30, 30)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        CTAStyleKit.drawAlignmentJust(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), normalColor: normalColor)
        CGContextRestoreGState(context)
    }

    public class func drawAlignmentJustSelected(frame frame: CGRect = CGRectMake(0, 0, 30, 30), selectedColor: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, 30, 30)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        CTAStyleKit.drawAlignmentJustNormal(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), normalColor: selectedColor)
        CGContextRestoreGState(context)
    }

    public class func drawAlignmentLeft(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.11198 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.11198 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.00000 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.88802 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.88802 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.55469 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.44531 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.44531 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.55469 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.55469 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.66667 * frame.width, frame.minY + 0.22135 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.66667 * frame.width, frame.minY + 0.33333 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.33333 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.22135 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.66667 * frame.width, frame.minY + 0.22135 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.66667 * frame.width, frame.minY + 0.66667 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.66667 * frame.width, frame.minY + 0.77865 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.77865 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.66667 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.66667 * frame.width, frame.minY + 0.66667 * frame.height))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        normalColor.setFill()
        bezierPath.fill()
    }

    public class func drawAlignmentLeftNormal(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, 30, 30)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        CTAStyleKit.drawAlignmentLeft(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), normalColor: normalColor)
        CGContextRestoreGState(context)
    }

    public class func drawAlignmentLeftSelected(frame frame: CGRect = CGRectMake(0, 0, 30, 30), selectedColor: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, 30, 30)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        CTAStyleKit.drawAlignmentLeftNormal(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), normalColor: selectedColor)
        CGContextRestoreGState(context)
    }

    public class func drawAlignmentRight(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.11198 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.11198 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.00000 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.33333 * frame.width, frame.minY + 0.33333 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.33333 * frame.width, frame.minY + 0.22135 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.22135 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.33333 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.33333 * frame.width, frame.minY + 0.33333 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.55469 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.44531 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.44531 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.55469 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.55469 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.33333 * frame.width, frame.minY + 0.77865 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.33333 * frame.width, frame.minY + 0.66667 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.66667 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.77865 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.33333 * frame.width, frame.minY + 0.77865 * frame.height))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.88802 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.88802 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        normalColor.setFill()
        bezierPath.fill()
    }

    public class func drawAlignmentRightNormal(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, 30, 30)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        CTAStyleKit.drawAlignmentRight(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), normalColor: normalColor)
        CGContextRestoreGState(context)
    }

    public class func drawAlignmentRightSelected(frame frame: CGRect = CGRectMake(0, 0, 30, 30), selectedColor: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, 30, 30)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        CTAStyleKit.drawAlignmentRightNormal(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), normalColor: selectedColor)
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class func imageOfAlignmentCenter(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            CTAStyleKit.drawAlignmentCenter(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), normalColor: normalColor)

        let imageOfAlignmentCenter = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAlignmentCenter
    }

    public class func imageOfAlignmentCenterNormal(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            CTAStyleKit.drawAlignmentCenterNormal(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), normalColor: normalColor)

        let imageOfAlignmentCenterNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAlignmentCenterNormal
    }

    public class func imageOfAlignmentCenterSelected(frame frame: CGRect = CGRectMake(0, 0, 30, 30), selectedColor: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            CTAStyleKit.drawAlignmentCenterSelected(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), selectedColor: selectedColor)

        let imageOfAlignmentCenterSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAlignmentCenterSelected
    }

    public class func imageOfAlignmentJust(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            CTAStyleKit.drawAlignmentJust(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), normalColor: normalColor)

        let imageOfAlignmentJust = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAlignmentJust
    }

    public class func imageOfAlignmentJustNormal(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            CTAStyleKit.drawAlignmentJustNormal(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), normalColor: normalColor)

        let imageOfAlignmentJustNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAlignmentJustNormal
    }

    public class func imageOfAlignmentJustSelected(frame frame: CGRect = CGRectMake(0, 0, 30, 30), selectedColor: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            CTAStyleKit.drawAlignmentJustSelected(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), selectedColor: selectedColor)

        let imageOfAlignmentJustSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAlignmentJustSelected
    }

    public class func imageOfAlignmentLeft(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            CTAStyleKit.drawAlignmentLeft(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), normalColor: normalColor)

        let imageOfAlignmentLeft = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAlignmentLeft
    }

    public class func imageOfAlignmentLeftNormal(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            CTAStyleKit.drawAlignmentLeftNormal(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), normalColor: normalColor)

        let imageOfAlignmentLeftNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAlignmentLeftNormal
    }

    public class func imageOfAlignmentLeftSelected(frame frame: CGRect = CGRectMake(0, 0, 30, 30), selectedColor: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            CTAStyleKit.drawAlignmentLeftSelected(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), selectedColor: selectedColor)

        let imageOfAlignmentLeftSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAlignmentLeftSelected
    }

    public class func imageOfAlignmentRight(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            CTAStyleKit.drawAlignmentRight(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), normalColor: normalColor)

        let imageOfAlignmentRight = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAlignmentRight
    }

    public class func imageOfAlignmentRightNormal(frame frame: CGRect = CGRectMake(0, 0, 30, 30), normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            CTAStyleKit.drawAlignmentRightNormal(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), normalColor: normalColor)

        let imageOfAlignmentRightNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAlignmentRightNormal
    }

    public class func imageOfAlignmentRightSelected(frame frame: CGRect = CGRectMake(0, 0, 30, 30), selectedColor: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            CTAStyleKit.drawAlignmentRightSelected(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), selectedColor: selectedColor)

        let imageOfAlignmentRightSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAlignmentRightSelected
    }

}
