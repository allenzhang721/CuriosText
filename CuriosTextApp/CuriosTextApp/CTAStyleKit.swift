//
//  CTAStyleKit.swift
//  CuriosText
//
//  Created by Emiaostein on 25/11/2016.
//  Copyright Â© 2016 com.botai. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

open class CTAStyleKit : NSObject {

    //// Cache

    fileprivate struct Cache {
        static let normalColor: UIColor = UIColor(red: 0.631, green: 0.631, blue: 0.631, alpha: 1.000)
        static let selectedColor: UIColor = UIColor(red: 0.937, green: 0.200, blue: 0.290, alpha: 1.000)
        static let labelShowColor: UIColor = UIColor(red: 0.607, green: 0.607, blue: 0.607, alpha: 1.000)
        static let disableColor: UIColor = UIColor(red: 0.847, green: 0.847, blue: 0.847, alpha: 1.000)
        static let ediorBackgroundColor: UIColor = UIColor(red: 0.827, green: 0.827, blue: 0.827, alpha: 1.000)
        static let commonBackgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let detailBackgroundColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let lightGrayBackgroundColor: UIColor = UIColor(red: 0.949, green: 0.949, blue: 0.965, alpha: 1.000)
        static let one0: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let one1: UIColor = UIColor(red: 0.357, green: 0.271, blue: 0.561, alpha: 1.000)
        static let one2: UIColor = UIColor(red: 0.749, green: 0.573, blue: 0.686, alpha: 1.000)
        static let one3: UIColor = UIColor(red: 0.937, green: 0.200, blue: 0.290, alpha: 1.000)
        static let one4: UIColor = UIColor(red: 0.647, green: 0.631, blue: 0.596, alpha: 1.000)
        static let one5: UIColor = UIColor(red: 0.137, green: 0.604, blue: 0.808, alpha: 1.000)
        static let one6: UIColor = UIColor(red: 0.251, green: 0.282, blue: 0.290, alpha: 1.000)
        static let one7: UIColor = UIColor(red: 0.624, green: 0.698, blue: 0.706, alpha: 1.000)
        static let one8: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let two0: UIColor = UIColor(red: 0.153, green: 0.137, blue: 0.196, alpha: 1.000)
        static let two1: UIColor = UIColor(red: 0.820, green: 0.373, blue: 0.114, alpha: 1.000)
        static let two2: UIColor = UIColor(red: 0.890, green: 0.741, blue: 0.110, alpha: 1.000)
        static let two3: UIColor = UIColor(red: 0.314, green: 0.392, blue: 0.192, alpha: 1.000)
        static let two4: UIColor = UIColor(red: 0.537, green: 0.588, blue: 0.408, alpha: 1.000)
        static let two5: UIColor = UIColor(red: 0.831, green: 0.522, blue: 0.522, alpha: 1.000)
        static let two6: UIColor = UIColor(red: 0.612, green: 0.808, blue: 0.812, alpha: 1.000)
        static let two7: UIColor = UIColor(red: 0.686, green: 0.510, blue: 0.345, alpha: 1.000)
        static let two8: UIColor = UIColor(red: 0.839, green: 0.741, blue: 0.663, alpha: 1.000)
        static let three0: UIColor = UIColor(red: 0.498, green: 0.176, blue: 0.176, alpha: 1.000)
        static let three1: UIColor = UIColor(red: 0.831, green: 0.522, blue: 0.525, alpha: 1.000)
        static let three2: UIColor = UIColor(red: 0.184, green: 0.263, blue: 0.310, alpha: 1.000)
        static let three3: UIColor = UIColor(red: 0.608, green: 0.808, blue: 0.812, alpha: 1.000)
        static let three4: UIColor = UIColor(red: 0.859, green: 0.278, blue: 0.004, alpha: 1.000)
        static let three5: UIColor = UIColor(red: 0.965, green: 0.686, blue: 0.122, alpha: 1.000)
        static let three6: UIColor = UIColor(red: 0.976, green: 0.902, blue: 0.784, alpha: 1.000)
        static let three7: UIColor = UIColor(red: 0.365, green: 0.631, blue: 0.706, alpha: 1.000)
        static let three8: UIColor = UIColor(red: 0.655, green: 0.780, blue: 0.722, alpha: 1.000)
        static let four0: UIColor = UIColor(red: 0.937, green: 0.502, blue: 0.192, alpha: 1.000)
        static let four1: UIColor = UIColor(red: 0.580, green: 0.420, blue: 0.161, alpha: 1.000)
        static let four2: UIColor = UIColor(red: 0.890, green: 0.941, blue: 0.831, alpha: 1.000)
        static let four3: UIColor = UIColor(red: 0.165, green: 0.196, blue: 0.514, alpha: 1.000)
        static let four4: UIColor = UIColor(red: 0.969, green: 0.871, blue: 0.031, alpha: 1.000)
        static let four5: UIColor = UIColor(red: 0.976, green: 0.686, blue: 0.102, alpha: 1.000)
        static let four6: UIColor = UIColor(red: 0.886, green: 0.149, blue: 0.490, alpha: 1.000)
        static let four7: UIColor = UIColor(red: 0.502, green: 0.765, blue: 0.259, alpha: 1.000)
        static let four8: UIColor = UIColor(red: 0.000, green: 0.718, blue: 0.871, alpha: 1.000)
        static let five0: UIColor = UIColor(red: 0.988, green: 0.925, blue: 0.592, alpha: 1.000)
        static let five1: UIColor = UIColor(red: 0.502, green: 0.792, blue: 0.647, alpha: 1.000)
        static let five2: UIColor = UIColor(red: 0.667, green: 0.875, blue: 0.945, alpha: 1.000)
        static let five3: UIColor = UIColor(red: 0.984, green: 0.714, blue: 0.498, alpha: 1.000)
        static let five4: UIColor = UIColor(red: 0.953, green: 0.431, blue: 0.325, alpha: 1.000)
        static let five5: UIColor = UIColor(red: 0.604, green: 0.208, blue: 0.576, alpha: 1.000)
        static let five6: UIColor = UIColor(red: 0.769, green: 0.447, blue: 0.635, alpha: 1.000)
        static let five7: UIColor = UIColor(red: 0.949, green: 0.494, blue: 0.639, alpha: 1.000)
        static let five8: UIColor = UIColor(red: 0.471, green: 0.627, blue: 0.247, alpha: 1.000)
        static var imageOfAlignmentRightSelected: UIImage?
        static var alignmentRightSelectedTargets: [AnyObject]?
        static var imageOfAlignmentRightNormal: UIImage?
        static var alignmentRightNormalTargets: [AnyObject]?
        static var imageOfAlignmentLeftSelected: UIImage?
        static var alignmentLeftSelectedTargets: [AnyObject]?
        static var imageOfAlignmentLeftNormal: UIImage?
        static var alignmentLeftNormalTargets: [AnyObject]?
        static var imageOfAlignmentCenterSelected: UIImage?
        static var alignmentCenterSelectedTargets: [AnyObject]?
        static var imageOfAlignmentCenterNormal: UIImage?
        static var alignmentCenterNormalTargets: [AnyObject]?
        static var imageOfAlignmentJustNormal: UIImage?
        static var alignmentJustNormalTargets: [AnyObject]?
        static var imageOfAlignmentJustSelected: UIImage?
        static var alignmentJustSelectedTargets: [AnyObject]?
        static var imageOfLineSpacingNormal: UIImage?
        static var lineSpacingNormalTargets: [AnyObject]?
        static var imageOfLineSpacingSelected: UIImage?
        static var lineSpacingSelectedTargets: [AnyObject]?
        static var imageOfTextSpacingSelected: UIImage?
        static var textSpacingSelectedTargets: [AnyObject]?
        static var imageOfTextSpacingNormal: UIImage?
        static var textSpacingNormalTargets: [AnyObject]?
        static var imageOfAdd: UIImage?
        static var addTargets: [AnyObject]?
        static var imageOfNode: UIImage?
        static var nodeTargets: [AnyObject]?
        static var imageOfFontBarItemNormal: UIImage?
        static var fontBarItemNormalTargets: [AnyObject]?
        static var imageOfFontBarItemSelected: UIImage?
        static var fontBarItemSelectedTargets: [AnyObject]?
        static var imageOfSizeBarItemNormal: UIImage?
        static var sizeBarItemNormalTargets: [AnyObject]?
        static var imageOfSizeBarItemSelected: UIImage?
        static var sizeBarItemSelectedTargets: [AnyObject]?
        static var imageOfColorBarItemSelected: UIImage?
        static var colorBarItemSelectedTargets: [AnyObject]?
        static var imageOfColorBarItemNormal: UIImage?
        static var colorBarItemNormalTargets: [AnyObject]?
        static var imageOfRotationBarItemSelected: UIImage?
        static var rotationBarItemSelectedTargets: [AnyObject]?
        static var imageOfRotationBarItemNormal: UIImage?
        static var rotationBarItemNormalTargets: [AnyObject]?
        static var imageOfAlignmentBarItemNormal: UIImage?
        static var alignmentBarItemNormalTargets: [AnyObject]?
        static var imageOfAlignmentBarItemSelected: UIImage?
        static var alignmentBarItemSelectedTargets: [AnyObject]?
        static var imageOfSpacingBarItemNormal: UIImage?
        static var spacingBarItemNormalTargets: [AnyObject]?
        static var imageOfSpacingBarItemSelected: UIImage?
        static var spacingBarItemSelectedTargets: [AnyObject]?
        static var imageOfAnimationBarItemNormal: UIImage?
        static var animationBarItemNormalTargets: [AnyObject]?
        static var imageOfAnimationBarItemSelected: UIImage?
        static var animationBarItemSelectedTargets: [AnyObject]?
        static var imageOfCameraButton: UIImage?
        static var cameraButtonTargets: [AnyObject]?
        static var imageOfAddInEditor: UIImage?
        static var addInEditorTargets: [AnyObject]?
        static var imageOfAnimationplay: UIImage?
        static var animationplayTargets: [AnyObject]?
        static var imageOfAnimationpause: UIImage?
        static var animationpauseTargets: [AnyObject]?
        static var imageOfTemplatesNormal: UIImage?
        static var templatesNormalTargets: [AnyObject]?
        static var imageOfTemplatesSelected: UIImage?
        static var templatesSelectedTargets: [AnyObject]?
        static var imageOfFiltersNormal: UIImage?
        static var filtersNormalTargets: [AnyObject]?
        static var imageOfFiltersSelected: UIImage?
        static var filtersSelectedTargets: [AnyObject]?
    }

    //// Colors

    open dynamic class var normalColor: UIColor { return Cache.normalColor }
    open dynamic class var selectedColor: UIColor { return Cache.selectedColor }
    open dynamic class var labelShowColor: UIColor { return Cache.labelShowColor }
    open dynamic class var disableColor: UIColor { return Cache.disableColor }
    open dynamic class var ediorBackgroundColor: UIColor { return Cache.ediorBackgroundColor }
    open dynamic class var commonBackgroundColor: UIColor { return Cache.commonBackgroundColor }
    open dynamic class var detailBackgroundColor: UIColor { return Cache.detailBackgroundColor }
    open dynamic class var lightGrayBackgroundColor: UIColor { return Cache.lightGrayBackgroundColor }
    open dynamic class var one0: UIColor { return Cache.one0 }
    open dynamic class var one1: UIColor { return Cache.one1 }
    open dynamic class var one2: UIColor { return Cache.one2 }
    open dynamic class var one3: UIColor { return Cache.one3 }
    open dynamic class var one4: UIColor { return Cache.one4 }
    open dynamic class var one5: UIColor { return Cache.one5 }
    open dynamic class var one6: UIColor { return Cache.one6 }
    open dynamic class var one7: UIColor { return Cache.one7 }
    open dynamic class var one8: UIColor { return Cache.one8 }
    open dynamic class var two0: UIColor { return Cache.two0 }
    open dynamic class var two1: UIColor { return Cache.two1 }
    open dynamic class var two2: UIColor { return Cache.two2 }
    open dynamic class var two3: UIColor { return Cache.two3 }
    open dynamic class var two4: UIColor { return Cache.two4 }
    open dynamic class var two5: UIColor { return Cache.two5 }
    open dynamic class var two6: UIColor { return Cache.two6 }
    open dynamic class var two7: UIColor { return Cache.two7 }
    open dynamic class var two8: UIColor { return Cache.two8 }
    open dynamic class var three0: UIColor { return Cache.three0 }
    open dynamic class var three1: UIColor { return Cache.three1 }
    open dynamic class var three2: UIColor { return Cache.three2 }
    open dynamic class var three3: UIColor { return Cache.three3 }
    open dynamic class var three4: UIColor { return Cache.three4 }
    open dynamic class var three5: UIColor { return Cache.three5 }
    open dynamic class var three6: UIColor { return Cache.three6 }
    open dynamic class var three7: UIColor { return Cache.three7 }
    open dynamic class var three8: UIColor { return Cache.three8 }
    open dynamic class var four0: UIColor { return Cache.four0 }
    open dynamic class var four1: UIColor { return Cache.four1 }
    open dynamic class var four2: UIColor { return Cache.four2 }
    open dynamic class var four3: UIColor { return Cache.four3 }
    open dynamic class var four4: UIColor { return Cache.four4 }
    open dynamic class var four5: UIColor { return Cache.four5 }
    open dynamic class var four6: UIColor { return Cache.four6 }
    open dynamic class var four7: UIColor { return Cache.four7 }
    open dynamic class var four8: UIColor { return Cache.four8 }
    open dynamic class var five0: UIColor { return Cache.five0 }
    open dynamic class var five1: UIColor { return Cache.five1 }
    open dynamic class var five2: UIColor { return Cache.five2 }
    open dynamic class var five3: UIColor { return Cache.five3 }
    open dynamic class var five4: UIColor { return Cache.five4 }
    open dynamic class var five5: UIColor { return Cache.five5 }
    open dynamic class var five6: UIColor { return Cache.five6 }
    open dynamic class var five7: UIColor { return Cache.five7 }
    open dynamic class var five8: UIColor { return Cache.five8 }

    //// Drawing Methods

    open dynamic class func drawAlignmentRightSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 30, y: 0))
        bezierPath.addLine(to: CGPoint(x: 30, y: 3.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 3.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10, y: 6.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 6.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 16.64))
        bezierPath.addLine(to: CGPoint(x: 0, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 30, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 30, y: 16.64))
        bezierPath.addLine(to: CGPoint(x: 0, y: 16.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 23.36))
        bezierPath.addLine(to: CGPoint(x: 10, y: 20))
        bezierPath.addLine(to: CGPoint(x: 30, y: 20))
        bezierPath.addLine(to: CGPoint(x: 30, y: 23.36))
        bezierPath.addLine(to: CGPoint(x: 10, y: 23.36))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 30))
        bezierPath.addLine(to: CGPoint(x: 0, y: 26.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 26.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 30))
        bezierPath.addLine(to: CGPoint(x: 0, y: 30))
        bezierPath.close()
        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawAlignmentRightNormal() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 30, y: 0))
        bezierPath.addLine(to: CGPoint(x: 30, y: 3.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 3.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10, y: 6.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 6.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 16.64))
        bezierPath.addLine(to: CGPoint(x: 0, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 30, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 30, y: 16.64))
        bezierPath.addLine(to: CGPoint(x: 0, y: 16.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 23.36))
        bezierPath.addLine(to: CGPoint(x: 10, y: 20))
        bezierPath.addLine(to: CGPoint(x: 30, y: 20))
        bezierPath.addLine(to: CGPoint(x: 30, y: 23.36))
        bezierPath.addLine(to: CGPoint(x: 10, y: 23.36))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 30))
        bezierPath.addLine(to: CGPoint(x: 0, y: 26.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 26.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 30))
        bezierPath.addLine(to: CGPoint(x: 0, y: 30))
        bezierPath.close()
        CTAStyleKit.normalColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawAlignmentLeftSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 30, y: 0))
        bezierPath.addLine(to: CGPoint(x: 30, y: 3.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 3.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 30))
        bezierPath.addLine(to: CGPoint(x: 0, y: 26.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 26.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 30))
        bezierPath.addLine(to: CGPoint(x: 0, y: 30))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 16.64))
        bezierPath.addLine(to: CGPoint(x: 0, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 30, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 30, y: 16.64))
        bezierPath.addLine(to: CGPoint(x: 0, y: 16.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 20, y: 6.64))
        bezierPath.addLine(to: CGPoint(x: 20, y: 10))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addLine(to: CGPoint(x: 0, y: 6.64))
        bezierPath.addLine(to: CGPoint(x: 20, y: 6.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 20, y: 20))
        bezierPath.addLine(to: CGPoint(x: 20, y: 23.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 23.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 20))
        bezierPath.addLine(to: CGPoint(x: 20, y: 20))
        bezierPath.close()
        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawAlignmentLeftNormal() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 30, y: 0))
        bezierPath.addLine(to: CGPoint(x: 30, y: 3.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 3.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 30))
        bezierPath.addLine(to: CGPoint(x: 0, y: 26.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 26.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 30))
        bezierPath.addLine(to: CGPoint(x: 0, y: 30))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 16.64))
        bezierPath.addLine(to: CGPoint(x: 0, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 30, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 30, y: 16.64))
        bezierPath.addLine(to: CGPoint(x: 0, y: 16.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 20, y: 6.64))
        bezierPath.addLine(to: CGPoint(x: 20, y: 10))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10))
        bezierPath.addLine(to: CGPoint(x: 0, y: 6.64))
        bezierPath.addLine(to: CGPoint(x: 20, y: 6.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 20, y: 20))
        bezierPath.addLine(to: CGPoint(x: 20, y: 23.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 23.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 20))
        bezierPath.addLine(to: CGPoint(x: 20, y: 20))
        bezierPath.close()
        CTAStyleKit.normalColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawAlignmentCenterSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 30, y: 0))
        bezierPath.addLine(to: CGPoint(x: 30, y: 3.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 3.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 6.64, y: 6.64))
        bezierPath.addLine(to: CGPoint(x: 23.36, y: 6.64))
        bezierPath.addLine(to: CGPoint(x: 23.36, y: 10))
        bezierPath.addLine(to: CGPoint(x: 6.64, y: 10))
        bezierPath.addLine(to: CGPoint(x: 6.64, y: 6.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 16.64))
        bezierPath.addLine(to: CGPoint(x: 0, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 30, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 30, y: 16.64))
        bezierPath.addLine(to: CGPoint(x: 0, y: 16.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 30))
        bezierPath.addLine(to: CGPoint(x: 0, y: 26.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 26.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 30))
        bezierPath.addLine(to: CGPoint(x: 0, y: 30))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 6.64, y: 20))
        bezierPath.addLine(to: CGPoint(x: 23.36, y: 20))
        bezierPath.addLine(to: CGPoint(x: 23.36, y: 23.36))
        bezierPath.addLine(to: CGPoint(x: 6.64, y: 23.36))
        bezierPath.addLine(to: CGPoint(x: 6.64, y: 20))
        bezierPath.close()
        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawAlignmentCenterNormal() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 30, y: 0))
        bezierPath.addLine(to: CGPoint(x: 30, y: 3.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 3.36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 6.64, y: 6.64))
        bezierPath.addLine(to: CGPoint(x: 23.36, y: 6.64))
        bezierPath.addLine(to: CGPoint(x: 23.36, y: 10))
        bezierPath.addLine(to: CGPoint(x: 6.64, y: 10))
        bezierPath.addLine(to: CGPoint(x: 6.64, y: 6.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 16.64))
        bezierPath.addLine(to: CGPoint(x: 0, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 30, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 30, y: 16.64))
        bezierPath.addLine(to: CGPoint(x: 0, y: 16.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 30))
        bezierPath.addLine(to: CGPoint(x: 0, y: 26.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 26.64))
        bezierPath.addLine(to: CGPoint(x: 30, y: 30))
        bezierPath.addLine(to: CGPoint(x: 0, y: 30))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 6.64, y: 20))
        bezierPath.addLine(to: CGPoint(x: 23.36, y: 20))
        bezierPath.addLine(to: CGPoint(x: 23.36, y: 23.36))
        bezierPath.addLine(to: CGPoint(x: 6.64, y: 23.36))
        bezierPath.addLine(to: CGPoint(x: 6.64, y: 20))
        bezierPath.close()
        CTAStyleKit.normalColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawAlignmentJustNormal() {

        //// alignment-Just-Normal Drawing
        let alignmentJustNormalPath = UIBezierPath()
        alignmentJustNormalPath.move(to: CGPoint(x: 0, y: 0))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 30, y: 0))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 30, y: 3.36))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 0, y: 3.36))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 0, y: 0))
        alignmentJustNormalPath.close()
        alignmentJustNormalPath.move(to: CGPoint(x: 0, y: 10))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 0, y: 6.64))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 30, y: 6.64))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 30, y: 10))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 0, y: 10))
        alignmentJustNormalPath.close()
        alignmentJustNormalPath.move(to: CGPoint(x: 0, y: 16.64))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 0, y: 13.36))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 30, y: 13.36))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 30, y: 16.64))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 0, y: 16.64))
        alignmentJustNormalPath.close()
        alignmentJustNormalPath.move(to: CGPoint(x: 0, y: 23.36))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 0, y: 20))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 30, y: 20))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 30, y: 23.36))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 0, y: 23.36))
        alignmentJustNormalPath.close()
        alignmentJustNormalPath.move(to: CGPoint(x: 0, y: 30))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 0, y: 26.64))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 30, y: 26.64))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 30, y: 30))
        alignmentJustNormalPath.addLine(to: CGPoint(x: 0, y: 30))
        alignmentJustNormalPath.close()
        CTAStyleKit.normalColor.setFill()
        alignmentJustNormalPath.fill()
    }

    open dynamic class func drawAlignmentJustSelected() {

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 3.36))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 3.36))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 0, y: 10))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 6.64))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 6.64))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 10))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 10))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 0, y: 16.64))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 13.36))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 13.36))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 16.64))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 16.64))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 0, y: 23.36))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 20))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 20))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 23.36))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 23.36))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 0, y: 30))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 26.64))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 26.64))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 30))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 30))
        bezier2Path.close()
        CTAStyleKit.selectedColor.setFill()
        bezier2Path.fill()
    }

    open dynamic class func drawLineSpacingNormal() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 18.27, y: 5.33))
        bezierPath.addCurve(to: CGPoint(x: 19.65, y: 5.36), controlPoint1: CGPoint(x: 18.72, y: 5.8), controlPoint2: CGPoint(x: 19.18, y: 5.81))
        bezierPath.addCurve(to: CGPoint(x: 19.62, y: 4.04), controlPoint1: CGPoint(x: 20.13, y: 4.91), controlPoint2: CGPoint(x: 20.12, y: 4.47))
        bezierPath.addLine(to: CGPoint(x: 15.68, y: 0.29))
        bezierPath.addCurve(to: CGPoint(x: 15.37, y: 0.06), controlPoint1: CGPoint(x: 15.6, y: 0.18), controlPoint2: CGPoint(x: 15.49, y: 0.1))
        bezierPath.addCurve(to: CGPoint(x: 14.63, y: 0.06), controlPoint1: CGPoint(x: 15.12, y: -0.02), controlPoint2: CGPoint(x: 14.88, y: -0.02))
        bezierPath.addCurve(to: CGPoint(x: 14.32, y: 0.29), controlPoint1: CGPoint(x: 14.51, y: 0.1), controlPoint2: CGPoint(x: 14.4, y: 0.18))
        bezierPath.addLine(to: CGPoint(x: 10.38, y: 4.04))
        bezierPath.addCurve(to: CGPoint(x: 10.35, y: 5.36), controlPoint1: CGPoint(x: 9.88, y: 4.47), controlPoint2: CGPoint(x: 9.87, y: 4.91))
        bezierPath.addCurve(to: CGPoint(x: 11.73, y: 5.33), controlPoint1: CGPoint(x: 10.82, y: 5.81), controlPoint2: CGPoint(x: 11.28, y: 5.8))
        bezierPath.addLine(to: CGPoint(x: 14.01, y: 3.22))
        bezierPath.addLine(to: CGPoint(x: 14.01, y: 26.78))
        bezierPath.addLine(to: CGPoint(x: 11.73, y: 24.67))
        bezierPath.addCurve(to: CGPoint(x: 10.35, y: 24.64), controlPoint1: CGPoint(x: 11.28, y: 24.2), controlPoint2: CGPoint(x: 10.82, y: 24.19))
        bezierPath.addCurve(to: CGPoint(x: 10.38, y: 25.96), controlPoint1: CGPoint(x: 9.87, y: 25.09), controlPoint2: CGPoint(x: 9.88, y: 25.53))
        bezierPath.addLine(to: CGPoint(x: 14.32, y: 29.71))
        bezierPath.addCurve(to: CGPoint(x: 14.63, y: 29.94), controlPoint1: CGPoint(x: 14.4, y: 29.82), controlPoint2: CGPoint(x: 14.51, y: 29.9))
        bezierPath.addCurve(to: CGPoint(x: 15.37, y: 29.94), controlPoint1: CGPoint(x: 14.88, y: 30.02), controlPoint2: CGPoint(x: 15.12, y: 30.02))
        bezierPath.addCurve(to: CGPoint(x: 15.68, y: 29.71), controlPoint1: CGPoint(x: 15.49, y: 29.9), controlPoint2: CGPoint(x: 15.6, y: 29.82))
        bezierPath.addLine(to: CGPoint(x: 19.62, y: 25.96))
        bezierPath.addCurve(to: CGPoint(x: 19.65, y: 24.64), controlPoint1: CGPoint(x: 20.12, y: 25.53), controlPoint2: CGPoint(x: 20.13, y: 25.09))
        bezierPath.addCurve(to: CGPoint(x: 18.27, y: 24.67), controlPoint1: CGPoint(x: 19.18, y: 24.19), controlPoint2: CGPoint(x: 18.72, y: 24.2))
        bezierPath.addLine(to: CGPoint(x: 15.99, y: 26.78))
        bezierPath.addLine(to: CGPoint(x: 15.99, y: 3.22))
        bezierPath.addLine(to: CGPoint(x: 18.27, y: 5.33))
        bezierPath.close()
        CTAStyleKit.normalColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawLineSpacingSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 18.27, y: 5.33))
        bezierPath.addCurve(to: CGPoint(x: 19.65, y: 5.36), controlPoint1: CGPoint(x: 18.72, y: 5.8), controlPoint2: CGPoint(x: 19.18, y: 5.81))
        bezierPath.addCurve(to: CGPoint(x: 19.62, y: 4.04), controlPoint1: CGPoint(x: 20.13, y: 4.91), controlPoint2: CGPoint(x: 20.12, y: 4.47))
        bezierPath.addLine(to: CGPoint(x: 15.68, y: 0.29))
        bezierPath.addCurve(to: CGPoint(x: 15.37, y: 0.06), controlPoint1: CGPoint(x: 15.6, y: 0.18), controlPoint2: CGPoint(x: 15.49, y: 0.1))
        bezierPath.addCurve(to: CGPoint(x: 14.63, y: 0.06), controlPoint1: CGPoint(x: 15.12, y: -0.02), controlPoint2: CGPoint(x: 14.88, y: -0.02))
        bezierPath.addCurve(to: CGPoint(x: 14.32, y: 0.29), controlPoint1: CGPoint(x: 14.51, y: 0.1), controlPoint2: CGPoint(x: 14.4, y: 0.18))
        bezierPath.addLine(to: CGPoint(x: 10.38, y: 4.04))
        bezierPath.addCurve(to: CGPoint(x: 10.35, y: 5.36), controlPoint1: CGPoint(x: 9.88, y: 4.47), controlPoint2: CGPoint(x: 9.87, y: 4.91))
        bezierPath.addCurve(to: CGPoint(x: 11.73, y: 5.33), controlPoint1: CGPoint(x: 10.82, y: 5.81), controlPoint2: CGPoint(x: 11.28, y: 5.8))
        bezierPath.addLine(to: CGPoint(x: 14.01, y: 3.22))
        bezierPath.addLine(to: CGPoint(x: 14.01, y: 26.78))
        bezierPath.addLine(to: CGPoint(x: 11.73, y: 24.67))
        bezierPath.addCurve(to: CGPoint(x: 10.35, y: 24.64), controlPoint1: CGPoint(x: 11.28, y: 24.2), controlPoint2: CGPoint(x: 10.82, y: 24.19))
        bezierPath.addCurve(to: CGPoint(x: 10.38, y: 25.96), controlPoint1: CGPoint(x: 9.87, y: 25.09), controlPoint2: CGPoint(x: 9.88, y: 25.53))
        bezierPath.addLine(to: CGPoint(x: 14.32, y: 29.71))
        bezierPath.addCurve(to: CGPoint(x: 14.63, y: 29.94), controlPoint1: CGPoint(x: 14.4, y: 29.82), controlPoint2: CGPoint(x: 14.51, y: 29.9))
        bezierPath.addCurve(to: CGPoint(x: 15.37, y: 29.94), controlPoint1: CGPoint(x: 14.88, y: 30.02), controlPoint2: CGPoint(x: 15.12, y: 30.02))
        bezierPath.addCurve(to: CGPoint(x: 15.68, y: 29.71), controlPoint1: CGPoint(x: 15.49, y: 29.9), controlPoint2: CGPoint(x: 15.6, y: 29.82))
        bezierPath.addLine(to: CGPoint(x: 19.62, y: 25.96))
        bezierPath.addCurve(to: CGPoint(x: 19.65, y: 24.64), controlPoint1: CGPoint(x: 20.12, y: 25.53), controlPoint2: CGPoint(x: 20.13, y: 25.09))
        bezierPath.addCurve(to: CGPoint(x: 18.27, y: 24.67), controlPoint1: CGPoint(x: 19.18, y: 24.19), controlPoint2: CGPoint(x: 18.72, y: 24.2))
        bezierPath.addLine(to: CGPoint(x: 15.99, y: 26.78))
        bezierPath.addLine(to: CGPoint(x: 15.99, y: 3.22))
        bezierPath.addLine(to: CGPoint(x: 18.27, y: 5.33))
        bezierPath.close()
        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawTextSpacingSelected() {

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 29.94, y: 14.63))
        bezier2Path.addCurve(to: CGPoint(x: 29.71, y: 14.32), controlPoint1: CGPoint(x: 29.9, y: 14.51), controlPoint2: CGPoint(x: 29.82, y: 14.4))
        bezier2Path.addLine(to: CGPoint(x: 25.96, y: 10.38))
        bezier2Path.addCurve(to: CGPoint(x: 24.64, y: 10.35), controlPoint1: CGPoint(x: 25.53, y: 9.88), controlPoint2: CGPoint(x: 25.09, y: 9.87))
        bezier2Path.addCurve(to: CGPoint(x: 24.67, y: 11.73), controlPoint1: CGPoint(x: 24.19, y: 10.82), controlPoint2: CGPoint(x: 24.2, y: 11.28))
        bezier2Path.addLine(to: CGPoint(x: 26.78, y: 14.01))
        bezier2Path.addLine(to: CGPoint(x: 3.22, y: 14.01))
        bezier2Path.addLine(to: CGPoint(x: 5.33, y: 11.73))
        bezier2Path.addCurve(to: CGPoint(x: 5.36, y: 10.35), controlPoint1: CGPoint(x: 5.8, y: 11.28), controlPoint2: CGPoint(x: 5.81, y: 10.82))
        bezier2Path.addCurve(to: CGPoint(x: 4.04, y: 10.38), controlPoint1: CGPoint(x: 4.91, y: 9.87), controlPoint2: CGPoint(x: 4.47, y: 9.88))
        bezier2Path.addLine(to: CGPoint(x: 0.29, y: 14.32))
        bezier2Path.addCurve(to: CGPoint(x: 0.06, y: 14.63), controlPoint1: CGPoint(x: 0.18, y: 14.4), controlPoint2: CGPoint(x: 0.1, y: 14.51))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 15), controlPoint1: CGPoint(x: 0.02, y: 14.75), controlPoint2: CGPoint(x: 0, y: 14.88))
        bezier2Path.addCurve(to: CGPoint(x: 0.06, y: 15.37), controlPoint1: CGPoint(x: 0, y: 15.12), controlPoint2: CGPoint(x: 0.02, y: 15.25))
        bezier2Path.addCurve(to: CGPoint(x: 0.29, y: 15.68), controlPoint1: CGPoint(x: 0.1, y: 15.49), controlPoint2: CGPoint(x: 0.18, y: 15.6))
        bezier2Path.addLine(to: CGPoint(x: 4.04, y: 19.62))
        bezier2Path.addCurve(to: CGPoint(x: 5.36, y: 19.65), controlPoint1: CGPoint(x: 4.47, y: 20.12), controlPoint2: CGPoint(x: 4.91, y: 20.13))
        bezier2Path.addCurve(to: CGPoint(x: 5.33, y: 18.27), controlPoint1: CGPoint(x: 5.81, y: 19.18), controlPoint2: CGPoint(x: 5.8, y: 18.72))
        bezier2Path.addLine(to: CGPoint(x: 3.22, y: 15.99))
        bezier2Path.addLine(to: CGPoint(x: 26.78, y: 15.99))
        bezier2Path.addLine(to: CGPoint(x: 24.67, y: 18.27))
        bezier2Path.addCurve(to: CGPoint(x: 24.64, y: 19.65), controlPoint1: CGPoint(x: 24.2, y: 18.72), controlPoint2: CGPoint(x: 24.19, y: 19.18))
        bezier2Path.addCurve(to: CGPoint(x: 25.96, y: 19.62), controlPoint1: CGPoint(x: 25.09, y: 20.13), controlPoint2: CGPoint(x: 25.53, y: 20.12))
        bezier2Path.addLine(to: CGPoint(x: 29.71, y: 15.68))
        bezier2Path.addCurve(to: CGPoint(x: 29.94, y: 15.37), controlPoint1: CGPoint(x: 29.82, y: 15.6), controlPoint2: CGPoint(x: 29.9, y: 15.49))
        bezier2Path.addCurve(to: CGPoint(x: 30, y: 15), controlPoint1: CGPoint(x: 29.98, y: 15.25), controlPoint2: CGPoint(x: 30, y: 15.12))
        bezier2Path.addCurve(to: CGPoint(x: 29.94, y: 14.63), controlPoint1: CGPoint(x: 30, y: 14.88), controlPoint2: CGPoint(x: 29.98, y: 14.75))
        bezier2Path.close()
        CTAStyleKit.selectedColor.setFill()
        bezier2Path.fill()
    }

    open dynamic class func drawTextSpacingNormal() {

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 29.94, y: 14.63))
        bezier2Path.addCurve(to: CGPoint(x: 29.71, y: 14.32), controlPoint1: CGPoint(x: 29.9, y: 14.51), controlPoint2: CGPoint(x: 29.82, y: 14.4))
        bezier2Path.addLine(to: CGPoint(x: 25.96, y: 10.38))
        bezier2Path.addCurve(to: CGPoint(x: 24.64, y: 10.35), controlPoint1: CGPoint(x: 25.53, y: 9.88), controlPoint2: CGPoint(x: 25.09, y: 9.87))
        bezier2Path.addCurve(to: CGPoint(x: 24.67, y: 11.73), controlPoint1: CGPoint(x: 24.19, y: 10.82), controlPoint2: CGPoint(x: 24.2, y: 11.28))
        bezier2Path.addLine(to: CGPoint(x: 26.78, y: 14.01))
        bezier2Path.addLine(to: CGPoint(x: 3.22, y: 14.01))
        bezier2Path.addLine(to: CGPoint(x: 5.33, y: 11.73))
        bezier2Path.addCurve(to: CGPoint(x: 5.36, y: 10.35), controlPoint1: CGPoint(x: 5.8, y: 11.28), controlPoint2: CGPoint(x: 5.81, y: 10.82))
        bezier2Path.addCurve(to: CGPoint(x: 4.04, y: 10.38), controlPoint1: CGPoint(x: 4.91, y: 9.87), controlPoint2: CGPoint(x: 4.47, y: 9.88))
        bezier2Path.addLine(to: CGPoint(x: 0.29, y: 14.32))
        bezier2Path.addCurve(to: CGPoint(x: 0.06, y: 14.63), controlPoint1: CGPoint(x: 0.18, y: 14.4), controlPoint2: CGPoint(x: 0.1, y: 14.51))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 15), controlPoint1: CGPoint(x: 0.02, y: 14.75), controlPoint2: CGPoint(x: 0, y: 14.88))
        bezier2Path.addCurve(to: CGPoint(x: 0.06, y: 15.37), controlPoint1: CGPoint(x: 0, y: 15.12), controlPoint2: CGPoint(x: 0.02, y: 15.25))
        bezier2Path.addCurve(to: CGPoint(x: 0.29, y: 15.68), controlPoint1: CGPoint(x: 0.1, y: 15.49), controlPoint2: CGPoint(x: 0.18, y: 15.6))
        bezier2Path.addLine(to: CGPoint(x: 4.04, y: 19.62))
        bezier2Path.addCurve(to: CGPoint(x: 5.36, y: 19.65), controlPoint1: CGPoint(x: 4.47, y: 20.12), controlPoint2: CGPoint(x: 4.91, y: 20.13))
        bezier2Path.addCurve(to: CGPoint(x: 5.33, y: 18.27), controlPoint1: CGPoint(x: 5.81, y: 19.18), controlPoint2: CGPoint(x: 5.8, y: 18.72))
        bezier2Path.addLine(to: CGPoint(x: 3.22, y: 15.99))
        bezier2Path.addLine(to: CGPoint(x: 26.78, y: 15.99))
        bezier2Path.addLine(to: CGPoint(x: 24.67, y: 18.27))
        bezier2Path.addCurve(to: CGPoint(x: 24.64, y: 19.65), controlPoint1: CGPoint(x: 24.2, y: 18.72), controlPoint2: CGPoint(x: 24.19, y: 19.18))
        bezier2Path.addCurve(to: CGPoint(x: 25.96, y: 19.62), controlPoint1: CGPoint(x: 25.09, y: 20.13), controlPoint2: CGPoint(x: 25.53, y: 20.12))
        bezier2Path.addLine(to: CGPoint(x: 29.71, y: 15.68))
        bezier2Path.addCurve(to: CGPoint(x: 29.94, y: 15.37), controlPoint1: CGPoint(x: 29.82, y: 15.6), controlPoint2: CGPoint(x: 29.9, y: 15.49))
        bezier2Path.addCurve(to: CGPoint(x: 30, y: 15), controlPoint1: CGPoint(x: 29.98, y: 15.25), controlPoint2: CGPoint(x: 30, y: 15.12))
        bezier2Path.addCurve(to: CGPoint(x: 29.94, y: 14.63), controlPoint1: CGPoint(x: 30, y: 14.88), controlPoint2: CGPoint(x: 29.98, y: 14.75))
        bezier2Path.close()
        CTAStyleKit.normalColor.setFill()
        bezier2Path.fill()
    }

    open dynamic class func drawAdd() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14, y: 8))
        bezierPath.addLine(to: CGPoint(x: 8, y: 8))
        bezierPath.addLine(to: CGPoint(x: 8, y: 14))
        bezierPath.addLine(to: CGPoint(x: 6, y: 14))
        bezierPath.addLine(to: CGPoint(x: 6, y: 8))
        bezierPath.addLine(to: CGPoint(x: 0, y: 8))
        bezierPath.addLine(to: CGPoint(x: 0, y: 6.06))
        bezierPath.addLine(to: CGPoint(x: 6, y: 6.06))
        bezierPath.addLine(to: CGPoint(x: 6, y: 0))
        bezierPath.addLine(to: CGPoint(x: 8, y: 0))
        bezierPath.addLine(to: CGPoint(x: 8, y: 6.06))
        bezierPath.addLine(to: CGPoint(x: 14, y: 6.06))
        bezierPath.addLine(to: CGPoint(x: 14, y: 8))
        bezierPath.close()
        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawNode() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 5, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 5), controlPoint1: CGPoint(x: 7.76, y: 10), controlPoint2: CGPoint(x: 10, y: 7.76))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 10, y: 2.24), controlPoint2: CGPoint(x: 7.76, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 5), controlPoint1: CGPoint(x: 2.24, y: 0), controlPoint2: CGPoint(x: 0, y: 2.24))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 10), controlPoint1: CGPoint(x: 0, y: 7.76), controlPoint2: CGPoint(x: 2.24, y: 10))
        bezierPath.close()
        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawFontBarItemNormal() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 7, y: 12.65))
        bezierPath.addCurve(to: CGPoint(x: 8.98, y: 12.68), controlPoint1: CGPoint(x: 7.32, y: 12.65), controlPoint2: CGPoint(x: 7.98, y: 12.66))
        bezierPath.addCurve(to: CGPoint(x: 11.3, y: 12.71), controlPoint1: CGPoint(x: 9.98, y: 12.7), controlPoint2: CGPoint(x: 10.75, y: 12.71))
        bezierPath.addCurve(to: CGPoint(x: 12.13, y: 12.68), controlPoint1: CGPoint(x: 11.49, y: 12.71), controlPoint2: CGPoint(x: 11.76, y: 12.7))
        bezierPath.addCurve(to: CGPoint(x: 9.46, y: 6.21), controlPoint1: CGPoint(x: 11.29, y: 10.26), controlPoint2: CGPoint(x: 10.4, y: 8.1))
        bezierPath.addLine(to: CGPoint(x: 7, y: 12.65))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 20.97))
        bezierPath.addCurve(to: CGPoint(x: 2.38, y: 20.34), controlPoint1: CGPoint(x: 0, y: 20.97), controlPoint2: CGPoint(x: 2.13, y: 20.43))
        bezierPath.addCurve(to: CGPoint(x: 3.02, y: 19.92), controlPoint1: CGPoint(x: 2.62, y: 20.25), controlPoint2: CGPoint(x: 2.83, y: 20.11))
        bezierPath.addCurve(to: CGPoint(x: 3.47, y: 19.2), controlPoint1: CGPoint(x: 3.2, y: 19.74), controlPoint2: CGPoint(x: 3.35, y: 19.5))
        bezierPath.addLine(to: CGPoint(x: 10.92, y: 0))
        bezierPath.addLine(to: CGPoint(x: 11.76, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 19.94, y: 19.29), controlPoint1: CGPoint(x: 11.76, y: 0), controlPoint2: CGPoint(x: 19.69, y: 18.79))
        bezierPath.addCurve(to: CGPoint(x: 20.44, y: 20.1), controlPoint1: CGPoint(x: 20.13, y: 19.72), controlPoint2: CGPoint(x: 20.3, y: 19.99))
        bezierPath.addCurve(to: CGPoint(x: 21.71, y: 20.52), controlPoint1: CGPoint(x: 20.63, y: 20.24), controlPoint2: CGPoint(x: 21.05, y: 20.38))
        bezierPath.addCurve(to: CGPoint(x: 23, y: 20.85), controlPoint1: CGPoint(x: 22.38, y: 20.66), controlPoint2: CGPoint(x: 23, y: 20.85))
        bezierPath.addCurve(to: CGPoint(x: 23, y: 22), controlPoint1: CGPoint(x: 23, y: 20.85), controlPoint2: CGPoint(x: 23, y: 21.96))
        bezierPath.addCurve(to: CGPoint(x: 11.82, y: 21.99), controlPoint1: CGPoint(x: 22.39, y: 22), controlPoint2: CGPoint(x: 11.82, y: 21.99))
        bezierPath.addLine(to: CGPoint(x: 11.82, y: 20.97))
        bezierPath.addCurve(to: CGPoint(x: 13.95, y: 20.44), controlPoint1: CGPoint(x: 11.82, y: 20.97), controlPoint2: CGPoint(x: 13.84, y: 20.46))
        bezierPath.addCurve(to: CGPoint(x: 14.18, y: 20.39), controlPoint1: CGPoint(x: 14.07, y: 20.41), controlPoint2: CGPoint(x: 14.14, y: 20.4))
        bezierPath.addCurve(to: CGPoint(x: 14.39, y: 20.32), controlPoint1: CGPoint(x: 14.22, y: 20.38), controlPoint2: CGPoint(x: 14.29, y: 20.36))
        bezierPath.addCurve(to: CGPoint(x: 14.6, y: 20.23), controlPoint1: CGPoint(x: 14.49, y: 20.29), controlPoint2: CGPoint(x: 14.56, y: 20.26))
        bezierPath.addCurve(to: CGPoint(x: 14.76, y: 20.12), controlPoint1: CGPoint(x: 14.65, y: 20.2), controlPoint2: CGPoint(x: 14.7, y: 20.16))
        bezierPath.addCurve(to: CGPoint(x: 14.89, y: 19.96), controlPoint1: CGPoint(x: 14.83, y: 20.07), controlPoint2: CGPoint(x: 14.87, y: 20.02))
        bezierPath.addCurve(to: CGPoint(x: 14.93, y: 19.76), controlPoint1: CGPoint(x: 14.92, y: 19.9), controlPoint2: CGPoint(x: 14.93, y: 19.83))
        bezierPath.addCurve(to: CGPoint(x: 14.48, y: 18.38), controlPoint1: CGPoint(x: 14.93, y: 19.61), controlPoint2: CGPoint(x: 14.78, y: 19.15))
        bezierPath.addCurve(to: CGPoint(x: 13.44, y: 15.85), controlPoint1: CGPoint(x: 14.18, y: 17.61), controlPoint2: CGPoint(x: 13.84, y: 16.77))
        bezierPath.addCurve(to: CGPoint(x: 12.84, y: 14.42), controlPoint1: CGPoint(x: 13.05, y: 14.92), controlPoint2: CGPoint(x: 12.85, y: 14.45))
        bezierPath.addLine(to: CGPoint(x: 6.34, y: 14.39))
        bezierPath.addCurve(to: CGPoint(x: 5.23, y: 17.18), controlPoint1: CGPoint(x: 6.09, y: 14.94), controlPoint2: CGPoint(x: 5.72, y: 15.87))
        bezierPath.addCurve(to: CGPoint(x: 4.5, y: 19.5), controlPoint1: CGPoint(x: 4.75, y: 18.49), controlPoint2: CGPoint(x: 4.5, y: 19.26))
        bezierPath.addCurve(to: CGPoint(x: 4.71, y: 20.04), controlPoint1: CGPoint(x: 4.5, y: 19.71), controlPoint2: CGPoint(x: 4.57, y: 19.89))
        bezierPath.addCurve(to: CGPoint(x: 5.33, y: 20.39), controlPoint1: CGPoint(x: 4.84, y: 20.18), controlPoint2: CGPoint(x: 5.05, y: 20.3))
        bezierPath.addCurve(to: CGPoint(x: 6.04, y: 20.58), controlPoint1: CGPoint(x: 5.62, y: 20.47), controlPoint2: CGPoint(x: 5.85, y: 20.54))
        bezierPath.addCurve(to: CGPoint(x: 6.86, y: 20.7), controlPoint1: CGPoint(x: 6.22, y: 20.62), controlPoint2: CGPoint(x: 6.49, y: 20.66))
        bezierPath.addCurve(to: CGPoint(x: 7.45, y: 20.76), controlPoint1: CGPoint(x: 7.22, y: 20.74), controlPoint2: CGPoint(x: 7.45, y: 20.76))
        bezierPath.addLine(to: CGPoint(x: 7.45, y: 22))
        bezierPath.addLine(to: CGPoint(x: 0, y: 22))
        bezierPath.addLine(to: CGPoint(x: 0, y: 20.97))
        bezierPath.close()
        CTAStyleKit.normalColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawFontBarItemSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 7, y: 12.65))
        bezierPath.addCurve(to: CGPoint(x: 8.98, y: 12.68), controlPoint1: CGPoint(x: 7.32, y: 12.65), controlPoint2: CGPoint(x: 7.98, y: 12.66))
        bezierPath.addCurve(to: CGPoint(x: 11.3, y: 12.71), controlPoint1: CGPoint(x: 9.98, y: 12.7), controlPoint2: CGPoint(x: 10.75, y: 12.71))
        bezierPath.addCurve(to: CGPoint(x: 12.13, y: 12.68), controlPoint1: CGPoint(x: 11.49, y: 12.71), controlPoint2: CGPoint(x: 11.76, y: 12.7))
        bezierPath.addCurve(to: CGPoint(x: 9.46, y: 6.21), controlPoint1: CGPoint(x: 11.29, y: 10.26), controlPoint2: CGPoint(x: 10.4, y: 8.1))
        bezierPath.addLine(to: CGPoint(x: 7, y: 12.65))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 20.97))
        bezierPath.addCurve(to: CGPoint(x: 2.38, y: 20.34), controlPoint1: CGPoint(x: 0, y: 20.97), controlPoint2: CGPoint(x: 2.13, y: 20.43))
        bezierPath.addCurve(to: CGPoint(x: 3.02, y: 19.92), controlPoint1: CGPoint(x: 2.62, y: 20.25), controlPoint2: CGPoint(x: 2.83, y: 20.11))
        bezierPath.addCurve(to: CGPoint(x: 3.47, y: 19.2), controlPoint1: CGPoint(x: 3.2, y: 19.74), controlPoint2: CGPoint(x: 3.35, y: 19.5))
        bezierPath.addLine(to: CGPoint(x: 10.92, y: 0))
        bezierPath.addLine(to: CGPoint(x: 11.76, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 19.94, y: 19.29), controlPoint1: CGPoint(x: 11.76, y: 0), controlPoint2: CGPoint(x: 19.69, y: 18.79))
        bezierPath.addCurve(to: CGPoint(x: 20.44, y: 20.1), controlPoint1: CGPoint(x: 20.13, y: 19.72), controlPoint2: CGPoint(x: 20.3, y: 19.99))
        bezierPath.addCurve(to: CGPoint(x: 21.71, y: 20.52), controlPoint1: CGPoint(x: 20.63, y: 20.24), controlPoint2: CGPoint(x: 21.05, y: 20.38))
        bezierPath.addCurve(to: CGPoint(x: 23, y: 20.85), controlPoint1: CGPoint(x: 22.38, y: 20.66), controlPoint2: CGPoint(x: 23, y: 20.85))
        bezierPath.addCurve(to: CGPoint(x: 23, y: 22), controlPoint1: CGPoint(x: 23, y: 20.85), controlPoint2: CGPoint(x: 23, y: 21.96))
        bezierPath.addCurve(to: CGPoint(x: 11.82, y: 21.99), controlPoint1: CGPoint(x: 22.39, y: 22), controlPoint2: CGPoint(x: 11.82, y: 21.99))
        bezierPath.addLine(to: CGPoint(x: 11.82, y: 20.97))
        bezierPath.addCurve(to: CGPoint(x: 13.95, y: 20.44), controlPoint1: CGPoint(x: 11.82, y: 20.97), controlPoint2: CGPoint(x: 13.84, y: 20.46))
        bezierPath.addCurve(to: CGPoint(x: 14.18, y: 20.39), controlPoint1: CGPoint(x: 14.07, y: 20.41), controlPoint2: CGPoint(x: 14.14, y: 20.4))
        bezierPath.addCurve(to: CGPoint(x: 14.39, y: 20.32), controlPoint1: CGPoint(x: 14.22, y: 20.38), controlPoint2: CGPoint(x: 14.29, y: 20.36))
        bezierPath.addCurve(to: CGPoint(x: 14.6, y: 20.23), controlPoint1: CGPoint(x: 14.49, y: 20.29), controlPoint2: CGPoint(x: 14.56, y: 20.26))
        bezierPath.addCurve(to: CGPoint(x: 14.76, y: 20.12), controlPoint1: CGPoint(x: 14.65, y: 20.2), controlPoint2: CGPoint(x: 14.7, y: 20.16))
        bezierPath.addCurve(to: CGPoint(x: 14.89, y: 19.96), controlPoint1: CGPoint(x: 14.83, y: 20.07), controlPoint2: CGPoint(x: 14.87, y: 20.02))
        bezierPath.addCurve(to: CGPoint(x: 14.93, y: 19.76), controlPoint1: CGPoint(x: 14.92, y: 19.9), controlPoint2: CGPoint(x: 14.93, y: 19.83))
        bezierPath.addCurve(to: CGPoint(x: 14.48, y: 18.38), controlPoint1: CGPoint(x: 14.93, y: 19.61), controlPoint2: CGPoint(x: 14.78, y: 19.15))
        bezierPath.addCurve(to: CGPoint(x: 13.44, y: 15.85), controlPoint1: CGPoint(x: 14.18, y: 17.61), controlPoint2: CGPoint(x: 13.84, y: 16.77))
        bezierPath.addCurve(to: CGPoint(x: 12.84, y: 14.42), controlPoint1: CGPoint(x: 13.05, y: 14.92), controlPoint2: CGPoint(x: 12.85, y: 14.45))
        bezierPath.addLine(to: CGPoint(x: 6.34, y: 14.39))
        bezierPath.addCurve(to: CGPoint(x: 5.23, y: 17.18), controlPoint1: CGPoint(x: 6.09, y: 14.94), controlPoint2: CGPoint(x: 5.72, y: 15.87))
        bezierPath.addCurve(to: CGPoint(x: 4.5, y: 19.5), controlPoint1: CGPoint(x: 4.75, y: 18.49), controlPoint2: CGPoint(x: 4.5, y: 19.26))
        bezierPath.addCurve(to: CGPoint(x: 4.71, y: 20.04), controlPoint1: CGPoint(x: 4.5, y: 19.71), controlPoint2: CGPoint(x: 4.57, y: 19.89))
        bezierPath.addCurve(to: CGPoint(x: 5.33, y: 20.39), controlPoint1: CGPoint(x: 4.84, y: 20.18), controlPoint2: CGPoint(x: 5.05, y: 20.3))
        bezierPath.addCurve(to: CGPoint(x: 6.04, y: 20.58), controlPoint1: CGPoint(x: 5.62, y: 20.47), controlPoint2: CGPoint(x: 5.85, y: 20.54))
        bezierPath.addCurve(to: CGPoint(x: 6.86, y: 20.7), controlPoint1: CGPoint(x: 6.22, y: 20.62), controlPoint2: CGPoint(x: 6.49, y: 20.66))
        bezierPath.addCurve(to: CGPoint(x: 7.45, y: 20.76), controlPoint1: CGPoint(x: 7.22, y: 20.74), controlPoint2: CGPoint(x: 7.45, y: 20.76))
        bezierPath.addLine(to: CGPoint(x: 7.45, y: 22))
        bezierPath.addLine(to: CGPoint(x: 0, y: 22))
        bezierPath.addLine(to: CGPoint(x: 0, y: 20.97))
        bezierPath.close()
        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawSizeBarItemNormal() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 9))
        bezierPath.addLine(to: CGPoint(x: 0, y: 7))
        bezierPath.addLine(to: CGPoint(x: 13, y: 7))
        bezierPath.addLine(to: CGPoint(x: 13, y: 9))
        bezierPath.addLine(to: CGPoint(x: 8, y: 9))
        bezierPath.addLine(to: CGPoint(x: 8, y: 22))
        bezierPath.addLine(to: CGPoint(x: 5, y: 22))
        bezierPath.addLine(to: CGPoint(x: 5, y: 9))
        bezierPath.addLine(to: CGPoint(x: 0, y: 9))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9, y: 0))
        bezierPath.addLine(to: CGPoint(x: 28, y: 0))
        bezierPath.addLine(to: CGPoint(x: 28, y: 2))
        bezierPath.addLine(to: CGPoint(x: 20, y: 2))
        bezierPath.addLine(to: CGPoint(x: 20, y: 22))
        bezierPath.addLine(to: CGPoint(x: 17, y: 22))
        bezierPath.addLine(to: CGPoint(x: 17, y: 2))
        bezierPath.addLine(to: CGPoint(x: 9, y: 2))
        bezierPath.addLine(to: CGPoint(x: 9, y: 0))
        bezierPath.close()
        CTAStyleKit.normalColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawSizeBarItemSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 9))
        bezierPath.addLine(to: CGPoint(x: 0, y: 7))
        bezierPath.addLine(to: CGPoint(x: 13, y: 7))
        bezierPath.addLine(to: CGPoint(x: 13, y: 9))
        bezierPath.addLine(to: CGPoint(x: 8, y: 9))
        bezierPath.addLine(to: CGPoint(x: 8, y: 22))
        bezierPath.addLine(to: CGPoint(x: 5, y: 22))
        bezierPath.addLine(to: CGPoint(x: 5, y: 9))
        bezierPath.addLine(to: CGPoint(x: 0, y: 9))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9, y: 0))
        bezierPath.addLine(to: CGPoint(x: 28, y: 0))
        bezierPath.addLine(to: CGPoint(x: 28, y: 2))
        bezierPath.addLine(to: CGPoint(x: 20, y: 2))
        bezierPath.addLine(to: CGPoint(x: 20, y: 22))
        bezierPath.addLine(to: CGPoint(x: 17, y: 22))
        bezierPath.addLine(to: CGPoint(x: 17, y: 2))
        bezierPath.addLine(to: CGPoint(x: 9, y: 2))
        bezierPath.addLine(to: CGPoint(x: 9, y: 0))
        bezierPath.close()
        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawColorBarItemSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 26.26, y: 2.85))
        bezierPath.addLine(to: CGPoint(x: 23.77, y: 1.56))
        bezierPath.addCurve(to: CGPoint(x: 22.73, y: 1.47), controlPoint1: CGPoint(x: 23.44, y: 1.38), controlPoint2: CGPoint(x: 23.1, y: 1.35))
        bezierPath.addCurve(to: CGPoint(x: 21.93, y: 2.17), controlPoint1: CGPoint(x: 22.36, y: 1.59), controlPoint2: CGPoint(x: 22.09, y: 1.82))
        bezierPath.addLine(to: CGPoint(x: 13.04, y: 19.67))
        bezierPath.addCurve(to: CGPoint(x: 12.97, y: 20.74), controlPoint1: CGPoint(x: 12.88, y: 20.02), controlPoint2: CGPoint(x: 12.85, y: 20.38))
        bezierPath.addCurve(to: CGPoint(x: 13.66, y: 21.57), controlPoint1: CGPoint(x: 13.09, y: 21.11), controlPoint2: CGPoint(x: 13.32, y: 21.38))
        bezierPath.addLine(to: CGPoint(x: 16.13, y: 22.86))
        bezierPath.addCurve(to: CGPoint(x: 17.17, y: 22.93), controlPoint1: CGPoint(x: 16.45, y: 23.02), controlPoint2: CGPoint(x: 16.8, y: 23.04))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 22.23), controlPoint1: CGPoint(x: 17.54, y: 22.81), controlPoint2: CGPoint(x: 17.82, y: 22.57))
        bezierPath.addLine(to: CGPoint(x: 26.86, y: 4.75))
        bezierPath.addCurve(to: CGPoint(x: 26.93, y: 3.66), controlPoint1: CGPoint(x: 27.02, y: 4.4), controlPoint2: CGPoint(x: 27.04, y: 4.04))
        bezierPath.addCurve(to: CGPoint(x: 26.26, y: 2.85), controlPoint1: CGPoint(x: 26.81, y: 3.29), controlPoint2: CGPoint(x: 26.59, y: 3.02))
        bezierPath.addLine(to: CGPoint(x: 26.26, y: 2.85))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17.38, y: 20.33))
        bezierPath.addCurve(to: CGPoint(x: 16.58, y: 21.03), controlPoint1: CGPoint(x: 17.21, y: 20.68), controlPoint2: CGPoint(x: 16.95, y: 20.91))
        bezierPath.addCurve(to: CGPoint(x: 15.51, y: 20.96), controlPoint1: CGPoint(x: 16.21, y: 21.15), controlPoint2: CGPoint(x: 15.85, y: 21.13))
        bezierPath.addCurve(to: CGPoint(x: 14.84, y: 20.14), controlPoint1: CGPoint(x: 15.18, y: 20.78), controlPoint2: CGPoint(x: 14.96, y: 20.51))
        bezierPath.addCurve(to: CGPoint(x: 14.91, y: 19.07), controlPoint1: CGPoint(x: 14.72, y: 19.77), controlPoint2: CGPoint(x: 14.75, y: 19.42))
        bezierPath.addCurve(to: CGPoint(x: 15.72, y: 18.37), controlPoint1: CGPoint(x: 15.09, y: 18.72), controlPoint2: CGPoint(x: 15.36, y: 18.49))
        bezierPath.addCurve(to: CGPoint(x: 16.78, y: 18.47), controlPoint1: CGPoint(x: 16.08, y: 18.25), controlPoint2: CGPoint(x: 16.44, y: 18.28))
        bezierPath.addCurve(to: CGPoint(x: 17.47, y: 19.28), controlPoint1: CGPoint(x: 17.12, y: 18.63), controlPoint2: CGPoint(x: 17.35, y: 18.9))
        bezierPath.addCurve(to: CGPoint(x: 17.38, y: 20.33), controlPoint1: CGPoint(x: 17.59, y: 19.65), controlPoint2: CGPoint(x: 17.56, y: 20))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 19.35, y: 1.51))
        bezierPath.addCurve(to: CGPoint(x: 18.96, y: 0.51), controlPoint1: CGPoint(x: 19.35, y: 1.12), controlPoint2: CGPoint(x: 19.22, y: 0.79))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 0.08), controlPoint1: CGPoint(x: 18.7, y: 0.22), controlPoint2: CGPoint(x: 18.38, y: 0.08))
        bezierPath.addLine(to: CGPoint(x: 15.21, y: -0))
        bezierPath.addCurve(to: CGPoint(x: 14.22, y: 0.4), controlPoint1: CGPoint(x: 14.83, y: -0), controlPoint2: CGPoint(x: 14.5, y: 0.13))
        bezierPath.addCurve(to: CGPoint(x: 13.8, y: 1.37), controlPoint1: CGPoint(x: 13.94, y: 0.66), controlPoint2: CGPoint(x: 13.8, y: 0.99))
        bezierPath.addLine(to: CGPoint(x: 13.47, y: 15.78))
        bezierPath.addLine(to: CGPoint(x: 19.27, y: 4.31))
        bezierPath.addLine(to: CGPoint(x: 19.35, y: 1.51))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9.36, y: 1.23))
        bezierPath.addLine(to: CGPoint(x: 6.84, y: 2.39))
        bezierPath.addCurve(to: CGPoint(x: 6.12, y: 3.18), controlPoint1: CGPoint(x: 6.49, y: 2.55), controlPoint2: CGPoint(x: 6.25, y: 2.82))
        bezierPath.addCurve(to: CGPoint(x: 6.16, y: 4.25), controlPoint1: CGPoint(x: 5.98, y: 3.55), controlPoint2: CGPoint(x: 6, y: 3.91))
        bezierPath.addLine(to: CGPoint(x: 12.04, y: 17.34))
        bezierPath.addLine(to: CGPoint(x: 12.34, y: 4.45))
        bezierPath.addLine(to: CGPoint(x: 11.2, y: 1.92))
        bezierPath.addCurve(to: CGPoint(x: 10.41, y: 1.19), controlPoint1: CGPoint(x: 11.03, y: 1.57), controlPoint2: CGPoint(x: 10.77, y: 1.33))
        bezierPath.addCurve(to: CGPoint(x: 9.36, y: 1.23), controlPoint1: CGPoint(x: 10.05, y: 1.06), controlPoint2: CGPoint(x: 9.7, y: 1.07))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 4.04, y: 5.87))
        bezierPath.addCurve(to: CGPoint(x: 3.03, y: 5.57), controlPoint1: CGPoint(x: 3.76, y: 5.63), controlPoint2: CGPoint(x: 3.42, y: 5.53))
        bezierPath.addCurve(to: CGPoint(x: 2.09, y: 6.06), controlPoint1: CGPoint(x: 2.64, y: 5.61), controlPoint2: CGPoint(x: 2.33, y: 5.77))
        bezierPath.addLine(to: CGPoint(x: 0.31, y: 8.23))
        bezierPath.addCurve(to: CGPoint(x: 0.01, y: 9.25), controlPoint1: CGPoint(x: 0.07, y: 8.52), controlPoint2: CGPoint(x: -0.03, y: 8.86))
        bezierPath.addCurve(to: CGPoint(x: 0.49, y: 10.21), controlPoint1: CGPoint(x: 0.04, y: 9.63), controlPoint2: CGPoint(x: 0.21, y: 9.95))
        bezierPath.addLine(to: CGPoint(x: 11.44, y: 19.4))
        bezierPath.addLine(to: CGPoint(x: 6.16, y: 7.66))
        bezierPath.addLine(to: CGPoint(x: 4.04, y: 5.87))
        bezierPath.close()
        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawColorBarItemNormal() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 26.26, y: 2.85))
        bezierPath.addLine(to: CGPoint(x: 23.77, y: 1.56))
        bezierPath.addCurve(to: CGPoint(x: 22.73, y: 1.47), controlPoint1: CGPoint(x: 23.44, y: 1.38), controlPoint2: CGPoint(x: 23.1, y: 1.35))
        bezierPath.addCurve(to: CGPoint(x: 21.93, y: 2.17), controlPoint1: CGPoint(x: 22.36, y: 1.59), controlPoint2: CGPoint(x: 22.09, y: 1.82))
        bezierPath.addLine(to: CGPoint(x: 13.04, y: 19.67))
        bezierPath.addCurve(to: CGPoint(x: 12.97, y: 20.74), controlPoint1: CGPoint(x: 12.88, y: 20.02), controlPoint2: CGPoint(x: 12.85, y: 20.38))
        bezierPath.addCurve(to: CGPoint(x: 13.66, y: 21.57), controlPoint1: CGPoint(x: 13.09, y: 21.11), controlPoint2: CGPoint(x: 13.32, y: 21.38))
        bezierPath.addLine(to: CGPoint(x: 16.13, y: 22.86))
        bezierPath.addCurve(to: CGPoint(x: 17.17, y: 22.93), controlPoint1: CGPoint(x: 16.45, y: 23.02), controlPoint2: CGPoint(x: 16.8, y: 23.04))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 22.23), controlPoint1: CGPoint(x: 17.54, y: 22.81), controlPoint2: CGPoint(x: 17.82, y: 22.57))
        bezierPath.addLine(to: CGPoint(x: 26.86, y: 4.75))
        bezierPath.addCurve(to: CGPoint(x: 26.93, y: 3.66), controlPoint1: CGPoint(x: 27.02, y: 4.4), controlPoint2: CGPoint(x: 27.04, y: 4.04))
        bezierPath.addCurve(to: CGPoint(x: 26.26, y: 2.85), controlPoint1: CGPoint(x: 26.81, y: 3.29), controlPoint2: CGPoint(x: 26.59, y: 3.02))
        bezierPath.addLine(to: CGPoint(x: 26.26, y: 2.85))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17.38, y: 20.33))
        bezierPath.addCurve(to: CGPoint(x: 16.58, y: 21.03), controlPoint1: CGPoint(x: 17.21, y: 20.68), controlPoint2: CGPoint(x: 16.95, y: 20.91))
        bezierPath.addCurve(to: CGPoint(x: 15.51, y: 20.96), controlPoint1: CGPoint(x: 16.21, y: 21.15), controlPoint2: CGPoint(x: 15.85, y: 21.13))
        bezierPath.addCurve(to: CGPoint(x: 14.84, y: 20.14), controlPoint1: CGPoint(x: 15.18, y: 20.78), controlPoint2: CGPoint(x: 14.96, y: 20.51))
        bezierPath.addCurve(to: CGPoint(x: 14.91, y: 19.07), controlPoint1: CGPoint(x: 14.72, y: 19.77), controlPoint2: CGPoint(x: 14.75, y: 19.42))
        bezierPath.addCurve(to: CGPoint(x: 15.72, y: 18.37), controlPoint1: CGPoint(x: 15.09, y: 18.72), controlPoint2: CGPoint(x: 15.36, y: 18.49))
        bezierPath.addCurve(to: CGPoint(x: 16.78, y: 18.47), controlPoint1: CGPoint(x: 16.08, y: 18.25), controlPoint2: CGPoint(x: 16.44, y: 18.28))
        bezierPath.addCurve(to: CGPoint(x: 17.47, y: 19.28), controlPoint1: CGPoint(x: 17.12, y: 18.63), controlPoint2: CGPoint(x: 17.35, y: 18.9))
        bezierPath.addCurve(to: CGPoint(x: 17.38, y: 20.33), controlPoint1: CGPoint(x: 17.59, y: 19.65), controlPoint2: CGPoint(x: 17.56, y: 20))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 19.35, y: 1.51))
        bezierPath.addCurve(to: CGPoint(x: 18.96, y: 0.51), controlPoint1: CGPoint(x: 19.35, y: 1.12), controlPoint2: CGPoint(x: 19.22, y: 0.79))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 0.08), controlPoint1: CGPoint(x: 18.7, y: 0.22), controlPoint2: CGPoint(x: 18.38, y: 0.08))
        bezierPath.addLine(to: CGPoint(x: 15.21, y: -0))
        bezierPath.addCurve(to: CGPoint(x: 14.22, y: 0.4), controlPoint1: CGPoint(x: 14.83, y: -0), controlPoint2: CGPoint(x: 14.5, y: 0.13))
        bezierPath.addCurve(to: CGPoint(x: 13.8, y: 1.37), controlPoint1: CGPoint(x: 13.94, y: 0.66), controlPoint2: CGPoint(x: 13.8, y: 0.99))
        bezierPath.addLine(to: CGPoint(x: 13.47, y: 15.78))
        bezierPath.addLine(to: CGPoint(x: 19.27, y: 4.31))
        bezierPath.addLine(to: CGPoint(x: 19.35, y: 1.51))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9.36, y: 1.23))
        bezierPath.addLine(to: CGPoint(x: 6.84, y: 2.39))
        bezierPath.addCurve(to: CGPoint(x: 6.12, y: 3.18), controlPoint1: CGPoint(x: 6.49, y: 2.55), controlPoint2: CGPoint(x: 6.25, y: 2.82))
        bezierPath.addCurve(to: CGPoint(x: 6.16, y: 4.25), controlPoint1: CGPoint(x: 5.98, y: 3.55), controlPoint2: CGPoint(x: 6, y: 3.91))
        bezierPath.addLine(to: CGPoint(x: 12.04, y: 17.34))
        bezierPath.addLine(to: CGPoint(x: 12.34, y: 4.45))
        bezierPath.addLine(to: CGPoint(x: 11.2, y: 1.92))
        bezierPath.addCurve(to: CGPoint(x: 10.41, y: 1.19), controlPoint1: CGPoint(x: 11.03, y: 1.57), controlPoint2: CGPoint(x: 10.77, y: 1.33))
        bezierPath.addCurve(to: CGPoint(x: 9.36, y: 1.23), controlPoint1: CGPoint(x: 10.05, y: 1.06), controlPoint2: CGPoint(x: 9.7, y: 1.07))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 4.04, y: 5.87))
        bezierPath.addCurve(to: CGPoint(x: 3.03, y: 5.57), controlPoint1: CGPoint(x: 3.76, y: 5.63), controlPoint2: CGPoint(x: 3.42, y: 5.53))
        bezierPath.addCurve(to: CGPoint(x: 2.09, y: 6.06), controlPoint1: CGPoint(x: 2.64, y: 5.61), controlPoint2: CGPoint(x: 2.33, y: 5.77))
        bezierPath.addLine(to: CGPoint(x: 0.31, y: 8.23))
        bezierPath.addCurve(to: CGPoint(x: 0.01, y: 9.25), controlPoint1: CGPoint(x: 0.07, y: 8.52), controlPoint2: CGPoint(x: -0.03, y: 8.86))
        bezierPath.addCurve(to: CGPoint(x: 0.49, y: 10.21), controlPoint1: CGPoint(x: 0.04, y: 9.63), controlPoint2: CGPoint(x: 0.21, y: 9.95))
        bezierPath.addLine(to: CGPoint(x: 11.44, y: 19.4))
        bezierPath.addLine(to: CGPoint(x: 6.16, y: 7.66))
        bezierPath.addLine(to: CGPoint(x: 4.04, y: 5.87))
        bezierPath.close()
        CTAStyleKit.normalColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawRotationBarItemSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 21.02, y: 6.68))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 13.85), controlPoint1: CGPoint(x: 23.01, y: 8.65), controlPoint2: CGPoint(x: 24, y: 11.05))
        bezierPath.addCurve(to: CGPoint(x: 21.02, y: 21.03), controlPoint1: CGPoint(x: 24, y: 16.66), controlPoint2: CGPoint(x: 23.01, y: 19.06))
        bezierPath.addCurve(to: CGPoint(x: 13.78, y: 24), controlPoint1: CGPoint(x: 19.07, y: 23.01), controlPoint2: CGPoint(x: 16.66, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 8.89, y: 22.73), controlPoint1: CGPoint(x: 12.04, y: 24), controlPoint2: CGPoint(x: 10.41, y: 23.58))
        bezierPath.addLine(to: CGPoint(x: 10.59, y: 21.09))
        bezierPath.addCurve(to: CGPoint(x: 13.78, y: 21.77), controlPoint1: CGPoint(x: 11.55, y: 21.55), controlPoint2: CGPoint(x: 12.61, y: 21.77))
        bezierPath.addCurve(to: CGPoint(x: 19.42, y: 19.44), controlPoint1: CGPoint(x: 15.98, y: 21.77), controlPoint2: CGPoint(x: 17.86, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 21.71, y: 13.88), controlPoint1: CGPoint(x: 20.95, y: 17.92), controlPoint2: CGPoint(x: 21.71, y: 16.07))
        bezierPath.addCurve(to: CGPoint(x: 19.42, y: 8.26), controlPoint1: CGPoint(x: 21.71, y: 11.69), controlPoint2: CGPoint(x: 20.95, y: 9.82))
        bezierPath.addCurve(to: CGPoint(x: 13.78, y: 5.93), controlPoint1: CGPoint(x: 17.86, y: 6.71), controlPoint2: CGPoint(x: 15.98, y: 5.93))
        bezierPath.addLine(to: CGPoint(x: 13.78, y: 9.59))
        bezierPath.addLine(to: CGPoint(x: 8.99, y: 4.82))
        bezierPath.addLine(to: CGPoint(x: 13.78, y: 0))
        bezierPath.addLine(to: CGPoint(x: 13.78, y: 3.66))
        bezierPath.addCurve(to: CGPoint(x: 21.02, y: 6.68), controlPoint1: CGPoint(x: 16.66, y: 3.66), controlPoint2: CGPoint(x: 19.07, y: 4.66))
        bezierPath.addLine(to: CGPoint(x: 21.02, y: 6.68))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 3.25, y: 13.72))
        bezierPath.addLine(to: CGPoint(x: 7.4, y: 17.85))
        bezierPath.addLine(to: CGPoint(x: 11.55, y: 13.72))
        bezierPath.addLine(to: CGPoint(x: 7.4, y: 9.59))
        bezierPath.addLine(to: CGPoint(x: 3.25, y: 13.72))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.4, y: 6.41))
        bezierPath.addLine(to: CGPoint(x: 14.74, y: 13.72))
        bezierPath.addLine(to: CGPoint(x: 7.4, y: 21.03))
        bezierPath.addLine(to: CGPoint(x: 0, y: 13.72))
        bezierPath.addLine(to: CGPoint(x: 7.4, y: 6.41))
        bezierPath.close()
        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawRotationBarItemNormal() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 21.02, y: 6.68))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 13.85), controlPoint1: CGPoint(x: 23.01, y: 8.65), controlPoint2: CGPoint(x: 24, y: 11.05))
        bezierPath.addCurve(to: CGPoint(x: 21.02, y: 21.03), controlPoint1: CGPoint(x: 24, y: 16.66), controlPoint2: CGPoint(x: 23.01, y: 19.06))
        bezierPath.addCurve(to: CGPoint(x: 13.78, y: 24), controlPoint1: CGPoint(x: 19.07, y: 23.01), controlPoint2: CGPoint(x: 16.66, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 8.89, y: 22.73), controlPoint1: CGPoint(x: 12.04, y: 24), controlPoint2: CGPoint(x: 10.41, y: 23.58))
        bezierPath.addLine(to: CGPoint(x: 10.59, y: 21.09))
        bezierPath.addCurve(to: CGPoint(x: 13.78, y: 21.77), controlPoint1: CGPoint(x: 11.55, y: 21.55), controlPoint2: CGPoint(x: 12.61, y: 21.77))
        bezierPath.addCurve(to: CGPoint(x: 19.42, y: 19.44), controlPoint1: CGPoint(x: 15.98, y: 21.77), controlPoint2: CGPoint(x: 17.86, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 21.71, y: 13.88), controlPoint1: CGPoint(x: 20.95, y: 17.92), controlPoint2: CGPoint(x: 21.71, y: 16.07))
        bezierPath.addCurve(to: CGPoint(x: 19.42, y: 8.26), controlPoint1: CGPoint(x: 21.71, y: 11.69), controlPoint2: CGPoint(x: 20.95, y: 9.82))
        bezierPath.addCurve(to: CGPoint(x: 13.78, y: 5.93), controlPoint1: CGPoint(x: 17.86, y: 6.71), controlPoint2: CGPoint(x: 15.98, y: 5.93))
        bezierPath.addLine(to: CGPoint(x: 13.78, y: 9.59))
        bezierPath.addLine(to: CGPoint(x: 8.99, y: 4.82))
        bezierPath.addLine(to: CGPoint(x: 13.78, y: 0))
        bezierPath.addLine(to: CGPoint(x: 13.78, y: 3.66))
        bezierPath.addCurve(to: CGPoint(x: 21.02, y: 6.68), controlPoint1: CGPoint(x: 16.66, y: 3.66), controlPoint2: CGPoint(x: 19.07, y: 4.66))
        bezierPath.addLine(to: CGPoint(x: 21.02, y: 6.68))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 3.25, y: 13.72))
        bezierPath.addLine(to: CGPoint(x: 7.4, y: 17.85))
        bezierPath.addLine(to: CGPoint(x: 11.55, y: 13.72))
        bezierPath.addLine(to: CGPoint(x: 7.4, y: 9.59))
        bezierPath.addLine(to: CGPoint(x: 3.25, y: 13.72))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.4, y: 6.41))
        bezierPath.addLine(to: CGPoint(x: 14.74, y: 13.72))
        bezierPath.addLine(to: CGPoint(x: 7.4, y: 21.03))
        bezierPath.addLine(to: CGPoint(x: 0, y: 13.72))
        bezierPath.addLine(to: CGPoint(x: 7.4, y: 6.41))
        bezierPath.close()
        CTAStyleKit.normalColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawAlignmentBarItemNormal() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 19, y: 0))
        bezierPath.addLine(to: CGPoint(x: 19, y: 2))
        bezierPath.addLine(to: CGPoint(x: 0, y: 2))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 3, y: 6))
        bezierPath.addLine(to: CGPoint(x: 16, y: 6))
        bezierPath.addLine(to: CGPoint(x: 16, y: 8))
        bezierPath.addLine(to: CGPoint(x: 3, y: 8))
        bezierPath.addLine(to: CGPoint(x: 3, y: 6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 12))
        bezierPath.addLine(to: CGPoint(x: 19, y: 12))
        bezierPath.addLine(to: CGPoint(x: 19, y: 14))
        bezierPath.addLine(to: CGPoint(x: 0, y: 14))
        bezierPath.addLine(to: CGPoint(x: 0, y: 12))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 4, y: 18))
        bezierPath.addLine(to: CGPoint(x: 16, y: 18))
        bezierPath.addLine(to: CGPoint(x: 16, y: 20))
        bezierPath.addLine(to: CGPoint(x: 4, y: 20))
        bezierPath.addLine(to: CGPoint(x: 4, y: 18))
        bezierPath.close()
        CTAStyleKit.normalColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawAlignmentBarItemSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 19, y: 0))
        bezierPath.addLine(to: CGPoint(x: 19, y: 2))
        bezierPath.addLine(to: CGPoint(x: 0, y: 2))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 3, y: 6))
        bezierPath.addLine(to: CGPoint(x: 16, y: 6))
        bezierPath.addLine(to: CGPoint(x: 16, y: 8))
        bezierPath.addLine(to: CGPoint(x: 3, y: 8))
        bezierPath.addLine(to: CGPoint(x: 3, y: 6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 12))
        bezierPath.addLine(to: CGPoint(x: 19, y: 12))
        bezierPath.addLine(to: CGPoint(x: 19, y: 14))
        bezierPath.addLine(to: CGPoint(x: 0, y: 14))
        bezierPath.addLine(to: CGPoint(x: 0, y: 12))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 4, y: 18))
        bezierPath.addLine(to: CGPoint(x: 16, y: 18))
        bezierPath.addLine(to: CGPoint(x: 16, y: 20))
        bezierPath.addLine(to: CGPoint(x: 4, y: 20))
        bezierPath.addLine(to: CGPoint(x: 4, y: 18))
        bezierPath.close()
        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawSpacingBarItemNormal() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 21.2, y: 4.53))
        clipPath.addLine(to: CGPoint(x: 3.8, y: 4.53))
        clipPath.addLine(to: CGPoint(x: 6.94, y: 1.39))
        clipPath.addLine(to: CGPoint(x: 5.54, y: -0.01))
        clipPath.addLine(to: CGPoint(x: 1.42, y: 4.11))
        clipPath.addLine(to: CGPoint(x: 1.39, y: 4.08))
        clipPath.addLine(to: CGPoint(x: 0.01, y: 5.46))
        clipPath.addLine(to: CGPoint(x: 5.6, y: 11.04))
        clipPath.addLine(to: CGPoint(x: 6.97, y: 9.67))
        clipPath.addLine(to: CGPoint(x: 3.78, y: 6.47))
        clipPath.addLine(to: CGPoint(x: 21.22, y: 6.47))
        clipPath.addLine(to: CGPoint(x: 18.03, y: 9.67))
        clipPath.addLine(to: CGPoint(x: 19.4, y: 11.04))
        clipPath.addLine(to: CGPoint(x: 24.99, y: 5.46))
        clipPath.addLine(to: CGPoint(x: 23.61, y: 4.08))
        clipPath.addLine(to: CGPoint(x: 23.58, y: 4.11))
        clipPath.addLine(to: CGPoint(x: 19.46, y: -0.01))
        clipPath.addLine(to: CGPoint(x: 18.06, y: 1.39))
        clipPath.addLine(to: CGPoint(x: 21.2, y: 4.53))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: -0, width: 25, height: 11))
        CTAStyleKit.normalColor.setFill()
        rectanglePath.fill()


        context.endTransparencyLayer()
        context.restoreGState()
    }

    open dynamic class func drawSpacingBarItemSelected() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 21.2, y: 4.53))
        clipPath.addLine(to: CGPoint(x: 3.8, y: 4.53))
        clipPath.addLine(to: CGPoint(x: 6.94, y: 1.39))
        clipPath.addLine(to: CGPoint(x: 5.54, y: -0.01))
        clipPath.addLine(to: CGPoint(x: 1.42, y: 4.11))
        clipPath.addLine(to: CGPoint(x: 1.39, y: 4.08))
        clipPath.addLine(to: CGPoint(x: 0.01, y: 5.46))
        clipPath.addLine(to: CGPoint(x: 5.6, y: 11.04))
        clipPath.addLine(to: CGPoint(x: 6.97, y: 9.67))
        clipPath.addLine(to: CGPoint(x: 3.78, y: 6.47))
        clipPath.addLine(to: CGPoint(x: 21.22, y: 6.47))
        clipPath.addLine(to: CGPoint(x: 18.03, y: 9.67))
        clipPath.addLine(to: CGPoint(x: 19.4, y: 11.04))
        clipPath.addLine(to: CGPoint(x: 24.99, y: 5.46))
        clipPath.addLine(to: CGPoint(x: 23.61, y: 4.08))
        clipPath.addLine(to: CGPoint(x: 23.58, y: 4.11))
        clipPath.addLine(to: CGPoint(x: 19.46, y: -0.01))
        clipPath.addLine(to: CGPoint(x: 18.06, y: 1.39))
        clipPath.addLine(to: CGPoint(x: 21.2, y: 4.53))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: -0, width: 25, height: 11))
        CTAStyleKit.selectedColor.setFill()
        rectanglePath.fill()


        context.endTransparencyLayer()
        context.restoreGState()
    }

    open dynamic class func drawAnimationBarItemNormal() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 7.94, y: 5.5))
        clipPath.addLine(to: CGPoint(x: 22.45, y: 20.07))
        clipPath.addLine(to: CGPoint(x: 20.53, y: 22))
        clipPath.addLine(to: CGPoint(x: 6.01, y: 7.43))
        clipPath.addLine(to: CGPoint(x: 7.94, y: 5.5))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 7.03, y: 3.63))
        clipPath.addLine(to: CGPoint(x: 7.03, y: 0))
        clipPath.addLine(to: CGPoint(x: 8.85, y: 0))
        clipPath.addLine(to: CGPoint(x: 8.85, y: 3.63))
        clipPath.addLine(to: CGPoint(x: 7.03, y: 3.63))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 7.03, y: 15.2))
        clipPath.addLine(to: CGPoint(x: 7.03, y: 11.57))
        clipPath.addLine(to: CGPoint(x: 8.85, y: 11.57))
        clipPath.addLine(to: CGPoint(x: 8.85, y: 15.2))
        clipPath.addLine(to: CGPoint(x: 7.03, y: 15.2))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 12.25, y: 8.39))
        clipPath.addLine(to: CGPoint(x: 12.25, y: 6.58))
        clipPath.addLine(to: CGPoint(x: 15.88, y: 6.58))
        clipPath.addLine(to: CGPoint(x: 15.88, y: 8.39))
        clipPath.addLine(to: CGPoint(x: 12.25, y: 8.39))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 13.95, y: 2.84))
        clipPath.addLine(to: CGPoint(x: 11.4, y: 5.39))
        clipPath.addLine(to: CGPoint(x: 10.09, y: 4.14))
        clipPath.addLine(to: CGPoint(x: 12.64, y: 1.53))
        clipPath.addLine(to: CGPoint(x: 13.95, y: 2.84))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 1.93, y: 2.84))
        clipPath.addLine(to: CGPoint(x: 3.23, y: 1.53))
        clipPath.addLine(to: CGPoint(x: 5.78, y: 4.14))
        clipPath.addLine(to: CGPoint(x: 4.48, y: 5.39))
        clipPath.addLine(to: CGPoint(x: 1.93, y: 2.84))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 1.93, y: 12.3))
        clipPath.addLine(to: CGPoint(x: 4.48, y: 9.75))
        clipPath.addLine(to: CGPoint(x: 5.78, y: 11))
        clipPath.addLine(to: CGPoint(x: 3.23, y: 13.61))
        clipPath.addLine(to: CGPoint(x: 1.93, y: 12.3))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 0, y: 8.39))
        clipPath.addLine(to: CGPoint(x: 0, y: 6.58))
        clipPath.addLine(to: CGPoint(x: 3.63, y: 6.58))
        clipPath.addLine(to: CGPoint(x: 3.63, y: 8.39))
        clipPath.addLine(to: CGPoint(x: 0, y: 8.39))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -0, y: 0, width: 22, height: 22))
        CTAStyleKit.normalColor.setFill()
        rectanglePath.fill()


        context.endTransparencyLayer()
        context.restoreGState()
    }

    open dynamic class func drawAnimationBarItemSelected() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 7.94, y: 5.5))
        clipPath.addLine(to: CGPoint(x: 22.45, y: 20.07))
        clipPath.addLine(to: CGPoint(x: 20.53, y: 22))
        clipPath.addLine(to: CGPoint(x: 6.01, y: 7.43))
        clipPath.addLine(to: CGPoint(x: 7.94, y: 5.5))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 7.03, y: 3.63))
        clipPath.addLine(to: CGPoint(x: 7.03, y: 0))
        clipPath.addLine(to: CGPoint(x: 8.85, y: 0))
        clipPath.addLine(to: CGPoint(x: 8.85, y: 3.63))
        clipPath.addLine(to: CGPoint(x: 7.03, y: 3.63))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 7.03, y: 15.2))
        clipPath.addLine(to: CGPoint(x: 7.03, y: 11.57))
        clipPath.addLine(to: CGPoint(x: 8.85, y: 11.57))
        clipPath.addLine(to: CGPoint(x: 8.85, y: 15.2))
        clipPath.addLine(to: CGPoint(x: 7.03, y: 15.2))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 12.25, y: 8.39))
        clipPath.addLine(to: CGPoint(x: 12.25, y: 6.58))
        clipPath.addLine(to: CGPoint(x: 15.88, y: 6.58))
        clipPath.addLine(to: CGPoint(x: 15.88, y: 8.39))
        clipPath.addLine(to: CGPoint(x: 12.25, y: 8.39))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 13.95, y: 2.84))
        clipPath.addLine(to: CGPoint(x: 11.4, y: 5.39))
        clipPath.addLine(to: CGPoint(x: 10.09, y: 4.14))
        clipPath.addLine(to: CGPoint(x: 12.64, y: 1.53))
        clipPath.addLine(to: CGPoint(x: 13.95, y: 2.84))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 1.93, y: 2.84))
        clipPath.addLine(to: CGPoint(x: 3.23, y: 1.53))
        clipPath.addLine(to: CGPoint(x: 5.78, y: 4.14))
        clipPath.addLine(to: CGPoint(x: 4.48, y: 5.39))
        clipPath.addLine(to: CGPoint(x: 1.93, y: 2.84))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 1.93, y: 12.3))
        clipPath.addLine(to: CGPoint(x: 4.48, y: 9.75))
        clipPath.addLine(to: CGPoint(x: 5.78, y: 11))
        clipPath.addLine(to: CGPoint(x: 3.23, y: 13.61))
        clipPath.addLine(to: CGPoint(x: 1.93, y: 12.3))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 0, y: 8.39))
        clipPath.addLine(to: CGPoint(x: 0, y: 6.58))
        clipPath.addLine(to: CGPoint(x: 3.63, y: 6.58))
        clipPath.addLine(to: CGPoint(x: 3.63, y: 8.39))
        clipPath.addLine(to: CGPoint(x: 0, y: 8.39))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -0, y: 0, width: 22, height: 22))
        CTAStyleKit.selectedColor.setFill()
        rectanglePath.fill()


        context.endTransparencyLayer()
        context.restoreGState()
    }

    open dynamic class func drawCameraButton() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let fillColor5 = UIColor(red: 0.329, green: 0.321, blue: 0.321, alpha: 0.000)

        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: -20.5, y: -20.5))
        clip2Path.addLine(to: CGPoint(x: 108.5, y: -20.5))
        clip2Path.addLine(to: CGPoint(x: 108.5, y: 108.5))
        clip2Path.addLine(to: CGPoint(x: -20.5, y: 108.5))
        clip2Path.addLine(to: CGPoint(x: -20.5, y: -20.5))
        clip2Path.close()
        clip2Path.move(to: CGPoint(x: 44, y: 88.5))
        clip2Path.addCurve(to: CGPoint(x: 88.5, y: 44), controlPoint1: CGPoint(x: 68.58, y: 88.5), controlPoint2: CGPoint(x: 88.5, y: 68.58))
        clip2Path.addCurve(to: CGPoint(x: 44, y: -0.5), controlPoint1: CGPoint(x: 88.5, y: 19.42), controlPoint2: CGPoint(x: 68.58, y: -0.5))
        clip2Path.addCurve(to: CGPoint(x: -0.5, y: 44), controlPoint1: CGPoint(x: 19.42, y: -0.5), controlPoint2: CGPoint(x: -0.5, y: 19.42))
        clip2Path.addCurve(to: CGPoint(x: 44, y: 88.5), controlPoint1: CGPoint(x: -0.5, y: 68.58), controlPoint2: CGPoint(x: 19.42, y: 88.5))
        clip2Path.close()
        clip2Path.move(to: CGPoint(x: 44, y: 87.5))
        clip2Path.addCurve(to: CGPoint(x: 0.5, y: 44), controlPoint1: CGPoint(x: 19.98, y: 87.5), controlPoint2: CGPoint(x: 0.5, y: 68.02))
        clip2Path.addCurve(to: CGPoint(x: 44, y: 0.5), controlPoint1: CGPoint(x: 0.5, y: 19.98), controlPoint2: CGPoint(x: 19.98, y: 0.5))
        clip2Path.addCurve(to: CGPoint(x: 87.5, y: 44), controlPoint1: CGPoint(x: 68.02, y: 0.5), controlPoint2: CGPoint(x: 87.5, y: 19.98))
        clip2Path.addCurve(to: CGPoint(x: 44, y: 87.5), controlPoint1: CGPoint(x: 87.5, y: 68.02), controlPoint2: CGPoint(x: 68.02, y: 87.5))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 44, y: 88))
        clipPath.addCurve(to: CGPoint(x: 88, y: 44), controlPoint1: CGPoint(x: 68.3, y: 88), controlPoint2: CGPoint(x: 88, y: 68.3))
        clipPath.addCurve(to: CGPoint(x: 44, y: 0), controlPoint1: CGPoint(x: 88, y: 19.7), controlPoint2: CGPoint(x: 68.3, y: 0))
        clipPath.addCurve(to: CGPoint(x: 0, y: 44), controlPoint1: CGPoint(x: 19.7, y: 0), controlPoint2: CGPoint(x: 0, y: 19.7))
        clipPath.addCurve(to: CGPoint(x: 44, y: 88), controlPoint1: CGPoint(x: 0, y: 68.3), controlPoint2: CGPoint(x: 19.7, y: 88))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 44, y: 88))
        bezierPath.addCurve(to: CGPoint(x: 88, y: 44), controlPoint1: CGPoint(x: 68.3, y: 88), controlPoint2: CGPoint(x: 88, y: 68.3))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 0), controlPoint1: CGPoint(x: 88, y: 19.7), controlPoint2: CGPoint(x: 68.3, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 44), controlPoint1: CGPoint(x: 19.7, y: 0), controlPoint2: CGPoint(x: 0, y: 19.7))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 88), controlPoint1: CGPoint(x: 0, y: 68.3), controlPoint2: CGPoint(x: 19.7, y: 88))
        bezierPath.close()
        fillColor5.setFill()
        bezierPath.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.move(to: CGPoint(x: 44, y: 88))
        clip3Path.addCurve(to: CGPoint(x: 88, y: 44), controlPoint1: CGPoint(x: 68.3, y: 88), controlPoint2: CGPoint(x: 88, y: 68.3))
        clip3Path.addCurve(to: CGPoint(x: 44, y: 0), controlPoint1: CGPoint(x: 88, y: 19.7), controlPoint2: CGPoint(x: 68.3, y: 0))
        clip3Path.addCurve(to: CGPoint(x: 0, y: 44), controlPoint1: CGPoint(x: 19.7, y: 0), controlPoint2: CGPoint(x: 0, y: 19.7))
        clip3Path.addCurve(to: CGPoint(x: 44, y: 88), controlPoint1: CGPoint(x: 0, y: 68.3), controlPoint2: CGPoint(x: 19.7, y: 88))
        clip3Path.close()
        clip3Path.usesEvenOddFillRule = true
        clip3Path.addClip()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 44, y: 88))
        bezier4Path.addCurve(to: CGPoint(x: 88, y: 44), controlPoint1: CGPoint(x: 68.3, y: 88), controlPoint2: CGPoint(x: 88, y: 68.3))
        bezier4Path.addCurve(to: CGPoint(x: 44, y: 0), controlPoint1: CGPoint(x: 88, y: 19.7), controlPoint2: CGPoint(x: 68.3, y: 0))
        bezier4Path.addCurve(to: CGPoint(x: 0, y: 44), controlPoint1: CGPoint(x: 19.7, y: 0), controlPoint2: CGPoint(x: 0, y: 19.7))
        bezier4Path.addCurve(to: CGPoint(x: 44, y: 88), controlPoint1: CGPoint(x: 0, y: 68.3), controlPoint2: CGPoint(x: 19.7, y: 88))
        bezier4Path.close()
        CTAStyleKit.selectedColor.setStroke()
        bezier4Path.lineWidth = 2
        bezier4Path.stroke()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 4, y: 4, width: 80, height: 80.9))
        CTAStyleKit.selectedColor.setFill()
        ovalPath.fill()
    }

    open dynamic class func drawAddInEditor() {

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 23, height: 23))
        CTAStyleKit.selectedColor.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 13, y: 6))
        bezier2Path.addCurve(to: CGPoint(x: 13, y: 12), controlPoint1: CGPoint(x: 13, y: 6), controlPoint2: CGPoint(x: 13, y: 8.92))
        bezier2Path.addLine(to: CGPoint(x: 19, y: 12))
        bezier2Path.addLine(to: CGPoint(x: 19, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 13))
        bezier2Path.addCurve(to: CGPoint(x: 13, y: 19), controlPoint1: CGPoint(x: 13, y: 16.08), controlPoint2: CGPoint(x: 13, y: 19))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 19))
        bezier2Path.addCurve(to: CGPoint(x: 12, y: 13), controlPoint1: CGPoint(x: 12, y: 19), controlPoint2: CGPoint(x: 12, y: 16.08))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 12))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 12))
        bezier2Path.addCurve(to: CGPoint(x: 12, y: 6), controlPoint1: CGPoint(x: 12, y: 8.92), controlPoint2: CGPoint(x: 12, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 6))
        bezier2Path.close()
        CTAStyleKit.selectedColor.setFill()
        bezier2Path.fill()
    }

    open dynamic class func drawGradientInEditor(_ frame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 10)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let gradientWhiteColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientClearColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientWhiteColor.cgColor, gradientWhiteColor.blended(withFraction: 0.5, of: gradientWhiteColor).cgColor, gradientWhiteColor.cgColor, gradientClearColor.cgColor] as CFArray, locations: [0, 0.4, 0.5, 1])!

        //// Rectangle Drawing
        let rectangleRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height)
        let rectanglePath = UIBezierPath(rect: rectangleRect)
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: rectangleRect.minX, y: rectangleRect.midY),
            end: CGPoint(x: rectangleRect.maxX, y: rectangleRect.midY),
            options: [])
        context.restoreGState()
    }

    open dynamic class func drawGradientInHubLabel(_ frame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 10)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let gradientWhiteColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientClearColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.000)

        //// Gradient Declarations
        let gradient2 = CGGradient(colorsSpace: nil, colors: [gradientClearColor.cgColor, gradientClearColor.blended(withFraction: 0.5, of: gradientWhiteColor).cgColor, gradientWhiteColor.cgColor, gradientWhiteColor.cgColor] as CFArray, locations: [0, 0.1, 0.5, 1])!

        //// Rectangle Drawing
        let rectangleRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height)
        let rectanglePath = UIBezierPath(rect: rectangleRect)
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(gradient2,
            start: CGPoint(x: rectangleRect.minX, y: rectangleRect.midY),
            end: CGPoint(x: rectangleRect.maxX, y: rectangleRect.midY),
            options: [])
        context.restoreGState()
    }

    open dynamic class func drawAnimationplay() {

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 23, height: 23))
        CTAStyleKit.selectedColor.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9.62, y: 6.36))
        bezierPath.addLine(to: CGPoint(x: 9.62, y: 18.64))
        bezierPath.addLine(to: CGPoint(x: 17.83, y: 12.5))
        bezierPath.addLine(to: CGPoint(x: 9.62, y: 6.36))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9, y: 5))
        bezierPath.addLine(to: CGPoint(x: 19, y: 12.5))
        bezierPath.addLine(to: CGPoint(x: 9, y: 20))
        bezierPath.addLine(to: CGPoint(x: 9, y: 5))
        bezierPath.close()
        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    open dynamic class func drawAnimationpause() {

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 23, height: 23))
        CTAStyleKit.selectedColor.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 9, y: 5, width: 1, height: 14))
        CTAStyleKit.selectedColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 15, y: 5, width: 1, height: 14))
        CTAStyleKit.selectedColor.setFill()
        rectangle2Path.fill()
    }

    open dynamic class func drawTemplatesNormal() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Group 4
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 14.96, y: 15.9))
        clipPath.addCurve(to: CGPoint(x: 17, y: 11.22), controlPoint1: CGPoint(x: 16.21, y: 14.76), controlPoint2: CGPoint(x: 17, y: 13.09))
        clipPath.addCurve(to: CGPoint(x: 11, y: 5), controlPoint1: CGPoint(x: 17, y: 7.79), controlPoint2: CGPoint(x: 14.31, y: 5))
        clipPath.addCurve(to: CGPoint(x: 5, y: 11.22), controlPoint1: CGPoint(x: 7.69, y: 5), controlPoint2: CGPoint(x: 5, y: 7.79))
        clipPath.addCurve(to: CGPoint(x: 7.04, y: 15.9), controlPoint1: CGPoint(x: 5, y: 13.09), controlPoint2: CGPoint(x: 5.79, y: 14.76))
        clipPath.addLine(to: CGPoint(x: 8.75, y: 19))
        clipPath.addLine(to: CGPoint(x: 13.25, y: 19))
        clipPath.addLine(to: CGPoint(x: 14.96, y: 15.9))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14.96, y: 15.9))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 11.22), controlPoint1: CGPoint(x: 16.21, y: 14.76), controlPoint2: CGPoint(x: 17, y: 13.09))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 5), controlPoint1: CGPoint(x: 17, y: 7.79), controlPoint2: CGPoint(x: 14.31, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 11.22), controlPoint1: CGPoint(x: 7.69, y: 5), controlPoint2: CGPoint(x: 5, y: 7.79))
        bezierPath.addCurve(to: CGPoint(x: 7.04, y: 15.9), controlPoint1: CGPoint(x: 5, y: 13.09), controlPoint2: CGPoint(x: 5.79, y: 14.76))
        bezierPath.addLine(to: CGPoint(x: 8.75, y: 19))
        bezierPath.addLine(to: CGPoint(x: 13.25, y: 19))
        bezierPath.addLine(to: CGPoint(x: 14.96, y: 15.9))
        bezierPath.close()
        CTAStyleKit.normalColor.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 10.15, y: 0.55, width: 1.9, height: 2.7), cornerRadius: 0.95)
        CTAStyleKit.normalColor.setFill()
        rectanglePath.fill()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 9.33, y: 20))
        clip2Path.addLine(to: CGPoint(x: 12.61, y: 20))
        clip2Path.addLine(to: CGPoint(x: 12.41, y: 21.05))
        clip2Path.addCurve(to: CGPoint(x: 11.6, y: 22), controlPoint1: CGPoint(x: 12.31, y: 21.57), controlPoint2: CGPoint(x: 11.96, y: 22))
        clip2Path.addLine(to: CGPoint(x: 10.37, y: 22))
        clip2Path.addCurve(to: CGPoint(x: 9.55, y: 21.05), controlPoint1: CGPoint(x: 10.03, y: 22), controlPoint2: CGPoint(x: 9.66, y: 21.58))
        clip2Path.addLine(to: CGPoint(x: 9.33, y: 20))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 9.33, y: 20))
        bezier3Path.addLine(to: CGPoint(x: 12.61, y: 20))
        bezier3Path.addLine(to: CGPoint(x: 12.41, y: 21.05))
        bezier3Path.addCurve(to: CGPoint(x: 11.6, y: 22), controlPoint1: CGPoint(x: 12.31, y: 21.57), controlPoint2: CGPoint(x: 11.96, y: 22))
        bezier3Path.addLine(to: CGPoint(x: 10.37, y: 22))
        bezier3Path.addCurve(to: CGPoint(x: 9.55, y: 21.05), controlPoint1: CGPoint(x: 10.03, y: 22), controlPoint2: CGPoint(x: 9.66, y: 21.58))
        bezier3Path.addLine(to: CGPoint(x: 9.33, y: 20))
        bezier3Path.close()
        CTAStyleKit.normalColor.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.stroke()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 19.48, y: 10.57, width: 2.75, height: 1.85), cornerRadius: 0.92)
        CTAStyleKit.normalColor.setFill()
        rectangle2Path.fill()


        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.move(to: CGPoint(x: 2.07, y: 10.55))
        clip3Path.addLine(to: CGPoint(x: 0.69, y: 10.55))
        clip3Path.addCurve(to: CGPoint(x: -0, y: 11.48), controlPoint1: CGPoint(x: 0.31, y: 10.55), controlPoint2: CGPoint(x: -0, y: 10.97))
        clip3Path.addCurve(to: CGPoint(x: 0.69, y: 12.41), controlPoint1: CGPoint(x: -0, y: 11.99), controlPoint2: CGPoint(x: 0.31, y: 12.41))
        clip3Path.addLine(to: CGPoint(x: 2.07, y: 12.41))
        clip3Path.addCurve(to: CGPoint(x: 2.77, y: 11.48), controlPoint1: CGPoint(x: 2.46, y: 12.41), controlPoint2: CGPoint(x: 2.77, y: 11.99))
        clip3Path.addCurve(to: CGPoint(x: 2.07, y: 10.55), controlPoint1: CGPoint(x: 2.77, y: 10.97), controlPoint2: CGPoint(x: 2.46, y: 10.55))
        clip3Path.addLine(to: CGPoint(x: 2.07, y: 10.55))
        clip3Path.close()
        clip3Path.usesEvenOddFillRule = true
        clip3Path.addClip()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: -3.97, y: 5.57, width: 10.75, height: 11.85))
        CTAStyleKit.normalColor.setFill()
        rectangle3Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 4.29, y: 4.73)
        context.rotate(by: -44.65 * CGFloat.pi/180)

        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: -0.71, y: -1.46, width: 1.42, height: 2.91), cornerRadius: 0.71)
        CTAStyleKit.normalColor.setFill()
        rectangle4Path.fill()

        context.restoreGState()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.translateBy(x: 18.03, y: 4.65)
        context.rotate(by: 44.65 * CGFloat.pi/180)

        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: -0.75, y: -1.49, width: 1.51, height: 2.98), cornerRadius: 0.75)
        CTAStyleKit.normalColor.setFill()
        rectangle5Path.fill()

        context.restoreGState()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 11.42, y: 8.63))
        bezier6Path.addLine(to: CGPoint(x: 8.66, y: 12.27))
        bezier6Path.addLine(to: CGPoint(x: 10.56, y: 12.85))
        bezier6Path.addLine(to: CGPoint(x: 10.06, y: 15.7))
        bezier6Path.addLine(to: CGPoint(x: 13.1, y: 12.27))
        bezier6Path.addLine(to: CGPoint(x: 10.97, y: 11.31))
        bezier6Path.addLine(to: CGPoint(x: 11.42, y: 8.63))
        bezier6Path.close()
        CTAStyleKit.normalColor.setFill()
        bezier6Path.fill()
    }

    open dynamic class func drawTemplatesSelected() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Group 4
        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 14.96, y: 15.9))
        clipPath.addCurve(to: CGPoint(x: 17, y: 11.22), controlPoint1: CGPoint(x: 16.21, y: 14.76), controlPoint2: CGPoint(x: 17, y: 13.09))
        clipPath.addCurve(to: CGPoint(x: 11, y: 5), controlPoint1: CGPoint(x: 17, y: 7.79), controlPoint2: CGPoint(x: 14.31, y: 5))
        clipPath.addCurve(to: CGPoint(x: 5, y: 11.22), controlPoint1: CGPoint(x: 7.69, y: 5), controlPoint2: CGPoint(x: 5, y: 7.79))
        clipPath.addCurve(to: CGPoint(x: 7.04, y: 15.9), controlPoint1: CGPoint(x: 5, y: 13.09), controlPoint2: CGPoint(x: 5.79, y: 14.76))
        clipPath.addLine(to: CGPoint(x: 8.75, y: 19))
        clipPath.addLine(to: CGPoint(x: 13.25, y: 19))
        clipPath.addLine(to: CGPoint(x: 14.96, y: 15.9))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14.96, y: 15.9))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 11.22), controlPoint1: CGPoint(x: 16.21, y: 14.76), controlPoint2: CGPoint(x: 17, y: 13.09))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 5), controlPoint1: CGPoint(x: 17, y: 7.79), controlPoint2: CGPoint(x: 14.31, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 11.22), controlPoint1: CGPoint(x: 7.69, y: 5), controlPoint2: CGPoint(x: 5, y: 7.79))
        bezierPath.addCurve(to: CGPoint(x: 7.04, y: 15.9), controlPoint1: CGPoint(x: 5, y: 13.09), controlPoint2: CGPoint(x: 5.79, y: 14.76))
        bezierPath.addLine(to: CGPoint(x: 8.75, y: 19))
        bezierPath.addLine(to: CGPoint(x: 13.25, y: 19))
        bezierPath.addLine(to: CGPoint(x: 14.96, y: 15.9))
        bezierPath.close()
        CTAStyleKit.selectedColor.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 10.15, y: 0.55, width: 1.9, height: 2.7), cornerRadius: 0.95)
        CTAStyleKit.selectedColor.setFill()
        rectanglePath.fill()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 9.33, y: 20))
        clip2Path.addLine(to: CGPoint(x: 12.61, y: 20))
        clip2Path.addLine(to: CGPoint(x: 12.41, y: 21.05))
        clip2Path.addCurve(to: CGPoint(x: 11.6, y: 22), controlPoint1: CGPoint(x: 12.31, y: 21.57), controlPoint2: CGPoint(x: 11.96, y: 22))
        clip2Path.addLine(to: CGPoint(x: 10.37, y: 22))
        clip2Path.addCurve(to: CGPoint(x: 9.55, y: 21.05), controlPoint1: CGPoint(x: 10.03, y: 22), controlPoint2: CGPoint(x: 9.66, y: 21.58))
        clip2Path.addLine(to: CGPoint(x: 9.33, y: 20))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 9.33, y: 20))
        bezier3Path.addLine(to: CGPoint(x: 12.61, y: 20))
        bezier3Path.addLine(to: CGPoint(x: 12.41, y: 21.05))
        bezier3Path.addCurve(to: CGPoint(x: 11.6, y: 22), controlPoint1: CGPoint(x: 12.31, y: 21.57), controlPoint2: CGPoint(x: 11.96, y: 22))
        bezier3Path.addLine(to: CGPoint(x: 10.37, y: 22))
        bezier3Path.addCurve(to: CGPoint(x: 9.55, y: 21.05), controlPoint1: CGPoint(x: 10.03, y: 22), controlPoint2: CGPoint(x: 9.66, y: 21.58))
        bezier3Path.addLine(to: CGPoint(x: 9.33, y: 20))
        bezier3Path.close()
        CTAStyleKit.selectedColor.setFill()
        bezier3Path.fill()
        CTAStyleKit.selectedColor.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.stroke()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 19.48, y: 10.57, width: 2.75, height: 1.85), cornerRadius: 0.92)
        CTAStyleKit.selectedColor.setFill()
        rectangle2Path.fill()


        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.move(to: CGPoint(x: 2.07, y: 10.55))
        clip3Path.addLine(to: CGPoint(x: 0.69, y: 10.55))
        clip3Path.addCurve(to: CGPoint(x: -0, y: 11.48), controlPoint1: CGPoint(x: 0.31, y: 10.55), controlPoint2: CGPoint(x: -0, y: 10.97))
        clip3Path.addCurve(to: CGPoint(x: 0.69, y: 12.41), controlPoint1: CGPoint(x: -0, y: 11.99), controlPoint2: CGPoint(x: 0.31, y: 12.41))
        clip3Path.addLine(to: CGPoint(x: 2.07, y: 12.41))
        clip3Path.addCurve(to: CGPoint(x: 2.77, y: 11.48), controlPoint1: CGPoint(x: 2.46, y: 12.41), controlPoint2: CGPoint(x: 2.77, y: 11.99))
        clip3Path.addCurve(to: CGPoint(x: 2.07, y: 10.55), controlPoint1: CGPoint(x: 2.77, y: 10.97), controlPoint2: CGPoint(x: 2.46, y: 10.55))
        clip3Path.addLine(to: CGPoint(x: 2.07, y: 10.55))
        clip3Path.close()
        clip3Path.usesEvenOddFillRule = true
        clip3Path.addClip()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: -3.97, y: 5.57, width: 10.75, height: 11.85))
        CTAStyleKit.selectedColor.setFill()
        rectangle3Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 4.29, y: 4.73)
        context.rotate(by: -44.65 * CGFloat.pi/180)

        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: -0.71, y: -1.46, width: 1.42, height: 2.91), cornerRadius: 0.71)
        CTAStyleKit.selectedColor.setFill()
        rectangle4Path.fill()

        context.restoreGState()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.translateBy(x: 18.03, y: 4.65)
        context.rotate(by: 44.65 * CGFloat.pi/180)

        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: -0.75, y: -1.49, width: 1.51, height: 2.98), cornerRadius: 0.75)
        CTAStyleKit.selectedColor.setFill()
        rectangle5Path.fill()

        context.restoreGState()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 11.42, y: 8.63))
        bezier6Path.addLine(to: CGPoint(x: 8.66, y: 12.27))
        bezier6Path.addLine(to: CGPoint(x: 10.56, y: 12.85))
        bezier6Path.addLine(to: CGPoint(x: 10.06, y: 15.7))
        bezier6Path.addLine(to: CGPoint(x: 13.1, y: 12.27))
        bezier6Path.addLine(to: CGPoint(x: 10.97, y: 11.31))
        bezier6Path.addLine(to: CGPoint(x: 11.42, y: 8.63))
        bezier6Path.close()
        CTAStyleKit.selectedColor.setFill()
        bezier6Path.fill()
    }

    open dynamic class func drawFiltersNormal() {

        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 5, y: 0, width: 12, height: 13))
        CTAStyleKit.normalColor.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 18.49, y: 9.87))
        bezierPath.addCurve(to: CGPoint(x: 14.49, y: 13.89), controlPoint1: CGPoint(x: 17.68, y: 11.63), controlPoint2: CGPoint(x: 16.27, y: 13.06))
        bezierPath.addCurve(to: CGPoint(x: 14.67, y: 15.58), controlPoint1: CGPoint(x: 14.61, y: 14.44), controlPoint2: CGPoint(x: 14.67, y: 15.01))
        bezierPath.addCurve(to: CGPoint(x: 12.46, y: 21.18), controlPoint1: CGPoint(x: 14.67, y: 17.75), controlPoint2: CGPoint(x: 13.82, y: 19.71))
        bezierPath.addCurve(to: CGPoint(x: 15.58, y: 22), controlPoint1: CGPoint(x: 13.38, y: 21.7), controlPoint2: CGPoint(x: 14.45, y: 22))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 15.58), controlPoint1: CGPoint(x: 19.13, y: 22), controlPoint2: CGPoint(x: 22, y: 19.13))
        bezierPath.addCurve(to: CGPoint(x: 18.49, y: 9.87), controlPoint1: CGPoint(x: 22, y: 13.09), controlPoint2: CGPoint(x: 20.57, y: 10.93))
        bezierPath.close()
        CTAStyleKit.normalColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 11, y: 14.67))
        bezier2Path.addCurve(to: CGPoint(x: 3.52, y: 9.87), controlPoint1: CGPoint(x: 7.68, y: 14.67), controlPoint2: CGPoint(x: 4.82, y: 12.69))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 15.58), controlPoint1: CGPoint(x: 1.43, y: 10.92), controlPoint2: CGPoint(x: 0, y: 13.08))
        bezier2Path.addCurve(to: CGPoint(x: 6.42, y: 22), controlPoint1: CGPoint(x: 0, y: 19.13), controlPoint2: CGPoint(x: 2.87, y: 22))
        bezier2Path.addCurve(to: CGPoint(x: 12.83, y: 15.58), controlPoint1: CGPoint(x: 9.96, y: 22), controlPoint2: CGPoint(x: 12.83, y: 19.13))
        bezier2Path.addCurve(to: CGPoint(x: 12.73, y: 14.48), controlPoint1: CGPoint(x: 12.83, y: 15.21), controlPoint2: CGPoint(x: 12.79, y: 14.84))
        bezier2Path.addCurve(to: CGPoint(x: 11, y: 14.67), controlPoint1: CGPoint(x: 12.17, y: 14.6), controlPoint2: CGPoint(x: 11.59, y: 14.67))
        bezier2Path.close()
        CTAStyleKit.normalColor.setFill()
        bezier2Path.fill()
    }

    open dynamic class func drawFiltersSelected() {

        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 5, y: 0, width: 12, height: 13))
        CTAStyleKit.selectedColor.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 18.49, y: 9.87))
        bezierPath.addCurve(to: CGPoint(x: 14.49, y: 13.89), controlPoint1: CGPoint(x: 17.68, y: 11.63), controlPoint2: CGPoint(x: 16.27, y: 13.06))
        bezierPath.addCurve(to: CGPoint(x: 14.67, y: 15.58), controlPoint1: CGPoint(x: 14.61, y: 14.44), controlPoint2: CGPoint(x: 14.67, y: 15.01))
        bezierPath.addCurve(to: CGPoint(x: 12.46, y: 21.18), controlPoint1: CGPoint(x: 14.67, y: 17.75), controlPoint2: CGPoint(x: 13.82, y: 19.71))
        bezierPath.addCurve(to: CGPoint(x: 15.58, y: 22), controlPoint1: CGPoint(x: 13.38, y: 21.7), controlPoint2: CGPoint(x: 14.45, y: 22))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 15.58), controlPoint1: CGPoint(x: 19.13, y: 22), controlPoint2: CGPoint(x: 22, y: 19.13))
        bezierPath.addCurve(to: CGPoint(x: 18.49, y: 9.87), controlPoint1: CGPoint(x: 22, y: 13.09), controlPoint2: CGPoint(x: 20.57, y: 10.93))
        bezierPath.close()
        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 11, y: 14.67))
        bezier2Path.addCurve(to: CGPoint(x: 3.52, y: 9.87), controlPoint1: CGPoint(x: 7.68, y: 14.67), controlPoint2: CGPoint(x: 4.82, y: 12.69))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 15.58), controlPoint1: CGPoint(x: 1.43, y: 10.92), controlPoint2: CGPoint(x: 0, y: 13.08))
        bezier2Path.addCurve(to: CGPoint(x: 6.42, y: 22), controlPoint1: CGPoint(x: 0, y: 19.13), controlPoint2: CGPoint(x: 2.87, y: 22))
        bezier2Path.addCurve(to: CGPoint(x: 12.83, y: 15.58), controlPoint1: CGPoint(x: 9.96, y: 22), controlPoint2: CGPoint(x: 12.83, y: 19.13))
        bezier2Path.addCurve(to: CGPoint(x: 12.73, y: 14.48), controlPoint1: CGPoint(x: 12.83, y: 15.21), controlPoint2: CGPoint(x: 12.79, y: 14.84))
        bezier2Path.addCurve(to: CGPoint(x: 11, y: 14.67), controlPoint1: CGPoint(x: 12.17, y: 14.6), controlPoint2: CGPoint(x: 11.59, y: 14.67))
        bezier2Path.close()
        CTAStyleKit.selectedColor.setFill()
        bezier2Path.fill()
    }

    //// Generated Images

    open dynamic class var imageOfAlignmentRightSelected: UIImage {
        if Cache.imageOfAlignmentRightSelected != nil {
            return Cache.imageOfAlignmentRightSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            CTAStyleKit.drawAlignmentRightSelected()

        Cache.imageOfAlignmentRightSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentRightSelected!
    }

    open dynamic class var imageOfAlignmentRightNormal: UIImage {
        if Cache.imageOfAlignmentRightNormal != nil {
            return Cache.imageOfAlignmentRightNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            CTAStyleKit.drawAlignmentRightNormal()

        Cache.imageOfAlignmentRightNormal = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentRightNormal!
    }

    open dynamic class var imageOfAlignmentLeftSelected: UIImage {
        if Cache.imageOfAlignmentLeftSelected != nil {
            return Cache.imageOfAlignmentLeftSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            CTAStyleKit.drawAlignmentLeftSelected()

        Cache.imageOfAlignmentLeftSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentLeftSelected!
    }

    open dynamic class var imageOfAlignmentLeftNormal: UIImage {
        if Cache.imageOfAlignmentLeftNormal != nil {
            return Cache.imageOfAlignmentLeftNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            CTAStyleKit.drawAlignmentLeftNormal()

        Cache.imageOfAlignmentLeftNormal = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentLeftNormal!
    }

    open dynamic class var imageOfAlignmentCenterSelected: UIImage {
        if Cache.imageOfAlignmentCenterSelected != nil {
            return Cache.imageOfAlignmentCenterSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            CTAStyleKit.drawAlignmentCenterSelected()

        Cache.imageOfAlignmentCenterSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentCenterSelected!
    }

    open dynamic class var imageOfAlignmentCenterNormal: UIImage {
        if Cache.imageOfAlignmentCenterNormal != nil {
            return Cache.imageOfAlignmentCenterNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            CTAStyleKit.drawAlignmentCenterNormal()

        Cache.imageOfAlignmentCenterNormal = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentCenterNormal!
    }

    open dynamic class var imageOfAlignmentJustNormal: UIImage {
        if Cache.imageOfAlignmentJustNormal != nil {
            return Cache.imageOfAlignmentJustNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            CTAStyleKit.drawAlignmentJustNormal()

        Cache.imageOfAlignmentJustNormal = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentJustNormal!
    }

    open dynamic class var imageOfAlignmentJustSelected: UIImage {
        if Cache.imageOfAlignmentJustSelected != nil {
            return Cache.imageOfAlignmentJustSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            CTAStyleKit.drawAlignmentJustSelected()

        Cache.imageOfAlignmentJustSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentJustSelected!
    }

    open dynamic class var imageOfLineSpacingNormal: UIImage {
        if Cache.imageOfLineSpacingNormal != nil {
            return Cache.imageOfLineSpacingNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            CTAStyleKit.drawLineSpacingNormal()

        Cache.imageOfLineSpacingNormal = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfLineSpacingNormal!
    }

    open dynamic class var imageOfLineSpacingSelected: UIImage {
        if Cache.imageOfLineSpacingSelected != nil {
            return Cache.imageOfLineSpacingSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            CTAStyleKit.drawLineSpacingSelected()

        Cache.imageOfLineSpacingSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfLineSpacingSelected!
    }

    open dynamic class var imageOfTextSpacingSelected: UIImage {
        if Cache.imageOfTextSpacingSelected != nil {
            return Cache.imageOfTextSpacingSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            CTAStyleKit.drawTextSpacingSelected()

        Cache.imageOfTextSpacingSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfTextSpacingSelected!
    }

    open dynamic class var imageOfTextSpacingNormal: UIImage {
        if Cache.imageOfTextSpacingNormal != nil {
            return Cache.imageOfTextSpacingNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            CTAStyleKit.drawTextSpacingNormal()

        Cache.imageOfTextSpacingNormal = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfTextSpacingNormal!
    }

    open dynamic class var imageOfAdd: UIImage {
        if Cache.imageOfAdd != nil {
            return Cache.imageOfAdd!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 14, height: 14), false, 0)
            CTAStyleKit.drawAdd()

        Cache.imageOfAdd = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAdd!
    }

    open dynamic class var imageOfNode: UIImage {
        if Cache.imageOfNode != nil {
            return Cache.imageOfNode!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 10, height: 10), false, 0)
            CTAStyleKit.drawNode()

        Cache.imageOfNode = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfNode!
    }

    open dynamic class var imageOfFontBarItemNormal: UIImage {
        if Cache.imageOfFontBarItemNormal != nil {
            return Cache.imageOfFontBarItemNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 23, height: 22), false, 0)
            CTAStyleKit.drawFontBarItemNormal()

        Cache.imageOfFontBarItemNormal = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfFontBarItemNormal!
    }

    open dynamic class var imageOfFontBarItemSelected: UIImage {
        if Cache.imageOfFontBarItemSelected != nil {
            return Cache.imageOfFontBarItemSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 23, height: 22), false, 0)
            CTAStyleKit.drawFontBarItemSelected()

        Cache.imageOfFontBarItemSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfFontBarItemSelected!
    }

    open dynamic class var imageOfSizeBarItemNormal: UIImage {
        if Cache.imageOfSizeBarItemNormal != nil {
            return Cache.imageOfSizeBarItemNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 22), false, 0)
            CTAStyleKit.drawSizeBarItemNormal()

        Cache.imageOfSizeBarItemNormal = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfSizeBarItemNormal!
    }

    open dynamic class var imageOfSizeBarItemSelected: UIImage {
        if Cache.imageOfSizeBarItemSelected != nil {
            return Cache.imageOfSizeBarItemSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 22), false, 0)
            CTAStyleKit.drawSizeBarItemSelected()

        Cache.imageOfSizeBarItemSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfSizeBarItemSelected!
    }

    open dynamic class var imageOfColorBarItemSelected: UIImage {
        if Cache.imageOfColorBarItemSelected != nil {
            return Cache.imageOfColorBarItemSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 23), false, 0)
            CTAStyleKit.drawColorBarItemSelected()

        Cache.imageOfColorBarItemSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfColorBarItemSelected!
    }

    open dynamic class var imageOfColorBarItemNormal: UIImage {
        if Cache.imageOfColorBarItemNormal != nil {
            return Cache.imageOfColorBarItemNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 23), false, 0)
            CTAStyleKit.drawColorBarItemNormal()

        Cache.imageOfColorBarItemNormal = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfColorBarItemNormal!
    }

    open dynamic class var imageOfRotationBarItemSelected: UIImage {
        if Cache.imageOfRotationBarItemSelected != nil {
            return Cache.imageOfRotationBarItemSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            CTAStyleKit.drawRotationBarItemSelected()

        Cache.imageOfRotationBarItemSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfRotationBarItemSelected!
    }

    open dynamic class var imageOfRotationBarItemNormal: UIImage {
        if Cache.imageOfRotationBarItemNormal != nil {
            return Cache.imageOfRotationBarItemNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            CTAStyleKit.drawRotationBarItemNormal()

        Cache.imageOfRotationBarItemNormal = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfRotationBarItemNormal!
    }

    open dynamic class var imageOfAlignmentBarItemNormal: UIImage {
        if Cache.imageOfAlignmentBarItemNormal != nil {
            return Cache.imageOfAlignmentBarItemNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 19, height: 20), false, 0)
            CTAStyleKit.drawAlignmentBarItemNormal()

        Cache.imageOfAlignmentBarItemNormal = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentBarItemNormal!
    }

    open dynamic class var imageOfAlignmentBarItemSelected: UIImage {
        if Cache.imageOfAlignmentBarItemSelected != nil {
            return Cache.imageOfAlignmentBarItemSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 19, height: 20), false, 0)
            CTAStyleKit.drawAlignmentBarItemSelected()

        Cache.imageOfAlignmentBarItemSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentBarItemSelected!
    }

    open dynamic class var imageOfSpacingBarItemNormal: UIImage {
        if Cache.imageOfSpacingBarItemNormal != nil {
            return Cache.imageOfSpacingBarItemNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 11), false, 0)
            CTAStyleKit.drawSpacingBarItemNormal()

        Cache.imageOfSpacingBarItemNormal = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfSpacingBarItemNormal!
    }

    open dynamic class var imageOfSpacingBarItemSelected: UIImage {
        if Cache.imageOfSpacingBarItemSelected != nil {
            return Cache.imageOfSpacingBarItemSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 11), false, 0)
            CTAStyleKit.drawSpacingBarItemSelected()

        Cache.imageOfSpacingBarItemSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfSpacingBarItemSelected!
    }

    open dynamic class var imageOfAnimationBarItemNormal: UIImage {
        if Cache.imageOfAnimationBarItemNormal != nil {
            return Cache.imageOfAnimationBarItemNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            CTAStyleKit.drawAnimationBarItemNormal()

        Cache.imageOfAnimationBarItemNormal = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAnimationBarItemNormal!
    }

    open dynamic class var imageOfAnimationBarItemSelected: UIImage {
        if Cache.imageOfAnimationBarItemSelected != nil {
            return Cache.imageOfAnimationBarItemSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            CTAStyleKit.drawAnimationBarItemSelected()

        Cache.imageOfAnimationBarItemSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAnimationBarItemSelected!
    }

    open dynamic class var imageOfCameraButton: UIImage {
        if Cache.imageOfCameraButton != nil {
            return Cache.imageOfCameraButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 88, height: 88), false, 0)
            CTAStyleKit.drawCameraButton()

        Cache.imageOfCameraButton = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfCameraButton!
    }

    open dynamic class var imageOfAddInEditor: UIImage {
        if Cache.imageOfAddInEditor != nil {
            return Cache.imageOfAddInEditor!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 25), false, 0)
            CTAStyleKit.drawAddInEditor()

        Cache.imageOfAddInEditor = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAddInEditor!
    }

    open dynamic class func imageOfGradientInEditor(_ imageSize: CGSize = CGSize(width: 12, height: 10)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            CTAStyleKit.drawGradientInEditor(CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height))

        let imageOfGradientInEditor = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfGradientInEditor
    }

    open dynamic class func imageOfGradientInHubLabel(_ imageSize: CGSize = CGSize(width: 12, height: 10)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            CTAStyleKit.drawGradientInHubLabel(CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height))

        let imageOfGradientInHubLabel = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfGradientInHubLabel
    }

    open dynamic class var imageOfAnimationplay: UIImage {
        if Cache.imageOfAnimationplay != nil {
            return Cache.imageOfAnimationplay!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 25), false, 0)
            CTAStyleKit.drawAnimationplay()

        Cache.imageOfAnimationplay = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAnimationplay!
    }

    open dynamic class var imageOfAnimationpause: UIImage {
        if Cache.imageOfAnimationpause != nil {
            return Cache.imageOfAnimationpause!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 25), false, 0)
            CTAStyleKit.drawAnimationpause()

        Cache.imageOfAnimationpause = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfAnimationpause!
    }

    open dynamic class var imageOfTemplatesNormal: UIImage {
        if Cache.imageOfTemplatesNormal != nil {
            return Cache.imageOfTemplatesNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            CTAStyleKit.drawTemplatesNormal()

        Cache.imageOfTemplatesNormal = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfTemplatesNormal!
    }

    open dynamic class var imageOfTemplatesSelected: UIImage {
        if Cache.imageOfTemplatesSelected != nil {
            return Cache.imageOfTemplatesSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            CTAStyleKit.drawTemplatesSelected()

        Cache.imageOfTemplatesSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfTemplatesSelected!
    }

    open dynamic class var imageOfFiltersNormal: UIImage {
        if Cache.imageOfFiltersNormal != nil {
            return Cache.imageOfFiltersNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            CTAStyleKit.drawFiltersNormal()

        Cache.imageOfFiltersNormal = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfFiltersNormal!
    }

    open dynamic class var imageOfFiltersSelected: UIImage {
        if Cache.imageOfFiltersSelected != nil {
            return Cache.imageOfFiltersSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            CTAStyleKit.drawFiltersSelected()

        Cache.imageOfFiltersSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfFiltersSelected!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var alignmentRightSelectedTargets: [AnyObject]! {
        get { return Cache.alignmentRightSelectedTargets }
        set {
            Cache.alignmentRightSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAlignmentRightSelected)
            }
        }
    }

    @IBOutlet dynamic var alignmentRightNormalTargets: [AnyObject]! {
        get { return Cache.alignmentRightNormalTargets }
        set {
            Cache.alignmentRightNormalTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAlignmentRightNormal)
            }
        }
    }

    @IBOutlet dynamic var alignmentLeftSelectedTargets: [AnyObject]! {
        get { return Cache.alignmentLeftSelectedTargets }
        set {
            Cache.alignmentLeftSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAlignmentLeftSelected)
            }
        }
    }

    @IBOutlet dynamic var alignmentLeftNormalTargets: [AnyObject]! {
        get { return Cache.alignmentLeftNormalTargets }
        set {
            Cache.alignmentLeftNormalTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAlignmentLeftNormal)
            }
        }
    }

    @IBOutlet dynamic var alignmentCenterSelectedTargets: [AnyObject]! {
        get { return Cache.alignmentCenterSelectedTargets }
        set {
            Cache.alignmentCenterSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAlignmentCenterSelected)
            }
        }
    }

    @IBOutlet dynamic var alignmentCenterNormalTargets: [AnyObject]! {
        get { return Cache.alignmentCenterNormalTargets }
        set {
            Cache.alignmentCenterNormalTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAlignmentCenterNormal)
            }
        }
    }

    @IBOutlet dynamic var alignmentJustNormalTargets: [AnyObject]! {
        get { return Cache.alignmentJustNormalTargets }
        set {
            Cache.alignmentJustNormalTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAlignmentJustNormal)
            }
        }
    }

    @IBOutlet dynamic var alignmentJustSelectedTargets: [AnyObject]! {
        get { return Cache.alignmentJustSelectedTargets }
        set {
            Cache.alignmentJustSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAlignmentJustSelected)
            }
        }
    }

    @IBOutlet dynamic var lineSpacingNormalTargets: [AnyObject]! {
        get { return Cache.lineSpacingNormalTargets }
        set {
            Cache.lineSpacingNormalTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfLineSpacingNormal)
            }
        }
    }

    @IBOutlet dynamic var lineSpacingSelectedTargets: [AnyObject]! {
        get { return Cache.lineSpacingSelectedTargets }
        set {
            Cache.lineSpacingSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfLineSpacingSelected)
            }
        }
    }

    @IBOutlet dynamic var textSpacingSelectedTargets: [AnyObject]! {
        get { return Cache.textSpacingSelectedTargets }
        set {
            Cache.textSpacingSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfTextSpacingSelected)
            }
        }
    }

    @IBOutlet dynamic var textSpacingNormalTargets: [AnyObject]! {
        get { return Cache.textSpacingNormalTargets }
        set {
            Cache.textSpacingNormalTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfTextSpacingNormal)
            }
        }
    }

    @IBOutlet dynamic var addTargets: [AnyObject]! {
        get { return Cache.addTargets }
        set {
            Cache.addTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAdd)
            }
        }
    }

    @IBOutlet dynamic var nodeTargets: [AnyObject]! {
        get { return Cache.nodeTargets }
        set {
            Cache.nodeTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfNode)
            }
        }
    }

    @IBOutlet dynamic var fontBarItemNormalTargets: [AnyObject]! {
        get { return Cache.fontBarItemNormalTargets }
        set {
            Cache.fontBarItemNormalTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfFontBarItemNormal)
            }
        }
    }

    @IBOutlet dynamic var fontBarItemSelectedTargets: [AnyObject]! {
        get { return Cache.fontBarItemSelectedTargets }
        set {
            Cache.fontBarItemSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfFontBarItemSelected)
            }
        }
    }

    @IBOutlet dynamic var sizeBarItemNormalTargets: [AnyObject]! {
        get { return Cache.sizeBarItemNormalTargets }
        set {
            Cache.sizeBarItemNormalTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfSizeBarItemNormal)
            }
        }
    }

    @IBOutlet dynamic var sizeBarItemSelectedTargets: [AnyObject]! {
        get { return Cache.sizeBarItemSelectedTargets }
        set {
            Cache.sizeBarItemSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfSizeBarItemSelected)
            }
        }
    }

    @IBOutlet dynamic var colorBarItemSelectedTargets: [AnyObject]! {
        get { return Cache.colorBarItemSelectedTargets }
        set {
            Cache.colorBarItemSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfColorBarItemSelected)
            }
        }
    }

    @IBOutlet dynamic var colorBarItemNormalTargets: [AnyObject]! {
        get { return Cache.colorBarItemNormalTargets }
        set {
            Cache.colorBarItemNormalTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfColorBarItemNormal)
            }
        }
    }

    @IBOutlet dynamic var rotationBarItemSelectedTargets: [AnyObject]! {
        get { return Cache.rotationBarItemSelectedTargets }
        set {
            Cache.rotationBarItemSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfRotationBarItemSelected)
            }
        }
    }

    @IBOutlet dynamic var rotationBarItemNormalTargets: [AnyObject]! {
        get { return Cache.rotationBarItemNormalTargets }
        set {
            Cache.rotationBarItemNormalTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfRotationBarItemNormal)
            }
        }
    }

    @IBOutlet dynamic var alignmentBarItemNormalTargets: [AnyObject]! {
        get { return Cache.alignmentBarItemNormalTargets }
        set {
            Cache.alignmentBarItemNormalTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAlignmentBarItemNormal)
            }
        }
    }

    @IBOutlet dynamic var alignmentBarItemSelectedTargets: [AnyObject]! {
        get { return Cache.alignmentBarItemSelectedTargets }
        set {
            Cache.alignmentBarItemSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAlignmentBarItemSelected)
            }
        }
    }

    @IBOutlet dynamic var spacingBarItemNormalTargets: [AnyObject]! {
        get { return Cache.spacingBarItemNormalTargets }
        set {
            Cache.spacingBarItemNormalTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfSpacingBarItemNormal)
            }
        }
    }

    @IBOutlet dynamic var spacingBarItemSelectedTargets: [AnyObject]! {
        get { return Cache.spacingBarItemSelectedTargets }
        set {
            Cache.spacingBarItemSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfSpacingBarItemSelected)
            }
        }
    }

    @IBOutlet dynamic var animationBarItemNormalTargets: [AnyObject]! {
        get { return Cache.animationBarItemNormalTargets }
        set {
            Cache.animationBarItemNormalTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAnimationBarItemNormal)
            }
        }
    }

    @IBOutlet dynamic var animationBarItemSelectedTargets: [AnyObject]! {
        get { return Cache.animationBarItemSelectedTargets }
        set {
            Cache.animationBarItemSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAnimationBarItemSelected)
            }
        }
    }

    @IBOutlet dynamic var cameraButtonTargets: [AnyObject]! {
        get { return Cache.cameraButtonTargets }
        set {
            Cache.cameraButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfCameraButton)
            }
        }
    }

    @IBOutlet dynamic var addInEditorTargets: [AnyObject]! {
        get { return Cache.addInEditorTargets }
        set {
            Cache.addInEditorTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAddInEditor)
            }
        }
    }

    @IBOutlet dynamic var animationplayTargets: [AnyObject]! {
        get { return Cache.animationplayTargets }
        set {
            Cache.animationplayTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAnimationplay)
            }
        }
    }

    @IBOutlet dynamic var animationpauseTargets: [AnyObject]! {
        get { return Cache.animationpauseTargets }
        set {
            Cache.animationpauseTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfAnimationpause)
            }
        }
    }

    @IBOutlet dynamic var templatesNormalTargets: [AnyObject]! {
        get { return Cache.templatesNormalTargets }
        set {
            Cache.templatesNormalTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfTemplatesNormal)
            }
        }
    }

    @IBOutlet dynamic var templatesSelectedTargets: [AnyObject]! {
        get { return Cache.templatesSelectedTargets }
        set {
            Cache.templatesSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfTemplatesSelected)
            }
        }
    }

    @IBOutlet dynamic var filtersNormalTargets: [AnyObject]! {
        get { return Cache.filtersNormalTargets }
        set {
            Cache.filtersNormalTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfFiltersNormal)
            }
        }
    }

    @IBOutlet dynamic var filtersSelectedTargets: [AnyObject]! {
        get { return Cache.filtersSelectedTargets }
        set {
            Cache.filtersSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CTAStyleKit.imageOfFiltersSelected)
            }
        }
    }

}



extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
