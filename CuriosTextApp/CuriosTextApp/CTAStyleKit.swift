//
//  CTAStyleKit.swift
//  CuriosText
//
//  Created by Emiaostein on 3/9/16.
//  Copyright (c) 2016 com.botai. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class CTAStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let normalColor: UIColor = UIColor(red: 0.633, green: 0.633, blue: 0.633, alpha: 1.000)
        static let selectedColor: UIColor = UIColor(red: 0.937, green: 0.200, blue: 0.290, alpha: 1.000)
        static let red0: UIColor = UIColor(red: 0.592, green: 0.067, blue: 0.349, alpha: 1.000)
        static let red1: UIColor = UIColor(red: 0.596, green: 0.000, blue: 0.000, alpha: 1.000)
        static let red2: UIColor = UIColor(red: 0.792, green: 0.000, blue: 0.000, alpha: 1.000)
        static let red3: UIColor = UIColor(red: 0.898, green: 0.000, blue: 0.000, alpha: 1.000)
        static let red4: UIColor = UIColor(red: 0.898, green: 0.000, blue: 0.000, alpha: 1.000)
        static let red5: UIColor = UIColor(red: 0.898, green: 0.000, blue: 0.306, alpha: 1.000)
        static let red6: UIColor = UIColor(red: 0.788, green: 0.000, blue: 0.082, alpha: 1.000)
        static let red7: UIColor = UIColor(red: 1.000, green: 0.105, blue: 0.309, alpha: 1.000)
        static let red8: UIColor = UIColor(red: 1.000, green: 0.563, blue: 0.663, alpha: 1.000)
        static let yellow0: UIColor = UIColor(red: 0.898, green: 0.725, blue: 0.318, alpha: 1.000)
        static let yellow1: UIColor = UIColor(red: 0.745, green: 0.545, blue: 0.102, alpha: 1.000)
        static let yellow2: UIColor = UIColor(red: 0.698, green: 0.745, blue: 0.000, alpha: 1.000)
        static let yellow3: UIColor = UIColor(red: 0.875, green: 0.898, blue: 0.000, alpha: 1.000)
        static let yellow4: UIColor = UIColor(red: 0.878, green: 0.898, blue: 0.322, alpha: 1.000)
        static let yellow5: UIColor = UIColor(red: 0.631, green: 0.898, blue: 0.000, alpha: 1.000)
        static let yellow6: UIColor = UIColor(red: 0.306, green: 0.898, blue: 0.000, alpha: 1.000)
        static let yellow7: UIColor = UIColor(red: 0.958, green: 1.000, blue: 0.471, alpha: 1.000)
        static let yellow8: UIColor = UIColor(red: 0.985, green: 1.000, blue: 0.811, alpha: 1.000)
        static let blue0: UIColor = UIColor(red: 0.187, green: 0.006, blue: 0.507, alpha: 1.000)
        static let blue1: UIColor = UIColor(red: 0.184, green: 0.006, blue: 0.500, alpha: 1.000)
        static let blue2: UIColor = UIColor(red: 0.263, green: 0.000, blue: 0.729, alpha: 1.000)
        static let blue3: UIColor = UIColor(red: 0.086, green: 0.102, blue: 0.545, alpha: 1.000)
        static let blue4: UIColor = UIColor(red: 0.247, green: 0.000, blue: 0.898, alpha: 1.000)
        static let blue5: UIColor = UIColor(red: 0.161, green: 0.000, blue: 0.729, alpha: 1.000)
        static let blue6: UIColor = UIColor(red: 0.000, green: 0.322, blue: 0.729, alpha: 1.000)
        static let blue7: UIColor = UIColor(red: 0.075, green: 0.514, blue: 0.898, alpha: 1.000)
        static let blue8: UIColor = UIColor(red: 0.212, green: 0.722, blue: 0.898, alpha: 1.000)
        static let green0: UIColor = UIColor(red: 0.000, green: 0.380, blue: 0.188, alpha: 1.000)
        static let green1: UIColor = UIColor(red: 0.000, green: 0.576, blue: 0.043, alpha: 1.000)
        static let green2: UIColor = UIColor(red: 0.000, green: 0.757, blue: 0.373, alpha: 1.000)
        static let green3: UIColor = UIColor(red: 0.000, green: 0.761, blue: 0.055, alpha: 1.000)
        static let green4: UIColor = UIColor(red: 0.000, green: 0.898, blue: 0.098, alpha: 1.000)
        static let green5: UIColor = UIColor(red: 0.000, green: 0.557, blue: 0.549, alpha: 1.000)
        static let green6: UIColor = UIColor(red: 0.000, green: 0.898, blue: 0.549, alpha: 1.000)
        static let green7: UIColor = UIColor(red: 0.235, green: 0.573, blue: 0.229, alpha: 1.000)
        static let green8: UIColor = UIColor(red: 0.492, green: 0.800, blue: 0.487, alpha: 1.000)
        static let orange0: UIColor = UIColor(red: 0.792, green: 0.514, blue: 0.000, alpha: 1.000)
        static let orange1: UIColor = UIColor(red: 0.898, green: 0.583, blue: 0.000, alpha: 1.000)
        static let orange2: UIColor = UIColor(red: 0.898, green: 0.583, blue: 0.000, alpha: 1.000)
        static let orange3: UIColor = UIColor(red: 0.898, green: 0.583, blue: 0.000, alpha: 1.000)
        static let orange4: UIColor = UIColor(red: 1.000, green: 0.732, blue: 0.236, alpha: 1.000)
        static let orange5: UIColor = UIColor(red: 1.000, green: 0.792, blue: 0.406, alpha: 1.000)
        static let orange6: UIColor = UIColor(red: 1.000, green: 0.816, blue: 0.476, alpha: 1.000)
        static let orange7: UIColor = UIColor(red: 1.000, green: 0.890, blue: 0.686, alpha: 1.000)
        static let orange8: UIColor = UIColor(red: 1.000, green: 0.891, blue: 0.690, alpha: 1.000)
        static let indigo0: UIColor = UIColor(red: 0.635, green: 1.000, blue: 1.000, alpha: 1.000)
        static let indigo1: UIColor = UIColor(red: 0.436, green: 1.000, blue: 1.000, alpha: 1.000)
        static let indigo2: UIColor = UIColor(red: 0.388, green: 0.898, blue: 0.898, alpha: 1.000)
        static let indigo3: UIColor = UIColor(red: 0.000, green: 0.898, blue: 0.898, alpha: 1.000)
        static let indigo4: UIColor = UIColor(red: 0.000, green: 0.898, blue: 0.898, alpha: 1.000)
        static let indigo5: UIColor = UIColor(red: 0.000, green: 0.741, blue: 0.733, alpha: 1.000)
        static let indigo6: UIColor = UIColor(red: 0.000, green: 0.725, blue: 0.898, alpha: 1.000)
        static let indigo7: UIColor = UIColor(red: 0.000, green: 0.655, blue: 0.808, alpha: 1.000)
        static let indigo8: UIColor = UIColor(red: 0.000, green: 0.541, blue: 0.729, alpha: 1.000)
        static let purple0: UIColor = UIColor(red: 0.422, green: 0.196, blue: 0.490, alpha: 1.000)
        static let purple1: UIColor = UIColor(red: 0.420, green: 0.184, blue: 0.490, alpha: 1.000)
        static let purple2: UIColor = UIColor(red: 0.590, green: 0.424, blue: 0.640, alpha: 1.000)
        static let purple3: UIColor = UIColor(red: 0.656, green: 0.516, blue: 0.698, alpha: 1.000)
        static let purple4: UIColor = UIColor(red: 0.621, green: 0.467, blue: 0.667, alpha: 1.000)
        static let purple5: UIColor = UIColor(red: 0.651, green: 0.286, blue: 0.761, alpha: 1.000)
        static let purple6: UIColor = UIColor(red: 0.377, green: 0.000, blue: 0.490, alpha: 1.000)
        static let purple7: UIColor = UIColor(red: 0.527, green: 0.231, blue: 0.616, alpha: 1.000)
        static let purple8: UIColor = UIColor(red: 0.718, green: 0.603, blue: 0.752, alpha: 1.000)
        static let black0: UIColor = UIColor(red: 0.153, green: 0.153, blue: 0.153, alpha: 1.000)
        static let black1: UIColor = UIColor(red: 0.216, green: 0.216, blue: 0.216, alpha: 1.000)
        static let black2: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let black3: UIColor = UIColor(red: 0.149, green: 0.149, blue: 0.149, alpha: 1.000)
        static let black4: UIColor = UIColor(red: 0.294, green: 0.294, blue: 0.294, alpha: 1.000)
        static let black5: UIColor = UIColor(red: 0.447, green: 0.447, blue: 0.447, alpha: 1.000)
        static let black6: UIColor = UIColor(red: 0.600, green: 0.600, blue: 0.600, alpha: 1.000)
        static let black7: UIColor = UIColor(red: 0.749, green: 0.749, blue: 0.749, alpha: 1.000)
        static let black8: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let salamander0: UIColor = UIColor(red: 0.871, green: 0.804, blue: 0.000, alpha: 1.000)
        static let salamander1: UIColor = UIColor(red: 0.898, green: 0.424, blue: 0.000, alpha: 1.000)
        static let salamander2: UIColor = UIColor(red: 0.898, green: 0.616, blue: 0.000, alpha: 1.000)
        static let salamander3: UIColor = UIColor(red: 0.549, green: 0.376, blue: 0.094, alpha: 1.000)
        static let salamander4: UIColor = UIColor(red: 0.878, green: 0.000, blue: 0.416, alpha: 1.000)
        static let salamander5: UIColor = UIColor(red: 0.784, green: 0.859, blue: 0.745, alpha: 1.000)
        static let salamander6: UIColor = UIColor(red: 0.325, green: 0.722, blue: 0.227, alpha: 1.000)
        static let salamander7: UIColor = UIColor(red: 0.176, green: 0.122, blue: 0.471, alpha: 1.000)
        static let salamander8: UIColor = UIColor(red: 0.000, green: 0.655, blue: 0.796, alpha: 1.000)
        static let intoDreams0: UIColor = UIColor(red: 0.816, green: 0.682, blue: 0.784, alpha: 1.000)
        static let intoDreams1: UIColor = UIColor(red: 0.604, green: 0.000, blue: 0.518, alpha: 1.000)
        static let intoDreams2: UIColor = UIColor(red: 0.741, green: 0.353, blue: 0.565, alpha: 1.000)
        static let intoDreams3: UIColor = UIColor(red: 0.835, green: 0.000, blue: 0.000, alpha: 1.000)
        static let intoDreams4: UIColor = UIColor(red: 0.627, green: 0.102, blue: 0.012, alpha: 1.000)
        static let intoDreams5: UIColor = UIColor(red: 0.329, green: 0.298, blue: 0.314, alpha: 1.000)
        static let intoDreams6: UIColor = UIColor(red: 0.169, green: 0.129, blue: 0.153, alpha: 1.000)
        static let intoDreams7: UIColor = UIColor(red: 0.361, green: 0.588, blue: 0.220, alpha: 1.000)
        static let intoDreams8: UIColor = UIColor(red: 0.000, green: 0.255, blue: 0.192, alpha: 1.000)
        static let cynicide0: UIColor = UIColor(red: 0.722, green: 0.773, blue: 0.722, alpha: 1.000)
        static let cynicide1: UIColor = UIColor(red: 0.780, green: 0.682, blue: 0.635, alpha: 1.000)
        static let cynicide2: UIColor = UIColor(red: 0.369, green: 0.565, blue: 0.596, alpha: 1.000)
        static let cynicide3: UIColor = UIColor(red: 0.584, green: 0.580, blue: 0.463, alpha: 1.000)
        static let cynicide4: UIColor = UIColor(red: 0.263, green: 0.216, blue: 0.251, alpha: 1.000)
        static let cynicide5: UIColor = UIColor(red: 0.353, green: 0.400, blue: 0.498, alpha: 1.000)
        static let cynicide6: UIColor = UIColor(red: 0.525, green: 0.294, blue: 0.318, alpha: 1.000)
        static let cynicide7: UIColor = UIColor(red: 0.584, green: 0.659, blue: 0.804, alpha: 1.000)
        static let cynicide8: UIColor = UIColor(red: 0.847, green: 0.655, blue: 0.678, alpha: 1.000)
        static let birdsofParadise0: UIColor = UIColor(red: 0.796, green: 0.792, blue: 0.725, alpha: 1.000)
        static let birdsofParadise1: UIColor = UIColor(red: 0.898, green: 0.741, blue: 0.769, alpha: 1.000)
        static let birdsofParadise2: UIColor = UIColor(red: 0.835, green: 0.749, blue: 0.510, alpha: 1.000)
        static let birdsofParadise3: UIColor = UIColor(red: 0.400, green: 0.522, blue: 0.404, alpha: 1.000)
        static let birdsofParadise4: UIColor = UIColor(red: 0.725, green: 0.267, blue: 0.310, alpha: 1.000)
        static let birdsofParadise5: UIColor = UIColor(red: 0.506, green: 0.000, blue: 0.447, alpha: 1.000)
        static let birdsofParadise6: UIColor = UIColor(red: 0.149, green: 0.125, blue: 0.333, alpha: 1.000)
        static let birdsofParadise7: UIColor = UIColor(red: 0.404, green: 0.251, blue: 0.553, alpha: 1.000)
        static let birdsofParadise8: UIColor = UIColor(red: 0.122, green: 0.263, blue: 0.298, alpha: 1.000)
        static let brokenGlass0: UIColor = UIColor(red: 0.000, green: 0.698, blue: 0.694, alpha: 1.000)
        static let brokenGlass1: UIColor = UIColor(red: 0.235, green: 0.463, blue: 0.651, alpha: 1.000)
        static let brokenGlass2: UIColor = UIColor(red: 0.898, green: 0.616, blue: 0.082, alpha: 1.000)
        static let brokenGlass3: UIColor = UIColor(red: 0.545, green: 0.408, blue: 0.235, alpha: 1.000)
        static let brokenGlass4: UIColor = UIColor(red: 0.800, green: 0.227, blue: 0.000, alpha: 1.000)
        static let brokenGlass5: UIColor = UIColor(red: 0.722, green: 0.008, blue: 0.302, alpha: 1.000)
        static let brokenGlass6: UIColor = UIColor(red: 0.302, green: 0.000, blue: 0.157, alpha: 1.000)
        static let brokenGlass7: UIColor = UIColor(red: 0.600, green: 0.588, blue: 0.592, alpha: 1.000)
        static let brokenGlass8: UIColor = UIColor(red: 0.008, green: 0.008, blue: 0.008, alpha: 1.000)
        static let vintagePattern0: UIColor = UIColor(red: 0.898, green: 0.333, blue: 0.224, alpha: 1.000)
        static let vintagePattern1: UIColor = UIColor(red: 0.890, green: 0.847, blue: 0.518, alpha: 1.000)
        static let vintagePattern2: UIColor = UIColor(red: 0.153, green: 0.212, blue: 0.200, alpha: 1.000)
        static let vintagePattern3: UIColor = UIColor(red: 0.333, green: 0.733, blue: 0.588, alpha: 1.000)
        static let vintagePattern4: UIColor = UIColor(red: 0.514, green: 0.486, blue: 0.498, alpha: 1.000)
        static let vintagePattern5: UIColor = UIColor(red: 0.545, green: 0.796, blue: 0.859, alpha: 1.000)
        static let vintagePattern6: UIColor = UIColor(red: 0.898, green: 0.384, blue: 0.557, alpha: 1.000)
        static let vintagePattern7: UIColor = UIColor(red: 0.898, green: 0.631, blue: 0.416, alpha: 1.000)
        static let vintagePattern8: UIColor = UIColor(red: 0.867, green: 0.863, blue: 0.875, alpha: 1.000)
        static let sunset0: UIColor = UIColor(red: 0.000, green: 0.443, blue: 0.369, alpha: 1.000)
        static let sunset1: UIColor = UIColor(red: 0.275, green: 0.373, blue: 0.439, alpha: 1.000)
        static let sunset2: UIColor = UIColor(red: 0.000, green: 0.557, blue: 0.439, alpha: 1.000)
        static let sunset3: UIColor = UIColor(red: 0.278, green: 0.263, blue: 0.345, alpha: 1.000)
        static let sunset4: UIColor = UIColor(red: 0.898, green: 0.478, blue: 0.000, alpha: 1.000)
        static let sunset5: UIColor = UIColor(red: 0.749, green: 0.404, blue: 0.251, alpha: 1.000)
        static let sunset6: UIColor = UIColor(red: 0.898, green: 0.714, blue: 0.000, alpha: 1.000)
        static let sunset7: UIColor = UIColor(red: 0.753, green: 0.757, blue: 0.161, alpha: 1.000)
        static let sunset8: UIColor = UIColor(red: 0.867, green: 0.824, blue: 0.490, alpha: 1.000)
        static let rosanne0: UIColor = UIColor(red: 0.000, green: 0.165, blue: 0.239, alpha: 1.000)
        static let rosanne1: UIColor = UIColor(red: 0.702, green: 0.827, blue: 0.659, alpha: 1.000)
        static let rosanne2: UIColor = UIColor(red: 0.000, green: 0.612, blue: 0.631, alpha: 1.000)
        static let rosanne3: UIColor = UIColor(red: 0.443, green: 0.749, blue: 0.490, alpha: 1.000)
        static let rosanne4: UIColor = UIColor(red: 0.561, green: 0.671, blue: 0.686, alpha: 1.000)
        static let rosanne5: UIColor = UIColor(red: 0.898, green: 0.851, blue: 0.800, alpha: 1.000)
        static let rosanne6: UIColor = UIColor(red: 0.867, green: 0.365, blue: 0.404, alpha: 1.000)
        static let rosanne7: UIColor = UIColor(red: 0.898, green: 0.757, blue: 0.729, alpha: 1.000)
        static let rosanne8: UIColor = UIColor(red: 0.820, green: 0.000, blue: 0.298, alpha: 1.000)
        static let joyful0: UIColor = UIColor(red: 0.000, green: 0.439, blue: 0.616, alpha: 1.000)
        static let joyful1: UIColor = UIColor(red: 0.451, green: 0.694, blue: 0.812, alpha: 1.000)
        static let joyful2: UIColor = UIColor(red: 0.267, green: 0.153, blue: 0.486, alpha: 1.000)
        static let joyful3: UIColor = UIColor(red: 0.576, green: 0.525, blue: 0.702, alpha: 1.000)
        static let joyful4: UIColor = UIColor(red: 0.616, green: 0.000, blue: 0.278, alpha: 1.000)
        static let joyful5: UIColor = UIColor(red: 0.898, green: 0.545, blue: 0.486, alpha: 1.000)
        static let joyful6: UIColor = UIColor(red: 0.898, green: 0.067, blue: 0.000, alpha: 1.000)
        static let joyful7: UIColor = UIColor(red: 0.898, green: 0.780, blue: 0.416, alpha: 1.000)
        static let joyful8: UIColor = UIColor(red: 0.898, green: 0.678, blue: 0.000, alpha: 1.000)
        static let starSeeker0: UIColor = UIColor(red: 0.141, green: 0.086, blue: 0.310, alpha: 1.000)
        static let starSeeker1: UIColor = UIColor(red: 0.035, green: 0.286, blue: 0.306, alpha: 1.000)
        static let starSeeker2: UIColor = UIColor(red: 0.173, green: 0.102, blue: 0.373, alpha: 1.000)
        static let starSeeker3: UIColor = UIColor(red: 0.051, green: 0.341, blue: 0.376, alpha: 1.000)
        static let starSeeker4: UIColor = UIColor(red: 0.192, green: 0.114, blue: 0.443, alpha: 1.000)
        static let starSeeker5: UIColor = UIColor(red: 0.000, green: 0.404, blue: 0.439, alpha: 1.000)
        static let starSeeker6: UIColor = UIColor(red: 0.243, green: 0.188, blue: 0.553, alpha: 1.000)
        static let starSeeker7: UIColor = UIColor(red: 0.000, green: 0.506, blue: 0.549, alpha: 1.000)
        static let starSeeker8: UIColor = UIColor(red: 0.584, green: 0.545, blue: 0.733, alpha: 1.000)
        static let cloudyDay0: UIColor = UIColor(red: 0.153, green: 0.169, blue: 0.263, alpha: 1.000)
        static let cloudyDay1: UIColor = UIColor(red: 0.314, green: 0.243, blue: 0.157, alpha: 1.000)
        static let cloudyDay2: UIColor = UIColor(red: 0.373, green: 0.357, blue: 0.392, alpha: 1.000)
        static let cloudyDay3: UIColor = UIColor(red: 0.439, green: 0.435, blue: 0.376, alpha: 1.000)
        static let cloudyDay4: UIColor = UIColor(red: 0.616, green: 0.569, blue: 0.565, alpha: 1.000)
        static let cloudyDay5: UIColor = UIColor(red: 0.553, green: 0.655, blue: 0.616, alpha: 1.000)
        static let cloudyDay6: UIColor = UIColor(red: 0.796, green: 0.741, blue: 0.725, alpha: 1.000)
        static let cloudyDay7: UIColor = UIColor(red: 0.698, green: 0.831, blue: 0.820, alpha: 1.000)
        static let cloudyDay8: UIColor = UIColor(red: 0.878, green: 0.843, blue: 0.835, alpha: 1.000)
        static let monoPolygons0: UIColor = UIColor(red: 0.396, green: 0.169, blue: 0.439, alpha: 1.000)
        static let monoPolygons1: UIColor = UIColor(red: 0.435, green: 0.247, blue: 0.467, alpha: 1.000)
        static let monoPolygons2: UIColor = UIColor(red: 0.475, green: 0.314, blue: 0.498, alpha: 1.000)
        static let monoPolygons3: UIColor = UIColor(red: 0.518, green: 0.373, blue: 0.533, alpha: 1.000)
        static let monoPolygons4: UIColor = UIColor(red: 0.569, green: 0.443, blue: 0.569, alpha: 1.000)
        static let monoPolygons5: UIColor = UIColor(red: 0.620, green: 0.514, blue: 0.612, alpha: 1.000)
        static let monoPolygons6: UIColor = UIColor(red: 0.675, green: 0.600, blue: 0.655, alpha: 1.000)
        static let monoPolygons7: UIColor = UIColor(red: 0.737, green: 0.686, blue: 0.710, alpha: 1.000)
        static let monoPolygons8: UIColor = UIColor(red: 0.808, green: 0.784, blue: 0.761, alpha: 1.000)
        static var imageOfAlignmentRightSelected: UIImage?
        static var alignmentRightSelectedTargets: [AnyObject]?
        static var imageOfAlignmentRightNormal: UIImage?
        static var alignmentRightNormalTargets: [AnyObject]?
        static var imageOfAlignmentLeftSelected: UIImage?
        static var alignmentLeftSelectedTargets: [AnyObject]?
        static var imageOfAlignmentLeftNormal: UIImage?
        static var alignmentLeftNormalTargets: [AnyObject]?
        static var imageOfAlignmentCenterSelected: UIImage?
        static var alignmentCenterSelectedTargets: [AnyObject]?
        static var imageOfAlignmentCenterNormal: UIImage?
        static var alignmentCenterNormalTargets: [AnyObject]?
        static var imageOfAlignmentJustNormal: UIImage?
        static var alignmentJustNormalTargets: [AnyObject]?
        static var imageOfAlignmentJustSelected: UIImage?
        static var alignmentJustSelectedTargets: [AnyObject]?
        static var imageOfLineSpacingNormal: UIImage?
        static var lineSpacingNormalTargets: [AnyObject]?
        static var imageOfLineSpacingSelected: UIImage?
        static var lineSpacingSelectedTargets: [AnyObject]?
        static var imageOfTextSpacingSelected: UIImage?
        static var textSpacingSelectedTargets: [AnyObject]?
        static var imageOfTextSpacingNormal: UIImage?
        static var textSpacingNormalTargets: [AnyObject]?
        static var imageOfAdd: UIImage?
        static var addTargets: [AnyObject]?
        static var imageOfNode: UIImage?
        static var nodeTargets: [AnyObject]?
        static var imageOfFontBarItemNormal: UIImage?
        static var fontBarItemNormalTargets: [AnyObject]?
        static var imageOfFontBarItemSelected: UIImage?
        static var fontBarItemSelectedTargets: [AnyObject]?
        static var imageOfSizeBarItemNormal: UIImage?
        static var sizeBarItemNormalTargets: [AnyObject]?
        static var imageOfSizeBarItemSelected: UIImage?
        static var sizeBarItemSelectedTargets: [AnyObject]?
        static var imageOfColorBarItemSelected: UIImage?
        static var colorBarItemSelectedTargets: [AnyObject]?
        static var imageOfColorBarItemNormal: UIImage?
        static var colorBarItemNormalTargets: [AnyObject]?
        static var imageOfRotationBarItemSelected: UIImage?
        static var rotationBarItemSelectedTargets: [AnyObject]?
        static var imageOfRotationBarItemNormal: UIImage?
        static var rotationBarItemNormalTargets: [AnyObject]?
        static var imageOfAlignmentBarItemNormal: UIImage?
        static var alignmentBarItemNormalTargets: [AnyObject]?
        static var imageOfAlignmentBarItemSelected: UIImage?
        static var alignmentBarItemSelectedTargets: [AnyObject]?
        static var imageOfSpacingBarItemNormal: UIImage?
        static var spacingBarItemNormalTargets: [AnyObject]?
        static var imageOfSpacingBarItemSelected: UIImage?
        static var spacingBarItemSelectedTargets: [AnyObject]?
        static var imageOfAnimationBarItemNormal: UIImage?
        static var animationBarItemNormalTargets: [AnyObject]?
        static var imageOfAnimationBarItemSelected: UIImage?
        static var animationBarItemSelectedTargets: [AnyObject]?
        static var imageOfCameraButton: UIImage?
        static var cameraButtonTargets: [AnyObject]?
        static var imageOfAddInEditor: UIImage?
        static var addInEditorTargets: [AnyObject]?
    }

    //// Colors

    public class var normalColor: UIColor { return Cache.normalColor }
    public class var selectedColor: UIColor { return Cache.selectedColor }
    public class var red0: UIColor { return Cache.red0 }
    public class var red1: UIColor { return Cache.red1 }
    public class var red2: UIColor { return Cache.red2 }
    public class var red3: UIColor { return Cache.red3 }
    public class var red4: UIColor { return Cache.red4 }
    public class var red5: UIColor { return Cache.red5 }
    public class var red6: UIColor { return Cache.red6 }
    public class var red7: UIColor { return Cache.red7 }
    public class var red8: UIColor { return Cache.red8 }
    public class var yellow0: UIColor { return Cache.yellow0 }
    public class var yellow1: UIColor { return Cache.yellow1 }
    public class var yellow2: UIColor { return Cache.yellow2 }
    public class var yellow3: UIColor { return Cache.yellow3 }
    public class var yellow4: UIColor { return Cache.yellow4 }
    public class var yellow5: UIColor { return Cache.yellow5 }
    public class var yellow6: UIColor { return Cache.yellow6 }
    public class var yellow7: UIColor { return Cache.yellow7 }
    public class var yellow8: UIColor { return Cache.yellow8 }
    public class var blue0: UIColor { return Cache.blue0 }
    public class var blue1: UIColor { return Cache.blue1 }
    public class var blue2: UIColor { return Cache.blue2 }
    public class var blue3: UIColor { return Cache.blue3 }
    public class var blue4: UIColor { return Cache.blue4 }
    public class var blue5: UIColor { return Cache.blue5 }
    public class var blue6: UIColor { return Cache.blue6 }
    public class var blue7: UIColor { return Cache.blue7 }
    public class var blue8: UIColor { return Cache.blue8 }
    public class var green0: UIColor { return Cache.green0 }
    public class var green1: UIColor { return Cache.green1 }
    public class var green2: UIColor { return Cache.green2 }
    public class var green3: UIColor { return Cache.green3 }
    public class var green4: UIColor { return Cache.green4 }
    public class var green5: UIColor { return Cache.green5 }
    public class var green6: UIColor { return Cache.green6 }
    public class var green7: UIColor { return Cache.green7 }
    public class var green8: UIColor { return Cache.green8 }
    public class var orange0: UIColor { return Cache.orange0 }
    public class var orange1: UIColor { return Cache.orange1 }
    public class var orange2: UIColor { return Cache.orange2 }
    public class var orange3: UIColor { return Cache.orange3 }
    public class var orange4: UIColor { return Cache.orange4 }
    public class var orange5: UIColor { return Cache.orange5 }
    public class var orange6: UIColor { return Cache.orange6 }
    public class var orange7: UIColor { return Cache.orange7 }
    public class var orange8: UIColor { return Cache.orange8 }
    public class var indigo0: UIColor { return Cache.indigo0 }
    public class var indigo1: UIColor { return Cache.indigo1 }
    public class var indigo2: UIColor { return Cache.indigo2 }
    public class var indigo3: UIColor { return Cache.indigo3 }
    public class var indigo4: UIColor { return Cache.indigo4 }
    public class var indigo5: UIColor { return Cache.indigo5 }
    public class var indigo6: UIColor { return Cache.indigo6 }
    public class var indigo7: UIColor { return Cache.indigo7 }
    public class var indigo8: UIColor { return Cache.indigo8 }
    public class var purple0: UIColor { return Cache.purple0 }
    public class var purple1: UIColor { return Cache.purple1 }
    public class var purple2: UIColor { return Cache.purple2 }
    public class var purple3: UIColor { return Cache.purple3 }
    public class var purple4: UIColor { return Cache.purple4 }
    public class var purple5: UIColor { return Cache.purple5 }
    public class var purple6: UIColor { return Cache.purple6 }
    public class var purple7: UIColor { return Cache.purple7 }
    public class var purple8: UIColor { return Cache.purple8 }
    public class var black0: UIColor { return Cache.black0 }
    public class var black1: UIColor { return Cache.black1 }
    public class var black2: UIColor { return Cache.black2 }
    public class var black3: UIColor { return Cache.black3 }
    public class var black4: UIColor { return Cache.black4 }
    public class var black5: UIColor { return Cache.black5 }
    public class var black6: UIColor { return Cache.black6 }
    public class var black7: UIColor { return Cache.black7 }
    public class var black8: UIColor { return Cache.black8 }
    public class var salamander0: UIColor { return Cache.salamander0 }
    public class var salamander1: UIColor { return Cache.salamander1 }
    public class var salamander2: UIColor { return Cache.salamander2 }
    public class var salamander3: UIColor { return Cache.salamander3 }
    public class var salamander4: UIColor { return Cache.salamander4 }
    public class var salamander5: UIColor { return Cache.salamander5 }
    public class var salamander6: UIColor { return Cache.salamander6 }
    public class var salamander7: UIColor { return Cache.salamander7 }
    public class var salamander8: UIColor { return Cache.salamander8 }
    public class var intoDreams0: UIColor { return Cache.intoDreams0 }
    public class var intoDreams1: UIColor { return Cache.intoDreams1 }
    public class var intoDreams2: UIColor { return Cache.intoDreams2 }
    public class var intoDreams3: UIColor { return Cache.intoDreams3 }
    public class var intoDreams4: UIColor { return Cache.intoDreams4 }
    public class var intoDreams5: UIColor { return Cache.intoDreams5 }
    public class var intoDreams6: UIColor { return Cache.intoDreams6 }
    public class var intoDreams7: UIColor { return Cache.intoDreams7 }
    public class var intoDreams8: UIColor { return Cache.intoDreams8 }
    public class var cynicide0: UIColor { return Cache.cynicide0 }
    public class var cynicide1: UIColor { return Cache.cynicide1 }
    public class var cynicide2: UIColor { return Cache.cynicide2 }
    public class var cynicide3: UIColor { return Cache.cynicide3 }
    public class var cynicide4: UIColor { return Cache.cynicide4 }
    public class var cynicide5: UIColor { return Cache.cynicide5 }
    public class var cynicide6: UIColor { return Cache.cynicide6 }
    public class var cynicide7: UIColor { return Cache.cynicide7 }
    public class var cynicide8: UIColor { return Cache.cynicide8 }
    public class var birdsofParadise0: UIColor { return Cache.birdsofParadise0 }
    public class var birdsofParadise1: UIColor { return Cache.birdsofParadise1 }
    public class var birdsofParadise2: UIColor { return Cache.birdsofParadise2 }
    public class var birdsofParadise3: UIColor { return Cache.birdsofParadise3 }
    public class var birdsofParadise4: UIColor { return Cache.birdsofParadise4 }
    public class var birdsofParadise5: UIColor { return Cache.birdsofParadise5 }
    public class var birdsofParadise6: UIColor { return Cache.birdsofParadise6 }
    public class var birdsofParadise7: UIColor { return Cache.birdsofParadise7 }
    public class var birdsofParadise8: UIColor { return Cache.birdsofParadise8 }
    public class var brokenGlass0: UIColor { return Cache.brokenGlass0 }
    public class var brokenGlass1: UIColor { return Cache.brokenGlass1 }
    public class var brokenGlass2: UIColor { return Cache.brokenGlass2 }
    public class var brokenGlass3: UIColor { return Cache.brokenGlass3 }
    public class var brokenGlass4: UIColor { return Cache.brokenGlass4 }
    public class var brokenGlass5: UIColor { return Cache.brokenGlass5 }
    public class var brokenGlass6: UIColor { return Cache.brokenGlass6 }
    public class var brokenGlass7: UIColor { return Cache.brokenGlass7 }
    public class var brokenGlass8: UIColor { return Cache.brokenGlass8 }
    public class var vintagePattern0: UIColor { return Cache.vintagePattern0 }
    public class var vintagePattern1: UIColor { return Cache.vintagePattern1 }
    public class var vintagePattern2: UIColor { return Cache.vintagePattern2 }
    public class var vintagePattern3: UIColor { return Cache.vintagePattern3 }
    public class var vintagePattern4: UIColor { return Cache.vintagePattern4 }
    public class var vintagePattern5: UIColor { return Cache.vintagePattern5 }
    public class var vintagePattern6: UIColor { return Cache.vintagePattern6 }
    public class var vintagePattern7: UIColor { return Cache.vintagePattern7 }
    public class var vintagePattern8: UIColor { return Cache.vintagePattern8 }
    public class var sunset0: UIColor { return Cache.sunset0 }
    public class var sunset1: UIColor { return Cache.sunset1 }
    public class var sunset2: UIColor { return Cache.sunset2 }
    public class var sunset3: UIColor { return Cache.sunset3 }
    public class var sunset4: UIColor { return Cache.sunset4 }
    public class var sunset5: UIColor { return Cache.sunset5 }
    public class var sunset6: UIColor { return Cache.sunset6 }
    public class var sunset7: UIColor { return Cache.sunset7 }
    public class var sunset8: UIColor { return Cache.sunset8 }
    public class var rosanne0: UIColor { return Cache.rosanne0 }
    public class var rosanne1: UIColor { return Cache.rosanne1 }
    public class var rosanne2: UIColor { return Cache.rosanne2 }
    public class var rosanne3: UIColor { return Cache.rosanne3 }
    public class var rosanne4: UIColor { return Cache.rosanne4 }
    public class var rosanne5: UIColor { return Cache.rosanne5 }
    public class var rosanne6: UIColor { return Cache.rosanne6 }
    public class var rosanne7: UIColor { return Cache.rosanne7 }
    public class var rosanne8: UIColor { return Cache.rosanne8 }
    public class var joyful0: UIColor { return Cache.joyful0 }
    public class var joyful1: UIColor { return Cache.joyful1 }
    public class var joyful2: UIColor { return Cache.joyful2 }
    public class var joyful3: UIColor { return Cache.joyful3 }
    public class var joyful4: UIColor { return Cache.joyful4 }
    public class var joyful5: UIColor { return Cache.joyful5 }
    public class var joyful6: UIColor { return Cache.joyful6 }
    public class var joyful7: UIColor { return Cache.joyful7 }
    public class var joyful8: UIColor { return Cache.joyful8 }
    public class var starSeeker0: UIColor { return Cache.starSeeker0 }
    public class var starSeeker1: UIColor { return Cache.starSeeker1 }
    public class var starSeeker2: UIColor { return Cache.starSeeker2 }
    public class var starSeeker3: UIColor { return Cache.starSeeker3 }
    public class var starSeeker4: UIColor { return Cache.starSeeker4 }
    public class var starSeeker5: UIColor { return Cache.starSeeker5 }
    public class var starSeeker6: UIColor { return Cache.starSeeker6 }
    public class var starSeeker7: UIColor { return Cache.starSeeker7 }
    public class var starSeeker8: UIColor { return Cache.starSeeker8 }
    public class var cloudyDay0: UIColor { return Cache.cloudyDay0 }
    public class var cloudyDay1: UIColor { return Cache.cloudyDay1 }
    public class var cloudyDay2: UIColor { return Cache.cloudyDay2 }
    public class var cloudyDay3: UIColor { return Cache.cloudyDay3 }
    public class var cloudyDay4: UIColor { return Cache.cloudyDay4 }
    public class var cloudyDay5: UIColor { return Cache.cloudyDay5 }
    public class var cloudyDay6: UIColor { return Cache.cloudyDay6 }
    public class var cloudyDay7: UIColor { return Cache.cloudyDay7 }
    public class var cloudyDay8: UIColor { return Cache.cloudyDay8 }
    public class var monoPolygons0: UIColor { return Cache.monoPolygons0 }
    public class var monoPolygons1: UIColor { return Cache.monoPolygons1 }
    public class var monoPolygons2: UIColor { return Cache.monoPolygons2 }
    public class var monoPolygons3: UIColor { return Cache.monoPolygons3 }
    public class var monoPolygons4: UIColor { return Cache.monoPolygons4 }
    public class var monoPolygons5: UIColor { return Cache.monoPolygons5 }
    public class var monoPolygons6: UIColor { return Cache.monoPolygons6 }
    public class var monoPolygons7: UIColor { return Cache.monoPolygons7 }
    public class var monoPolygons8: UIColor { return Cache.monoPolygons8 }

    //// Drawing Methods

    public class func drawAlignmentRightSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(0, 0))
        bezierPath.addLineToPoint(CGPointMake(30, 0))
        bezierPath.addLineToPoint(CGPointMake(30, 3.36))
        bezierPath.addLineToPoint(CGPointMake(0, 3.36))
        bezierPath.addLineToPoint(CGPointMake(0, 0))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(10, 10))
        bezierPath.addLineToPoint(CGPointMake(10, 6.64))
        bezierPath.addLineToPoint(CGPointMake(30, 6.64))
        bezierPath.addLineToPoint(CGPointMake(30, 10))
        bezierPath.addLineToPoint(CGPointMake(10, 10))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 16.64))
        bezierPath.addLineToPoint(CGPointMake(0, 13.36))
        bezierPath.addLineToPoint(CGPointMake(30, 13.36))
        bezierPath.addLineToPoint(CGPointMake(30, 16.64))
        bezierPath.addLineToPoint(CGPointMake(0, 16.64))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(10, 23.36))
        bezierPath.addLineToPoint(CGPointMake(10, 20))
        bezierPath.addLineToPoint(CGPointMake(30, 20))
        bezierPath.addLineToPoint(CGPointMake(30, 23.36))
        bezierPath.addLineToPoint(CGPointMake(10, 23.36))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 30))
        bezierPath.addLineToPoint(CGPointMake(0, 26.64))
        bezierPath.addLineToPoint(CGPointMake(30, 26.64))
        bezierPath.addLineToPoint(CGPointMake(30, 30))
        bezierPath.addLineToPoint(CGPointMake(0, 30))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    public class func drawAlignmentRightNormal() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(0, 0))
        bezierPath.addLineToPoint(CGPointMake(30, 0))
        bezierPath.addLineToPoint(CGPointMake(30, 3.36))
        bezierPath.addLineToPoint(CGPointMake(0, 3.36))
        bezierPath.addLineToPoint(CGPointMake(0, 0))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(10, 10))
        bezierPath.addLineToPoint(CGPointMake(10, 6.64))
        bezierPath.addLineToPoint(CGPointMake(30, 6.64))
        bezierPath.addLineToPoint(CGPointMake(30, 10))
        bezierPath.addLineToPoint(CGPointMake(10, 10))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 16.64))
        bezierPath.addLineToPoint(CGPointMake(0, 13.36))
        bezierPath.addLineToPoint(CGPointMake(30, 13.36))
        bezierPath.addLineToPoint(CGPointMake(30, 16.64))
        bezierPath.addLineToPoint(CGPointMake(0, 16.64))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(10, 23.36))
        bezierPath.addLineToPoint(CGPointMake(10, 20))
        bezierPath.addLineToPoint(CGPointMake(30, 20))
        bezierPath.addLineToPoint(CGPointMake(30, 23.36))
        bezierPath.addLineToPoint(CGPointMake(10, 23.36))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 30))
        bezierPath.addLineToPoint(CGPointMake(0, 26.64))
        bezierPath.addLineToPoint(CGPointMake(30, 26.64))
        bezierPath.addLineToPoint(CGPointMake(30, 30))
        bezierPath.addLineToPoint(CGPointMake(0, 30))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        CTAStyleKit.normalColor.setFill()
        bezierPath.fill()
    }

    public class func drawAlignmentLeftSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(0, 0))
        bezierPath.addLineToPoint(CGPointMake(30, 0))
        bezierPath.addLineToPoint(CGPointMake(30, 3.36))
        bezierPath.addLineToPoint(CGPointMake(0, 3.36))
        bezierPath.addLineToPoint(CGPointMake(0, 0))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 30))
        bezierPath.addLineToPoint(CGPointMake(0, 26.64))
        bezierPath.addLineToPoint(CGPointMake(30, 26.64))
        bezierPath.addLineToPoint(CGPointMake(30, 30))
        bezierPath.addLineToPoint(CGPointMake(0, 30))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 16.64))
        bezierPath.addLineToPoint(CGPointMake(0, 13.36))
        bezierPath.addLineToPoint(CGPointMake(30, 13.36))
        bezierPath.addLineToPoint(CGPointMake(30, 16.64))
        bezierPath.addLineToPoint(CGPointMake(0, 16.64))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(20, 6.64))
        bezierPath.addLineToPoint(CGPointMake(20, 10))
        bezierPath.addLineToPoint(CGPointMake(0, 10))
        bezierPath.addLineToPoint(CGPointMake(0, 6.64))
        bezierPath.addLineToPoint(CGPointMake(20, 6.64))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(20, 20))
        bezierPath.addLineToPoint(CGPointMake(20, 23.36))
        bezierPath.addLineToPoint(CGPointMake(0, 23.36))
        bezierPath.addLineToPoint(CGPointMake(0, 20))
        bezierPath.addLineToPoint(CGPointMake(20, 20))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    public class func drawAlignmentLeftNormal() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(0, 0))
        bezierPath.addLineToPoint(CGPointMake(30, 0))
        bezierPath.addLineToPoint(CGPointMake(30, 3.36))
        bezierPath.addLineToPoint(CGPointMake(0, 3.36))
        bezierPath.addLineToPoint(CGPointMake(0, 0))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 30))
        bezierPath.addLineToPoint(CGPointMake(0, 26.64))
        bezierPath.addLineToPoint(CGPointMake(30, 26.64))
        bezierPath.addLineToPoint(CGPointMake(30, 30))
        bezierPath.addLineToPoint(CGPointMake(0, 30))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 16.64))
        bezierPath.addLineToPoint(CGPointMake(0, 13.36))
        bezierPath.addLineToPoint(CGPointMake(30, 13.36))
        bezierPath.addLineToPoint(CGPointMake(30, 16.64))
        bezierPath.addLineToPoint(CGPointMake(0, 16.64))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(20, 6.64))
        bezierPath.addLineToPoint(CGPointMake(20, 10))
        bezierPath.addLineToPoint(CGPointMake(0, 10))
        bezierPath.addLineToPoint(CGPointMake(0, 6.64))
        bezierPath.addLineToPoint(CGPointMake(20, 6.64))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(20, 20))
        bezierPath.addLineToPoint(CGPointMake(20, 23.36))
        bezierPath.addLineToPoint(CGPointMake(0, 23.36))
        bezierPath.addLineToPoint(CGPointMake(0, 20))
        bezierPath.addLineToPoint(CGPointMake(20, 20))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        CTAStyleKit.normalColor.setFill()
        bezierPath.fill()
    }

    public class func drawAlignmentCenterSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(0, 0))
        bezierPath.addLineToPoint(CGPointMake(30, 0))
        bezierPath.addLineToPoint(CGPointMake(30, 3.36))
        bezierPath.addLineToPoint(CGPointMake(0, 3.36))
        bezierPath.addLineToPoint(CGPointMake(0, 0))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(6.64, 6.64))
        bezierPath.addLineToPoint(CGPointMake(23.36, 6.64))
        bezierPath.addLineToPoint(CGPointMake(23.36, 10))
        bezierPath.addLineToPoint(CGPointMake(6.64, 10))
        bezierPath.addLineToPoint(CGPointMake(6.64, 6.64))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 16.64))
        bezierPath.addLineToPoint(CGPointMake(0, 13.36))
        bezierPath.addLineToPoint(CGPointMake(30, 13.36))
        bezierPath.addLineToPoint(CGPointMake(30, 16.64))
        bezierPath.addLineToPoint(CGPointMake(0, 16.64))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 30))
        bezierPath.addLineToPoint(CGPointMake(0, 26.64))
        bezierPath.addLineToPoint(CGPointMake(30, 26.64))
        bezierPath.addLineToPoint(CGPointMake(30, 30))
        bezierPath.addLineToPoint(CGPointMake(0, 30))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(6.64, 20))
        bezierPath.addLineToPoint(CGPointMake(23.36, 20))
        bezierPath.addLineToPoint(CGPointMake(23.36, 23.36))
        bezierPath.addLineToPoint(CGPointMake(6.64, 23.36))
        bezierPath.addLineToPoint(CGPointMake(6.64, 20))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    public class func drawAlignmentCenterNormal() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(0, 0))
        bezierPath.addLineToPoint(CGPointMake(30, 0))
        bezierPath.addLineToPoint(CGPointMake(30, 3.36))
        bezierPath.addLineToPoint(CGPointMake(0, 3.36))
        bezierPath.addLineToPoint(CGPointMake(0, 0))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(6.64, 6.64))
        bezierPath.addLineToPoint(CGPointMake(23.36, 6.64))
        bezierPath.addLineToPoint(CGPointMake(23.36, 10))
        bezierPath.addLineToPoint(CGPointMake(6.64, 10))
        bezierPath.addLineToPoint(CGPointMake(6.64, 6.64))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 16.64))
        bezierPath.addLineToPoint(CGPointMake(0, 13.36))
        bezierPath.addLineToPoint(CGPointMake(30, 13.36))
        bezierPath.addLineToPoint(CGPointMake(30, 16.64))
        bezierPath.addLineToPoint(CGPointMake(0, 16.64))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 30))
        bezierPath.addLineToPoint(CGPointMake(0, 26.64))
        bezierPath.addLineToPoint(CGPointMake(30, 26.64))
        bezierPath.addLineToPoint(CGPointMake(30, 30))
        bezierPath.addLineToPoint(CGPointMake(0, 30))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(6.64, 20))
        bezierPath.addLineToPoint(CGPointMake(23.36, 20))
        bezierPath.addLineToPoint(CGPointMake(23.36, 23.36))
        bezierPath.addLineToPoint(CGPointMake(6.64, 23.36))
        bezierPath.addLineToPoint(CGPointMake(6.64, 20))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        CTAStyleKit.normalColor.setFill()
        bezierPath.fill()
    }

    public class func drawAlignmentJustNormal() {

        //// alignment-Just-Normal Drawing
        let alignmentJustNormalPath = UIBezierPath()
        alignmentJustNormalPath.moveToPoint(CGPointMake(0, 0))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(30, 0))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(30, 3.36))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(0, 3.36))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(0, 0))
        alignmentJustNormalPath.closePath()
        alignmentJustNormalPath.moveToPoint(CGPointMake(0, 10))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(0, 6.64))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(30, 6.64))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(30, 10))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(0, 10))
        alignmentJustNormalPath.closePath()
        alignmentJustNormalPath.moveToPoint(CGPointMake(0, 16.64))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(0, 13.36))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(30, 13.36))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(30, 16.64))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(0, 16.64))
        alignmentJustNormalPath.closePath()
        alignmentJustNormalPath.moveToPoint(CGPointMake(0, 23.36))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(0, 20))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(30, 20))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(30, 23.36))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(0, 23.36))
        alignmentJustNormalPath.closePath()
        alignmentJustNormalPath.moveToPoint(CGPointMake(0, 30))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(0, 26.64))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(30, 26.64))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(30, 30))
        alignmentJustNormalPath.addLineToPoint(CGPointMake(0, 30))
        alignmentJustNormalPath.closePath()
        alignmentJustNormalPath.miterLimit = 4;

        CTAStyleKit.normalColor.setFill()
        alignmentJustNormalPath.fill()
    }

    public class func drawAlignmentJustSelected() {

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(0, 0))
        bezier2Path.addLineToPoint(CGPointMake(30, 0))
        bezier2Path.addLineToPoint(CGPointMake(30, 3.36))
        bezier2Path.addLineToPoint(CGPointMake(0, 3.36))
        bezier2Path.addLineToPoint(CGPointMake(0, 0))
        bezier2Path.closePath()
        bezier2Path.moveToPoint(CGPointMake(0, 10))
        bezier2Path.addLineToPoint(CGPointMake(0, 6.64))
        bezier2Path.addLineToPoint(CGPointMake(30, 6.64))
        bezier2Path.addLineToPoint(CGPointMake(30, 10))
        bezier2Path.addLineToPoint(CGPointMake(0, 10))
        bezier2Path.closePath()
        bezier2Path.moveToPoint(CGPointMake(0, 16.64))
        bezier2Path.addLineToPoint(CGPointMake(0, 13.36))
        bezier2Path.addLineToPoint(CGPointMake(30, 13.36))
        bezier2Path.addLineToPoint(CGPointMake(30, 16.64))
        bezier2Path.addLineToPoint(CGPointMake(0, 16.64))
        bezier2Path.closePath()
        bezier2Path.moveToPoint(CGPointMake(0, 23.36))
        bezier2Path.addLineToPoint(CGPointMake(0, 20))
        bezier2Path.addLineToPoint(CGPointMake(30, 20))
        bezier2Path.addLineToPoint(CGPointMake(30, 23.36))
        bezier2Path.addLineToPoint(CGPointMake(0, 23.36))
        bezier2Path.closePath()
        bezier2Path.moveToPoint(CGPointMake(0, 30))
        bezier2Path.addLineToPoint(CGPointMake(0, 26.64))
        bezier2Path.addLineToPoint(CGPointMake(30, 26.64))
        bezier2Path.addLineToPoint(CGPointMake(30, 30))
        bezier2Path.addLineToPoint(CGPointMake(0, 30))
        bezier2Path.closePath()
        bezier2Path.miterLimit = 4;

        CTAStyleKit.selectedColor.setFill()
        bezier2Path.fill()
    }

    public class func drawLineSpacingNormal() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(18.27, 5.33))
        bezierPath.addCurveToPoint(CGPointMake(19.65, 5.36), controlPoint1: CGPointMake(18.72, 5.8), controlPoint2: CGPointMake(19.18, 5.81))
        bezierPath.addCurveToPoint(CGPointMake(19.62, 4.04), controlPoint1: CGPointMake(20.13, 4.91), controlPoint2: CGPointMake(20.12, 4.47))
        bezierPath.addLineToPoint(CGPointMake(15.68, 0.29))
        bezierPath.addCurveToPoint(CGPointMake(15.37, 0.06), controlPoint1: CGPointMake(15.6, 0.18), controlPoint2: CGPointMake(15.49, 0.1))
        bezierPath.addCurveToPoint(CGPointMake(14.63, 0.06), controlPoint1: CGPointMake(15.12, -0.02), controlPoint2: CGPointMake(14.88, -0.02))
        bezierPath.addCurveToPoint(CGPointMake(14.32, 0.29), controlPoint1: CGPointMake(14.51, 0.1), controlPoint2: CGPointMake(14.4, 0.18))
        bezierPath.addLineToPoint(CGPointMake(10.38, 4.04))
        bezierPath.addCurveToPoint(CGPointMake(10.35, 5.36), controlPoint1: CGPointMake(9.88, 4.47), controlPoint2: CGPointMake(9.87, 4.91))
        bezierPath.addCurveToPoint(CGPointMake(11.73, 5.33), controlPoint1: CGPointMake(10.82, 5.81), controlPoint2: CGPointMake(11.28, 5.8))
        bezierPath.addLineToPoint(CGPointMake(14.01, 3.22))
        bezierPath.addLineToPoint(CGPointMake(14.01, 26.78))
        bezierPath.addLineToPoint(CGPointMake(11.73, 24.67))
        bezierPath.addCurveToPoint(CGPointMake(10.35, 24.64), controlPoint1: CGPointMake(11.28, 24.2), controlPoint2: CGPointMake(10.82, 24.19))
        bezierPath.addCurveToPoint(CGPointMake(10.38, 25.96), controlPoint1: CGPointMake(9.87, 25.09), controlPoint2: CGPointMake(9.88, 25.53))
        bezierPath.addLineToPoint(CGPointMake(14.32, 29.71))
        bezierPath.addCurveToPoint(CGPointMake(14.63, 29.94), controlPoint1: CGPointMake(14.4, 29.82), controlPoint2: CGPointMake(14.51, 29.9))
        bezierPath.addCurveToPoint(CGPointMake(15.37, 29.94), controlPoint1: CGPointMake(14.88, 30.02), controlPoint2: CGPointMake(15.12, 30.02))
        bezierPath.addCurveToPoint(CGPointMake(15.68, 29.71), controlPoint1: CGPointMake(15.49, 29.9), controlPoint2: CGPointMake(15.6, 29.82))
        bezierPath.addLineToPoint(CGPointMake(19.62, 25.96))
        bezierPath.addCurveToPoint(CGPointMake(19.65, 24.64), controlPoint1: CGPointMake(20.12, 25.53), controlPoint2: CGPointMake(20.13, 25.09))
        bezierPath.addCurveToPoint(CGPointMake(18.27, 24.67), controlPoint1: CGPointMake(19.18, 24.19), controlPoint2: CGPointMake(18.72, 24.2))
        bezierPath.addLineToPoint(CGPointMake(15.99, 26.78))
        bezierPath.addLineToPoint(CGPointMake(15.99, 3.22))
        bezierPath.addLineToPoint(CGPointMake(18.27, 5.33))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        CTAStyleKit.normalColor.setFill()
        bezierPath.fill()
    }

    public class func drawLineSpacingSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(18.27, 5.33))
        bezierPath.addCurveToPoint(CGPointMake(19.65, 5.36), controlPoint1: CGPointMake(18.72, 5.8), controlPoint2: CGPointMake(19.18, 5.81))
        bezierPath.addCurveToPoint(CGPointMake(19.62, 4.04), controlPoint1: CGPointMake(20.13, 4.91), controlPoint2: CGPointMake(20.12, 4.47))
        bezierPath.addLineToPoint(CGPointMake(15.68, 0.29))
        bezierPath.addCurveToPoint(CGPointMake(15.37, 0.06), controlPoint1: CGPointMake(15.6, 0.18), controlPoint2: CGPointMake(15.49, 0.1))
        bezierPath.addCurveToPoint(CGPointMake(14.63, 0.06), controlPoint1: CGPointMake(15.12, -0.02), controlPoint2: CGPointMake(14.88, -0.02))
        bezierPath.addCurveToPoint(CGPointMake(14.32, 0.29), controlPoint1: CGPointMake(14.51, 0.1), controlPoint2: CGPointMake(14.4, 0.18))
        bezierPath.addLineToPoint(CGPointMake(10.38, 4.04))
        bezierPath.addCurveToPoint(CGPointMake(10.35, 5.36), controlPoint1: CGPointMake(9.88, 4.47), controlPoint2: CGPointMake(9.87, 4.91))
        bezierPath.addCurveToPoint(CGPointMake(11.73, 5.33), controlPoint1: CGPointMake(10.82, 5.81), controlPoint2: CGPointMake(11.28, 5.8))
        bezierPath.addLineToPoint(CGPointMake(14.01, 3.22))
        bezierPath.addLineToPoint(CGPointMake(14.01, 26.78))
        bezierPath.addLineToPoint(CGPointMake(11.73, 24.67))
        bezierPath.addCurveToPoint(CGPointMake(10.35, 24.64), controlPoint1: CGPointMake(11.28, 24.2), controlPoint2: CGPointMake(10.82, 24.19))
        bezierPath.addCurveToPoint(CGPointMake(10.38, 25.96), controlPoint1: CGPointMake(9.87, 25.09), controlPoint2: CGPointMake(9.88, 25.53))
        bezierPath.addLineToPoint(CGPointMake(14.32, 29.71))
        bezierPath.addCurveToPoint(CGPointMake(14.63, 29.94), controlPoint1: CGPointMake(14.4, 29.82), controlPoint2: CGPointMake(14.51, 29.9))
        bezierPath.addCurveToPoint(CGPointMake(15.37, 29.94), controlPoint1: CGPointMake(14.88, 30.02), controlPoint2: CGPointMake(15.12, 30.02))
        bezierPath.addCurveToPoint(CGPointMake(15.68, 29.71), controlPoint1: CGPointMake(15.49, 29.9), controlPoint2: CGPointMake(15.6, 29.82))
        bezierPath.addLineToPoint(CGPointMake(19.62, 25.96))
        bezierPath.addCurveToPoint(CGPointMake(19.65, 24.64), controlPoint1: CGPointMake(20.12, 25.53), controlPoint2: CGPointMake(20.13, 25.09))
        bezierPath.addCurveToPoint(CGPointMake(18.27, 24.67), controlPoint1: CGPointMake(19.18, 24.19), controlPoint2: CGPointMake(18.72, 24.2))
        bezierPath.addLineToPoint(CGPointMake(15.99, 26.78))
        bezierPath.addLineToPoint(CGPointMake(15.99, 3.22))
        bezierPath.addLineToPoint(CGPointMake(18.27, 5.33))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    public class func drawTextSpacingSelected() {

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(29.94, 14.63))
        bezier2Path.addCurveToPoint(CGPointMake(29.71, 14.32), controlPoint1: CGPointMake(29.9, 14.51), controlPoint2: CGPointMake(29.82, 14.4))
        bezier2Path.addLineToPoint(CGPointMake(25.96, 10.38))
        bezier2Path.addCurveToPoint(CGPointMake(24.64, 10.35), controlPoint1: CGPointMake(25.53, 9.88), controlPoint2: CGPointMake(25.09, 9.87))
        bezier2Path.addCurveToPoint(CGPointMake(24.67, 11.73), controlPoint1: CGPointMake(24.19, 10.82), controlPoint2: CGPointMake(24.2, 11.28))
        bezier2Path.addLineToPoint(CGPointMake(26.78, 14.01))
        bezier2Path.addLineToPoint(CGPointMake(3.22, 14.01))
        bezier2Path.addLineToPoint(CGPointMake(5.33, 11.73))
        bezier2Path.addCurveToPoint(CGPointMake(5.36, 10.35), controlPoint1: CGPointMake(5.8, 11.28), controlPoint2: CGPointMake(5.81, 10.82))
        bezier2Path.addCurveToPoint(CGPointMake(4.04, 10.38), controlPoint1: CGPointMake(4.91, 9.87), controlPoint2: CGPointMake(4.47, 9.88))
        bezier2Path.addLineToPoint(CGPointMake(0.29, 14.32))
        bezier2Path.addCurveToPoint(CGPointMake(0.06, 14.63), controlPoint1: CGPointMake(0.18, 14.4), controlPoint2: CGPointMake(0.1, 14.51))
        bezier2Path.addCurveToPoint(CGPointMake(0, 15), controlPoint1: CGPointMake(0.02, 14.75), controlPoint2: CGPointMake(0, 14.88))
        bezier2Path.addCurveToPoint(CGPointMake(0.06, 15.37), controlPoint1: CGPointMake(0, 15.12), controlPoint2: CGPointMake(0.02, 15.25))
        bezier2Path.addCurveToPoint(CGPointMake(0.29, 15.68), controlPoint1: CGPointMake(0.1, 15.49), controlPoint2: CGPointMake(0.18, 15.6))
        bezier2Path.addLineToPoint(CGPointMake(4.04, 19.62))
        bezier2Path.addCurveToPoint(CGPointMake(5.36, 19.65), controlPoint1: CGPointMake(4.47, 20.12), controlPoint2: CGPointMake(4.91, 20.13))
        bezier2Path.addCurveToPoint(CGPointMake(5.33, 18.27), controlPoint1: CGPointMake(5.81, 19.18), controlPoint2: CGPointMake(5.8, 18.72))
        bezier2Path.addLineToPoint(CGPointMake(3.22, 15.99))
        bezier2Path.addLineToPoint(CGPointMake(26.78, 15.99))
        bezier2Path.addLineToPoint(CGPointMake(24.67, 18.27))
        bezier2Path.addCurveToPoint(CGPointMake(24.64, 19.65), controlPoint1: CGPointMake(24.2, 18.72), controlPoint2: CGPointMake(24.19, 19.18))
        bezier2Path.addCurveToPoint(CGPointMake(25.96, 19.62), controlPoint1: CGPointMake(25.09, 20.13), controlPoint2: CGPointMake(25.53, 20.12))
        bezier2Path.addLineToPoint(CGPointMake(29.71, 15.68))
        bezier2Path.addCurveToPoint(CGPointMake(29.94, 15.37), controlPoint1: CGPointMake(29.82, 15.6), controlPoint2: CGPointMake(29.9, 15.49))
        bezier2Path.addCurveToPoint(CGPointMake(30, 15), controlPoint1: CGPointMake(29.98, 15.25), controlPoint2: CGPointMake(30, 15.12))
        bezier2Path.addCurveToPoint(CGPointMake(29.94, 14.63), controlPoint1: CGPointMake(30, 14.88), controlPoint2: CGPointMake(29.98, 14.75))
        bezier2Path.closePath()
        bezier2Path.miterLimit = 4;

        CTAStyleKit.selectedColor.setFill()
        bezier2Path.fill()
    }

    public class func drawTextSpacingNormal() {

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(29.94, 14.63))
        bezier2Path.addCurveToPoint(CGPointMake(29.71, 14.32), controlPoint1: CGPointMake(29.9, 14.51), controlPoint2: CGPointMake(29.82, 14.4))
        bezier2Path.addLineToPoint(CGPointMake(25.96, 10.38))
        bezier2Path.addCurveToPoint(CGPointMake(24.64, 10.35), controlPoint1: CGPointMake(25.53, 9.88), controlPoint2: CGPointMake(25.09, 9.87))
        bezier2Path.addCurveToPoint(CGPointMake(24.67, 11.73), controlPoint1: CGPointMake(24.19, 10.82), controlPoint2: CGPointMake(24.2, 11.28))
        bezier2Path.addLineToPoint(CGPointMake(26.78, 14.01))
        bezier2Path.addLineToPoint(CGPointMake(3.22, 14.01))
        bezier2Path.addLineToPoint(CGPointMake(5.33, 11.73))
        bezier2Path.addCurveToPoint(CGPointMake(5.36, 10.35), controlPoint1: CGPointMake(5.8, 11.28), controlPoint2: CGPointMake(5.81, 10.82))
        bezier2Path.addCurveToPoint(CGPointMake(4.04, 10.38), controlPoint1: CGPointMake(4.91, 9.87), controlPoint2: CGPointMake(4.47, 9.88))
        bezier2Path.addLineToPoint(CGPointMake(0.29, 14.32))
        bezier2Path.addCurveToPoint(CGPointMake(0.06, 14.63), controlPoint1: CGPointMake(0.18, 14.4), controlPoint2: CGPointMake(0.1, 14.51))
        bezier2Path.addCurveToPoint(CGPointMake(0, 15), controlPoint1: CGPointMake(0.02, 14.75), controlPoint2: CGPointMake(0, 14.88))
        bezier2Path.addCurveToPoint(CGPointMake(0.06, 15.37), controlPoint1: CGPointMake(0, 15.12), controlPoint2: CGPointMake(0.02, 15.25))
        bezier2Path.addCurveToPoint(CGPointMake(0.29, 15.68), controlPoint1: CGPointMake(0.1, 15.49), controlPoint2: CGPointMake(0.18, 15.6))
        bezier2Path.addLineToPoint(CGPointMake(4.04, 19.62))
        bezier2Path.addCurveToPoint(CGPointMake(5.36, 19.65), controlPoint1: CGPointMake(4.47, 20.12), controlPoint2: CGPointMake(4.91, 20.13))
        bezier2Path.addCurveToPoint(CGPointMake(5.33, 18.27), controlPoint1: CGPointMake(5.81, 19.18), controlPoint2: CGPointMake(5.8, 18.72))
        bezier2Path.addLineToPoint(CGPointMake(3.22, 15.99))
        bezier2Path.addLineToPoint(CGPointMake(26.78, 15.99))
        bezier2Path.addLineToPoint(CGPointMake(24.67, 18.27))
        bezier2Path.addCurveToPoint(CGPointMake(24.64, 19.65), controlPoint1: CGPointMake(24.2, 18.72), controlPoint2: CGPointMake(24.19, 19.18))
        bezier2Path.addCurveToPoint(CGPointMake(25.96, 19.62), controlPoint1: CGPointMake(25.09, 20.13), controlPoint2: CGPointMake(25.53, 20.12))
        bezier2Path.addLineToPoint(CGPointMake(29.71, 15.68))
        bezier2Path.addCurveToPoint(CGPointMake(29.94, 15.37), controlPoint1: CGPointMake(29.82, 15.6), controlPoint2: CGPointMake(29.9, 15.49))
        bezier2Path.addCurveToPoint(CGPointMake(30, 15), controlPoint1: CGPointMake(29.98, 15.25), controlPoint2: CGPointMake(30, 15.12))
        bezier2Path.addCurveToPoint(CGPointMake(29.94, 14.63), controlPoint1: CGPointMake(30, 14.88), controlPoint2: CGPointMake(29.98, 14.75))
        bezier2Path.closePath()
        bezier2Path.miterLimit = 4;

        CTAStyleKit.normalColor.setFill()
        bezier2Path.fill()
    }

    public class func drawAdd() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(14, 8))
        bezierPath.addLineToPoint(CGPointMake(8, 8))
        bezierPath.addLineToPoint(CGPointMake(8, 14))
        bezierPath.addLineToPoint(CGPointMake(6, 14))
        bezierPath.addLineToPoint(CGPointMake(6, 8))
        bezierPath.addLineToPoint(CGPointMake(0, 8))
        bezierPath.addLineToPoint(CGPointMake(0, 6.06))
        bezierPath.addLineToPoint(CGPointMake(6, 6.06))
        bezierPath.addLineToPoint(CGPointMake(6, 0))
        bezierPath.addLineToPoint(CGPointMake(8, 0))
        bezierPath.addLineToPoint(CGPointMake(8, 6.06))
        bezierPath.addLineToPoint(CGPointMake(14, 6.06))
        bezierPath.addLineToPoint(CGPointMake(14, 8))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    public class func drawNode() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(5, 10))
        bezierPath.addCurveToPoint(CGPointMake(10, 5), controlPoint1: CGPointMake(7.76, 10), controlPoint2: CGPointMake(10, 7.76))
        bezierPath.addCurveToPoint(CGPointMake(5, 0), controlPoint1: CGPointMake(10, 2.24), controlPoint2: CGPointMake(7.76, 0))
        bezierPath.addCurveToPoint(CGPointMake(0, 5), controlPoint1: CGPointMake(2.24, 0), controlPoint2: CGPointMake(0, 2.24))
        bezierPath.addCurveToPoint(CGPointMake(5, 10), controlPoint1: CGPointMake(0, 7.76), controlPoint2: CGPointMake(2.24, 10))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    public class func drawFontBarItemNormal() {
        //// Color Declarations
        let fillColor4 = UIColor(red: 0.608, green: 0.608, blue: 0.608, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(7, 12.65))
        bezierPath.addCurveToPoint(CGPointMake(8.98, 12.68), controlPoint1: CGPointMake(7.32, 12.65), controlPoint2: CGPointMake(7.98, 12.66))
        bezierPath.addCurveToPoint(CGPointMake(11.3, 12.71), controlPoint1: CGPointMake(9.98, 12.7), controlPoint2: CGPointMake(10.75, 12.71))
        bezierPath.addCurveToPoint(CGPointMake(12.13, 12.68), controlPoint1: CGPointMake(11.49, 12.71), controlPoint2: CGPointMake(11.76, 12.7))
        bezierPath.addCurveToPoint(CGPointMake(9.46, 6.21), controlPoint1: CGPointMake(11.29, 10.26), controlPoint2: CGPointMake(10.4, 8.1))
        bezierPath.addLineToPoint(CGPointMake(7, 12.65))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 20.97))
        bezierPath.addCurveToPoint(CGPointMake(2.38, 20.34), controlPoint1: CGPointMake(0, 20.97), controlPoint2: CGPointMake(2.13, 20.43))
        bezierPath.addCurveToPoint(CGPointMake(3.02, 19.92), controlPoint1: CGPointMake(2.62, 20.25), controlPoint2: CGPointMake(2.83, 20.11))
        bezierPath.addCurveToPoint(CGPointMake(3.47, 19.2), controlPoint1: CGPointMake(3.2, 19.74), controlPoint2: CGPointMake(3.35, 19.5))
        bezierPath.addLineToPoint(CGPointMake(10.92, 0))
        bezierPath.addLineToPoint(CGPointMake(11.76, 0))
        bezierPath.addCurveToPoint(CGPointMake(19.94, 19.29), controlPoint1: CGPointMake(11.76, 0), controlPoint2: CGPointMake(19.69, 18.79))
        bezierPath.addCurveToPoint(CGPointMake(20.44, 20.1), controlPoint1: CGPointMake(20.13, 19.72), controlPoint2: CGPointMake(20.3, 19.99))
        bezierPath.addCurveToPoint(CGPointMake(21.71, 20.52), controlPoint1: CGPointMake(20.63, 20.24), controlPoint2: CGPointMake(21.05, 20.38))
        bezierPath.addCurveToPoint(CGPointMake(23, 20.85), controlPoint1: CGPointMake(22.38, 20.66), controlPoint2: CGPointMake(23, 20.85))
        bezierPath.addCurveToPoint(CGPointMake(23, 22), controlPoint1: CGPointMake(23, 20.85), controlPoint2: CGPointMake(23, 21.96))
        bezierPath.addCurveToPoint(CGPointMake(11.82, 21.99), controlPoint1: CGPointMake(22.39, 22), controlPoint2: CGPointMake(11.82, 21.99))
        bezierPath.addLineToPoint(CGPointMake(11.82, 20.97))
        bezierPath.addCurveToPoint(CGPointMake(13.95, 20.44), controlPoint1: CGPointMake(11.82, 20.97), controlPoint2: CGPointMake(13.84, 20.46))
        bezierPath.addCurveToPoint(CGPointMake(14.18, 20.39), controlPoint1: CGPointMake(14.07, 20.41), controlPoint2: CGPointMake(14.14, 20.4))
        bezierPath.addCurveToPoint(CGPointMake(14.39, 20.32), controlPoint1: CGPointMake(14.22, 20.38), controlPoint2: CGPointMake(14.29, 20.36))
        bezierPath.addCurveToPoint(CGPointMake(14.6, 20.23), controlPoint1: CGPointMake(14.49, 20.29), controlPoint2: CGPointMake(14.56, 20.26))
        bezierPath.addCurveToPoint(CGPointMake(14.76, 20.12), controlPoint1: CGPointMake(14.65, 20.2), controlPoint2: CGPointMake(14.7, 20.16))
        bezierPath.addCurveToPoint(CGPointMake(14.89, 19.96), controlPoint1: CGPointMake(14.83, 20.07), controlPoint2: CGPointMake(14.87, 20.02))
        bezierPath.addCurveToPoint(CGPointMake(14.93, 19.76), controlPoint1: CGPointMake(14.92, 19.9), controlPoint2: CGPointMake(14.93, 19.83))
        bezierPath.addCurveToPoint(CGPointMake(14.48, 18.38), controlPoint1: CGPointMake(14.93, 19.61), controlPoint2: CGPointMake(14.78, 19.15))
        bezierPath.addCurveToPoint(CGPointMake(13.44, 15.85), controlPoint1: CGPointMake(14.18, 17.61), controlPoint2: CGPointMake(13.84, 16.77))
        bezierPath.addCurveToPoint(CGPointMake(12.84, 14.42), controlPoint1: CGPointMake(13.05, 14.92), controlPoint2: CGPointMake(12.85, 14.45))
        bezierPath.addLineToPoint(CGPointMake(6.34, 14.39))
        bezierPath.addCurveToPoint(CGPointMake(5.23, 17.18), controlPoint1: CGPointMake(6.09, 14.94), controlPoint2: CGPointMake(5.72, 15.87))
        bezierPath.addCurveToPoint(CGPointMake(4.5, 19.5), controlPoint1: CGPointMake(4.75, 18.49), controlPoint2: CGPointMake(4.5, 19.26))
        bezierPath.addCurveToPoint(CGPointMake(4.71, 20.04), controlPoint1: CGPointMake(4.5, 19.71), controlPoint2: CGPointMake(4.57, 19.89))
        bezierPath.addCurveToPoint(CGPointMake(5.33, 20.39), controlPoint1: CGPointMake(4.84, 20.18), controlPoint2: CGPointMake(5.05, 20.3))
        bezierPath.addCurveToPoint(CGPointMake(6.04, 20.58), controlPoint1: CGPointMake(5.62, 20.47), controlPoint2: CGPointMake(5.85, 20.54))
        bezierPath.addCurveToPoint(CGPointMake(6.86, 20.7), controlPoint1: CGPointMake(6.22, 20.62), controlPoint2: CGPointMake(6.49, 20.66))
        bezierPath.addCurveToPoint(CGPointMake(7.45, 20.76), controlPoint1: CGPointMake(7.22, 20.74), controlPoint2: CGPointMake(7.45, 20.76))
        bezierPath.addLineToPoint(CGPointMake(7.45, 22))
        bezierPath.addLineToPoint(CGPointMake(0, 22))
        bezierPath.addLineToPoint(CGPointMake(0, 20.97))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor4.setFill()
        bezierPath.fill()
    }

    public class func drawFontBarItemSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(7, 12.65))
        bezierPath.addCurveToPoint(CGPointMake(8.98, 12.68), controlPoint1: CGPointMake(7.32, 12.65), controlPoint2: CGPointMake(7.98, 12.66))
        bezierPath.addCurveToPoint(CGPointMake(11.3, 12.71), controlPoint1: CGPointMake(9.98, 12.7), controlPoint2: CGPointMake(10.75, 12.71))
        bezierPath.addCurveToPoint(CGPointMake(12.13, 12.68), controlPoint1: CGPointMake(11.49, 12.71), controlPoint2: CGPointMake(11.76, 12.7))
        bezierPath.addCurveToPoint(CGPointMake(9.46, 6.21), controlPoint1: CGPointMake(11.29, 10.26), controlPoint2: CGPointMake(10.4, 8.1))
        bezierPath.addLineToPoint(CGPointMake(7, 12.65))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 20.97))
        bezierPath.addCurveToPoint(CGPointMake(2.38, 20.34), controlPoint1: CGPointMake(0, 20.97), controlPoint2: CGPointMake(2.13, 20.43))
        bezierPath.addCurveToPoint(CGPointMake(3.02, 19.92), controlPoint1: CGPointMake(2.62, 20.25), controlPoint2: CGPointMake(2.83, 20.11))
        bezierPath.addCurveToPoint(CGPointMake(3.47, 19.2), controlPoint1: CGPointMake(3.2, 19.74), controlPoint2: CGPointMake(3.35, 19.5))
        bezierPath.addLineToPoint(CGPointMake(10.92, 0))
        bezierPath.addLineToPoint(CGPointMake(11.76, 0))
        bezierPath.addCurveToPoint(CGPointMake(19.94, 19.29), controlPoint1: CGPointMake(11.76, 0), controlPoint2: CGPointMake(19.69, 18.79))
        bezierPath.addCurveToPoint(CGPointMake(20.44, 20.1), controlPoint1: CGPointMake(20.13, 19.72), controlPoint2: CGPointMake(20.3, 19.99))
        bezierPath.addCurveToPoint(CGPointMake(21.71, 20.52), controlPoint1: CGPointMake(20.63, 20.24), controlPoint2: CGPointMake(21.05, 20.38))
        bezierPath.addCurveToPoint(CGPointMake(23, 20.85), controlPoint1: CGPointMake(22.38, 20.66), controlPoint2: CGPointMake(23, 20.85))
        bezierPath.addCurveToPoint(CGPointMake(23, 22), controlPoint1: CGPointMake(23, 20.85), controlPoint2: CGPointMake(23, 21.96))
        bezierPath.addCurveToPoint(CGPointMake(11.82, 21.99), controlPoint1: CGPointMake(22.39, 22), controlPoint2: CGPointMake(11.82, 21.99))
        bezierPath.addLineToPoint(CGPointMake(11.82, 20.97))
        bezierPath.addCurveToPoint(CGPointMake(13.95, 20.44), controlPoint1: CGPointMake(11.82, 20.97), controlPoint2: CGPointMake(13.84, 20.46))
        bezierPath.addCurveToPoint(CGPointMake(14.18, 20.39), controlPoint1: CGPointMake(14.07, 20.41), controlPoint2: CGPointMake(14.14, 20.4))
        bezierPath.addCurveToPoint(CGPointMake(14.39, 20.32), controlPoint1: CGPointMake(14.22, 20.38), controlPoint2: CGPointMake(14.29, 20.36))
        bezierPath.addCurveToPoint(CGPointMake(14.6, 20.23), controlPoint1: CGPointMake(14.49, 20.29), controlPoint2: CGPointMake(14.56, 20.26))
        bezierPath.addCurveToPoint(CGPointMake(14.76, 20.12), controlPoint1: CGPointMake(14.65, 20.2), controlPoint2: CGPointMake(14.7, 20.16))
        bezierPath.addCurveToPoint(CGPointMake(14.89, 19.96), controlPoint1: CGPointMake(14.83, 20.07), controlPoint2: CGPointMake(14.87, 20.02))
        bezierPath.addCurveToPoint(CGPointMake(14.93, 19.76), controlPoint1: CGPointMake(14.92, 19.9), controlPoint2: CGPointMake(14.93, 19.83))
        bezierPath.addCurveToPoint(CGPointMake(14.48, 18.38), controlPoint1: CGPointMake(14.93, 19.61), controlPoint2: CGPointMake(14.78, 19.15))
        bezierPath.addCurveToPoint(CGPointMake(13.44, 15.85), controlPoint1: CGPointMake(14.18, 17.61), controlPoint2: CGPointMake(13.84, 16.77))
        bezierPath.addCurveToPoint(CGPointMake(12.84, 14.42), controlPoint1: CGPointMake(13.05, 14.92), controlPoint2: CGPointMake(12.85, 14.45))
        bezierPath.addLineToPoint(CGPointMake(6.34, 14.39))
        bezierPath.addCurveToPoint(CGPointMake(5.23, 17.18), controlPoint1: CGPointMake(6.09, 14.94), controlPoint2: CGPointMake(5.72, 15.87))
        bezierPath.addCurveToPoint(CGPointMake(4.5, 19.5), controlPoint1: CGPointMake(4.75, 18.49), controlPoint2: CGPointMake(4.5, 19.26))
        bezierPath.addCurveToPoint(CGPointMake(4.71, 20.04), controlPoint1: CGPointMake(4.5, 19.71), controlPoint2: CGPointMake(4.57, 19.89))
        bezierPath.addCurveToPoint(CGPointMake(5.33, 20.39), controlPoint1: CGPointMake(4.84, 20.18), controlPoint2: CGPointMake(5.05, 20.3))
        bezierPath.addCurveToPoint(CGPointMake(6.04, 20.58), controlPoint1: CGPointMake(5.62, 20.47), controlPoint2: CGPointMake(5.85, 20.54))
        bezierPath.addCurveToPoint(CGPointMake(6.86, 20.7), controlPoint1: CGPointMake(6.22, 20.62), controlPoint2: CGPointMake(6.49, 20.66))
        bezierPath.addCurveToPoint(CGPointMake(7.45, 20.76), controlPoint1: CGPointMake(7.22, 20.74), controlPoint2: CGPointMake(7.45, 20.76))
        bezierPath.addLineToPoint(CGPointMake(7.45, 22))
        bezierPath.addLineToPoint(CGPointMake(0, 22))
        bezierPath.addLineToPoint(CGPointMake(0, 20.97))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    public class func drawSizeBarItemNormal() {
        //// Color Declarations
        let fillColor4 = UIColor(red: 0.608, green: 0.608, blue: 0.608, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(0, 9))
        bezierPath.addLineToPoint(CGPointMake(0, 7))
        bezierPath.addLineToPoint(CGPointMake(13, 7))
        bezierPath.addLineToPoint(CGPointMake(13, 9))
        bezierPath.addLineToPoint(CGPointMake(8, 9))
        bezierPath.addLineToPoint(CGPointMake(8, 22))
        bezierPath.addLineToPoint(CGPointMake(5, 22))
        bezierPath.addLineToPoint(CGPointMake(5, 9))
        bezierPath.addLineToPoint(CGPointMake(0, 9))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(9, 0))
        bezierPath.addLineToPoint(CGPointMake(28, 0))
        bezierPath.addLineToPoint(CGPointMake(28, 2))
        bezierPath.addLineToPoint(CGPointMake(20, 2))
        bezierPath.addLineToPoint(CGPointMake(20, 22))
        bezierPath.addLineToPoint(CGPointMake(17, 22))
        bezierPath.addLineToPoint(CGPointMake(17, 2))
        bezierPath.addLineToPoint(CGPointMake(9, 2))
        bezierPath.addLineToPoint(CGPointMake(9, 0))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor4.setFill()
        bezierPath.fill()
    }

    public class func drawSizeBarItemSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(0, 9))
        bezierPath.addLineToPoint(CGPointMake(0, 7))
        bezierPath.addLineToPoint(CGPointMake(13, 7))
        bezierPath.addLineToPoint(CGPointMake(13, 9))
        bezierPath.addLineToPoint(CGPointMake(8, 9))
        bezierPath.addLineToPoint(CGPointMake(8, 22))
        bezierPath.addLineToPoint(CGPointMake(5, 22))
        bezierPath.addLineToPoint(CGPointMake(5, 9))
        bezierPath.addLineToPoint(CGPointMake(0, 9))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(9, 0))
        bezierPath.addLineToPoint(CGPointMake(28, 0))
        bezierPath.addLineToPoint(CGPointMake(28, 2))
        bezierPath.addLineToPoint(CGPointMake(20, 2))
        bezierPath.addLineToPoint(CGPointMake(20, 22))
        bezierPath.addLineToPoint(CGPointMake(17, 22))
        bezierPath.addLineToPoint(CGPointMake(17, 2))
        bezierPath.addLineToPoint(CGPointMake(9, 2))
        bezierPath.addLineToPoint(CGPointMake(9, 0))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    public class func drawColorBarItemSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(26.26, 2.85))
        bezierPath.addLineToPoint(CGPointMake(23.77, 1.56))
        bezierPath.addCurveToPoint(CGPointMake(22.73, 1.47), controlPoint1: CGPointMake(23.44, 1.38), controlPoint2: CGPointMake(23.1, 1.35))
        bezierPath.addCurveToPoint(CGPointMake(21.93, 2.17), controlPoint1: CGPointMake(22.36, 1.59), controlPoint2: CGPointMake(22.09, 1.82))
        bezierPath.addLineToPoint(CGPointMake(13.04, 19.67))
        bezierPath.addCurveToPoint(CGPointMake(12.97, 20.74), controlPoint1: CGPointMake(12.88, 20.02), controlPoint2: CGPointMake(12.85, 20.38))
        bezierPath.addCurveToPoint(CGPointMake(13.66, 21.57), controlPoint1: CGPointMake(13.09, 21.11), controlPoint2: CGPointMake(13.32, 21.38))
        bezierPath.addLineToPoint(CGPointMake(16.13, 22.86))
        bezierPath.addCurveToPoint(CGPointMake(17.17, 22.93), controlPoint1: CGPointMake(16.45, 23.02), controlPoint2: CGPointMake(16.8, 23.04))
        bezierPath.addCurveToPoint(CGPointMake(18, 22.23), controlPoint1: CGPointMake(17.54, 22.81), controlPoint2: CGPointMake(17.82, 22.57))
        bezierPath.addLineToPoint(CGPointMake(26.86, 4.75))
        bezierPath.addCurveToPoint(CGPointMake(26.93, 3.66), controlPoint1: CGPointMake(27.02, 4.4), controlPoint2: CGPointMake(27.04, 4.04))
        bezierPath.addCurveToPoint(CGPointMake(26.26, 2.85), controlPoint1: CGPointMake(26.81, 3.29), controlPoint2: CGPointMake(26.59, 3.02))
        bezierPath.addLineToPoint(CGPointMake(26.26, 2.85))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(17.38, 20.33))
        bezierPath.addCurveToPoint(CGPointMake(16.58, 21.03), controlPoint1: CGPointMake(17.21, 20.68), controlPoint2: CGPointMake(16.95, 20.91))
        bezierPath.addCurveToPoint(CGPointMake(15.51, 20.96), controlPoint1: CGPointMake(16.21, 21.15), controlPoint2: CGPointMake(15.85, 21.13))
        bezierPath.addCurveToPoint(CGPointMake(14.84, 20.14), controlPoint1: CGPointMake(15.18, 20.78), controlPoint2: CGPointMake(14.96, 20.51))
        bezierPath.addCurveToPoint(CGPointMake(14.91, 19.07), controlPoint1: CGPointMake(14.72, 19.77), controlPoint2: CGPointMake(14.75, 19.42))
        bezierPath.addCurveToPoint(CGPointMake(15.72, 18.37), controlPoint1: CGPointMake(15.09, 18.72), controlPoint2: CGPointMake(15.36, 18.49))
        bezierPath.addCurveToPoint(CGPointMake(16.78, 18.47), controlPoint1: CGPointMake(16.08, 18.25), controlPoint2: CGPointMake(16.44, 18.28))
        bezierPath.addCurveToPoint(CGPointMake(17.47, 19.28), controlPoint1: CGPointMake(17.12, 18.63), controlPoint2: CGPointMake(17.35, 18.9))
        bezierPath.addCurveToPoint(CGPointMake(17.38, 20.33), controlPoint1: CGPointMake(17.59, 19.65), controlPoint2: CGPointMake(17.56, 20))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(19.35, 1.51))
        bezierPath.addCurveToPoint(CGPointMake(18.96, 0.51), controlPoint1: CGPointMake(19.35, 1.12), controlPoint2: CGPointMake(19.22, 0.79))
        bezierPath.addCurveToPoint(CGPointMake(18, 0.08), controlPoint1: CGPointMake(18.7, 0.22), controlPoint2: CGPointMake(18.38, 0.08))
        bezierPath.addLineToPoint(CGPointMake(15.21, -0))
        bezierPath.addCurveToPoint(CGPointMake(14.22, 0.4), controlPoint1: CGPointMake(14.83, -0), controlPoint2: CGPointMake(14.5, 0.13))
        bezierPath.addCurveToPoint(CGPointMake(13.8, 1.37), controlPoint1: CGPointMake(13.94, 0.66), controlPoint2: CGPointMake(13.8, 0.99))
        bezierPath.addLineToPoint(CGPointMake(13.47, 15.78))
        bezierPath.addLineToPoint(CGPointMake(19.27, 4.31))
        bezierPath.addLineToPoint(CGPointMake(19.35, 1.51))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(9.36, 1.23))
        bezierPath.addLineToPoint(CGPointMake(6.84, 2.39))
        bezierPath.addCurveToPoint(CGPointMake(6.12, 3.18), controlPoint1: CGPointMake(6.49, 2.55), controlPoint2: CGPointMake(6.25, 2.82))
        bezierPath.addCurveToPoint(CGPointMake(6.16, 4.25), controlPoint1: CGPointMake(5.98, 3.55), controlPoint2: CGPointMake(6, 3.91))
        bezierPath.addLineToPoint(CGPointMake(12.04, 17.34))
        bezierPath.addLineToPoint(CGPointMake(12.34, 4.45))
        bezierPath.addLineToPoint(CGPointMake(11.2, 1.92))
        bezierPath.addCurveToPoint(CGPointMake(10.41, 1.19), controlPoint1: CGPointMake(11.03, 1.57), controlPoint2: CGPointMake(10.77, 1.33))
        bezierPath.addCurveToPoint(CGPointMake(9.36, 1.23), controlPoint1: CGPointMake(10.05, 1.06), controlPoint2: CGPointMake(9.7, 1.07))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(4.04, 5.87))
        bezierPath.addCurveToPoint(CGPointMake(3.03, 5.57), controlPoint1: CGPointMake(3.76, 5.63), controlPoint2: CGPointMake(3.42, 5.53))
        bezierPath.addCurveToPoint(CGPointMake(2.09, 6.06), controlPoint1: CGPointMake(2.64, 5.61), controlPoint2: CGPointMake(2.33, 5.77))
        bezierPath.addLineToPoint(CGPointMake(0.31, 8.23))
        bezierPath.addCurveToPoint(CGPointMake(0.01, 9.25), controlPoint1: CGPointMake(0.07, 8.52), controlPoint2: CGPointMake(-0.03, 8.86))
        bezierPath.addCurveToPoint(CGPointMake(0.49, 10.21), controlPoint1: CGPointMake(0.04, 9.63), controlPoint2: CGPointMake(0.21, 9.95))
        bezierPath.addLineToPoint(CGPointMake(11.44, 19.4))
        bezierPath.addLineToPoint(CGPointMake(6.16, 7.66))
        bezierPath.addLineToPoint(CGPointMake(4.04, 5.87))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    public class func drawColorBarItemNormal() {
        //// Color Declarations
        let fillColor4 = UIColor(red: 0.608, green: 0.608, blue: 0.608, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(26.26, 2.85))
        bezierPath.addLineToPoint(CGPointMake(23.77, 1.56))
        bezierPath.addCurveToPoint(CGPointMake(22.73, 1.47), controlPoint1: CGPointMake(23.44, 1.38), controlPoint2: CGPointMake(23.1, 1.35))
        bezierPath.addCurveToPoint(CGPointMake(21.93, 2.17), controlPoint1: CGPointMake(22.36, 1.59), controlPoint2: CGPointMake(22.09, 1.82))
        bezierPath.addLineToPoint(CGPointMake(13.04, 19.67))
        bezierPath.addCurveToPoint(CGPointMake(12.97, 20.74), controlPoint1: CGPointMake(12.88, 20.02), controlPoint2: CGPointMake(12.85, 20.38))
        bezierPath.addCurveToPoint(CGPointMake(13.66, 21.57), controlPoint1: CGPointMake(13.09, 21.11), controlPoint2: CGPointMake(13.32, 21.38))
        bezierPath.addLineToPoint(CGPointMake(16.13, 22.86))
        bezierPath.addCurveToPoint(CGPointMake(17.17, 22.93), controlPoint1: CGPointMake(16.45, 23.02), controlPoint2: CGPointMake(16.8, 23.04))
        bezierPath.addCurveToPoint(CGPointMake(18, 22.23), controlPoint1: CGPointMake(17.54, 22.81), controlPoint2: CGPointMake(17.82, 22.57))
        bezierPath.addLineToPoint(CGPointMake(26.86, 4.75))
        bezierPath.addCurveToPoint(CGPointMake(26.93, 3.66), controlPoint1: CGPointMake(27.02, 4.4), controlPoint2: CGPointMake(27.04, 4.04))
        bezierPath.addCurveToPoint(CGPointMake(26.26, 2.85), controlPoint1: CGPointMake(26.81, 3.29), controlPoint2: CGPointMake(26.59, 3.02))
        bezierPath.addLineToPoint(CGPointMake(26.26, 2.85))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(17.38, 20.33))
        bezierPath.addCurveToPoint(CGPointMake(16.58, 21.03), controlPoint1: CGPointMake(17.21, 20.68), controlPoint2: CGPointMake(16.95, 20.91))
        bezierPath.addCurveToPoint(CGPointMake(15.51, 20.96), controlPoint1: CGPointMake(16.21, 21.15), controlPoint2: CGPointMake(15.85, 21.13))
        bezierPath.addCurveToPoint(CGPointMake(14.84, 20.14), controlPoint1: CGPointMake(15.18, 20.78), controlPoint2: CGPointMake(14.96, 20.51))
        bezierPath.addCurveToPoint(CGPointMake(14.91, 19.07), controlPoint1: CGPointMake(14.72, 19.77), controlPoint2: CGPointMake(14.75, 19.42))
        bezierPath.addCurveToPoint(CGPointMake(15.72, 18.37), controlPoint1: CGPointMake(15.09, 18.72), controlPoint2: CGPointMake(15.36, 18.49))
        bezierPath.addCurveToPoint(CGPointMake(16.78, 18.47), controlPoint1: CGPointMake(16.08, 18.25), controlPoint2: CGPointMake(16.44, 18.28))
        bezierPath.addCurveToPoint(CGPointMake(17.47, 19.28), controlPoint1: CGPointMake(17.12, 18.63), controlPoint2: CGPointMake(17.35, 18.9))
        bezierPath.addCurveToPoint(CGPointMake(17.38, 20.33), controlPoint1: CGPointMake(17.59, 19.65), controlPoint2: CGPointMake(17.56, 20))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(19.35, 1.51))
        bezierPath.addCurveToPoint(CGPointMake(18.96, 0.51), controlPoint1: CGPointMake(19.35, 1.12), controlPoint2: CGPointMake(19.22, 0.79))
        bezierPath.addCurveToPoint(CGPointMake(18, 0.08), controlPoint1: CGPointMake(18.7, 0.22), controlPoint2: CGPointMake(18.38, 0.08))
        bezierPath.addLineToPoint(CGPointMake(15.21, -0))
        bezierPath.addCurveToPoint(CGPointMake(14.22, 0.4), controlPoint1: CGPointMake(14.83, -0), controlPoint2: CGPointMake(14.5, 0.13))
        bezierPath.addCurveToPoint(CGPointMake(13.8, 1.37), controlPoint1: CGPointMake(13.94, 0.66), controlPoint2: CGPointMake(13.8, 0.99))
        bezierPath.addLineToPoint(CGPointMake(13.47, 15.78))
        bezierPath.addLineToPoint(CGPointMake(19.27, 4.31))
        bezierPath.addLineToPoint(CGPointMake(19.35, 1.51))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(9.36, 1.23))
        bezierPath.addLineToPoint(CGPointMake(6.84, 2.39))
        bezierPath.addCurveToPoint(CGPointMake(6.12, 3.18), controlPoint1: CGPointMake(6.49, 2.55), controlPoint2: CGPointMake(6.25, 2.82))
        bezierPath.addCurveToPoint(CGPointMake(6.16, 4.25), controlPoint1: CGPointMake(5.98, 3.55), controlPoint2: CGPointMake(6, 3.91))
        bezierPath.addLineToPoint(CGPointMake(12.04, 17.34))
        bezierPath.addLineToPoint(CGPointMake(12.34, 4.45))
        bezierPath.addLineToPoint(CGPointMake(11.2, 1.92))
        bezierPath.addCurveToPoint(CGPointMake(10.41, 1.19), controlPoint1: CGPointMake(11.03, 1.57), controlPoint2: CGPointMake(10.77, 1.33))
        bezierPath.addCurveToPoint(CGPointMake(9.36, 1.23), controlPoint1: CGPointMake(10.05, 1.06), controlPoint2: CGPointMake(9.7, 1.07))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(4.04, 5.87))
        bezierPath.addCurveToPoint(CGPointMake(3.03, 5.57), controlPoint1: CGPointMake(3.76, 5.63), controlPoint2: CGPointMake(3.42, 5.53))
        bezierPath.addCurveToPoint(CGPointMake(2.09, 6.06), controlPoint1: CGPointMake(2.64, 5.61), controlPoint2: CGPointMake(2.33, 5.77))
        bezierPath.addLineToPoint(CGPointMake(0.31, 8.23))
        bezierPath.addCurveToPoint(CGPointMake(0.01, 9.25), controlPoint1: CGPointMake(0.07, 8.52), controlPoint2: CGPointMake(-0.03, 8.86))
        bezierPath.addCurveToPoint(CGPointMake(0.49, 10.21), controlPoint1: CGPointMake(0.04, 9.63), controlPoint2: CGPointMake(0.21, 9.95))
        bezierPath.addLineToPoint(CGPointMake(11.44, 19.4))
        bezierPath.addLineToPoint(CGPointMake(6.16, 7.66))
        bezierPath.addLineToPoint(CGPointMake(4.04, 5.87))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor4.setFill()
        bezierPath.fill()
    }

    public class func drawRotationBarItemSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(21.02, 6.68))
        bezierPath.addCurveToPoint(CGPointMake(24, 13.85), controlPoint1: CGPointMake(23.01, 8.65), controlPoint2: CGPointMake(24, 11.05))
        bezierPath.addCurveToPoint(CGPointMake(21.02, 21.03), controlPoint1: CGPointMake(24, 16.66), controlPoint2: CGPointMake(23.01, 19.06))
        bezierPath.addCurveToPoint(CGPointMake(13.78, 24), controlPoint1: CGPointMake(19.07, 23.01), controlPoint2: CGPointMake(16.66, 24))
        bezierPath.addCurveToPoint(CGPointMake(8.89, 22.73), controlPoint1: CGPointMake(12.04, 24), controlPoint2: CGPointMake(10.41, 23.58))
        bezierPath.addLineToPoint(CGPointMake(10.59, 21.09))
        bezierPath.addCurveToPoint(CGPointMake(13.78, 21.77), controlPoint1: CGPointMake(11.55, 21.55), controlPoint2: CGPointMake(12.61, 21.77))
        bezierPath.addCurveToPoint(CGPointMake(19.42, 19.44), controlPoint1: CGPointMake(15.98, 21.77), controlPoint2: CGPointMake(17.86, 21))
        bezierPath.addCurveToPoint(CGPointMake(21.71, 13.88), controlPoint1: CGPointMake(20.95, 17.92), controlPoint2: CGPointMake(21.71, 16.07))
        bezierPath.addCurveToPoint(CGPointMake(19.42, 8.26), controlPoint1: CGPointMake(21.71, 11.69), controlPoint2: CGPointMake(20.95, 9.82))
        bezierPath.addCurveToPoint(CGPointMake(13.78, 5.93), controlPoint1: CGPointMake(17.86, 6.71), controlPoint2: CGPointMake(15.98, 5.93))
        bezierPath.addLineToPoint(CGPointMake(13.78, 9.59))
        bezierPath.addLineToPoint(CGPointMake(8.99, 4.82))
        bezierPath.addLineToPoint(CGPointMake(13.78, 0))
        bezierPath.addLineToPoint(CGPointMake(13.78, 3.66))
        bezierPath.addCurveToPoint(CGPointMake(21.02, 6.68), controlPoint1: CGPointMake(16.66, 3.66), controlPoint2: CGPointMake(19.07, 4.66))
        bezierPath.addLineToPoint(CGPointMake(21.02, 6.68))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(3.25, 13.72))
        bezierPath.addLineToPoint(CGPointMake(7.4, 17.85))
        bezierPath.addLineToPoint(CGPointMake(11.55, 13.72))
        bezierPath.addLineToPoint(CGPointMake(7.4, 9.59))
        bezierPath.addLineToPoint(CGPointMake(3.25, 13.72))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(7.4, 6.41))
        bezierPath.addLineToPoint(CGPointMake(14.74, 13.72))
        bezierPath.addLineToPoint(CGPointMake(7.4, 21.03))
        bezierPath.addLineToPoint(CGPointMake(0, 13.72))
        bezierPath.addLineToPoint(CGPointMake(7.4, 6.41))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    public class func drawRotationBarItemNormal() {
        //// Color Declarations
        let fillColor4 = UIColor(red: 0.608, green: 0.608, blue: 0.608, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(21.02, 6.68))
        bezierPath.addCurveToPoint(CGPointMake(24, 13.85), controlPoint1: CGPointMake(23.01, 8.65), controlPoint2: CGPointMake(24, 11.05))
        bezierPath.addCurveToPoint(CGPointMake(21.02, 21.03), controlPoint1: CGPointMake(24, 16.66), controlPoint2: CGPointMake(23.01, 19.06))
        bezierPath.addCurveToPoint(CGPointMake(13.78, 24), controlPoint1: CGPointMake(19.07, 23.01), controlPoint2: CGPointMake(16.66, 24))
        bezierPath.addCurveToPoint(CGPointMake(8.89, 22.73), controlPoint1: CGPointMake(12.04, 24), controlPoint2: CGPointMake(10.41, 23.58))
        bezierPath.addLineToPoint(CGPointMake(10.59, 21.09))
        bezierPath.addCurveToPoint(CGPointMake(13.78, 21.77), controlPoint1: CGPointMake(11.55, 21.55), controlPoint2: CGPointMake(12.61, 21.77))
        bezierPath.addCurveToPoint(CGPointMake(19.42, 19.44), controlPoint1: CGPointMake(15.98, 21.77), controlPoint2: CGPointMake(17.86, 21))
        bezierPath.addCurveToPoint(CGPointMake(21.71, 13.88), controlPoint1: CGPointMake(20.95, 17.92), controlPoint2: CGPointMake(21.71, 16.07))
        bezierPath.addCurveToPoint(CGPointMake(19.42, 8.26), controlPoint1: CGPointMake(21.71, 11.69), controlPoint2: CGPointMake(20.95, 9.82))
        bezierPath.addCurveToPoint(CGPointMake(13.78, 5.93), controlPoint1: CGPointMake(17.86, 6.71), controlPoint2: CGPointMake(15.98, 5.93))
        bezierPath.addLineToPoint(CGPointMake(13.78, 9.59))
        bezierPath.addLineToPoint(CGPointMake(8.99, 4.82))
        bezierPath.addLineToPoint(CGPointMake(13.78, 0))
        bezierPath.addLineToPoint(CGPointMake(13.78, 3.66))
        bezierPath.addCurveToPoint(CGPointMake(21.02, 6.68), controlPoint1: CGPointMake(16.66, 3.66), controlPoint2: CGPointMake(19.07, 4.66))
        bezierPath.addLineToPoint(CGPointMake(21.02, 6.68))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(3.25, 13.72))
        bezierPath.addLineToPoint(CGPointMake(7.4, 17.85))
        bezierPath.addLineToPoint(CGPointMake(11.55, 13.72))
        bezierPath.addLineToPoint(CGPointMake(7.4, 9.59))
        bezierPath.addLineToPoint(CGPointMake(3.25, 13.72))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(7.4, 6.41))
        bezierPath.addLineToPoint(CGPointMake(14.74, 13.72))
        bezierPath.addLineToPoint(CGPointMake(7.4, 21.03))
        bezierPath.addLineToPoint(CGPointMake(0, 13.72))
        bezierPath.addLineToPoint(CGPointMake(7.4, 6.41))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor4.setFill()
        bezierPath.fill()
    }

    public class func drawAlignmentBarItemNormal() {
        //// Color Declarations
        let fillColor4 = UIColor(red: 0.608, green: 0.608, blue: 0.608, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(0, 0))
        bezierPath.addLineToPoint(CGPointMake(19, 0))
        bezierPath.addLineToPoint(CGPointMake(19, 2))
        bezierPath.addLineToPoint(CGPointMake(0, 2))
        bezierPath.addLineToPoint(CGPointMake(0, 0))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(3, 6))
        bezierPath.addLineToPoint(CGPointMake(16, 6))
        bezierPath.addLineToPoint(CGPointMake(16, 8))
        bezierPath.addLineToPoint(CGPointMake(3, 8))
        bezierPath.addLineToPoint(CGPointMake(3, 6))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 12))
        bezierPath.addLineToPoint(CGPointMake(19, 12))
        bezierPath.addLineToPoint(CGPointMake(19, 14))
        bezierPath.addLineToPoint(CGPointMake(0, 14))
        bezierPath.addLineToPoint(CGPointMake(0, 12))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(4, 18))
        bezierPath.addLineToPoint(CGPointMake(16, 18))
        bezierPath.addLineToPoint(CGPointMake(16, 20))
        bezierPath.addLineToPoint(CGPointMake(4, 20))
        bezierPath.addLineToPoint(CGPointMake(4, 18))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor4.setFill()
        bezierPath.fill()
    }

    public class func drawAlignmentBarItemSelected() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(0, 0))
        bezierPath.addLineToPoint(CGPointMake(19, 0))
        bezierPath.addLineToPoint(CGPointMake(19, 2))
        bezierPath.addLineToPoint(CGPointMake(0, 2))
        bezierPath.addLineToPoint(CGPointMake(0, 0))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(3, 6))
        bezierPath.addLineToPoint(CGPointMake(16, 6))
        bezierPath.addLineToPoint(CGPointMake(16, 8))
        bezierPath.addLineToPoint(CGPointMake(3, 8))
        bezierPath.addLineToPoint(CGPointMake(3, 6))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(0, 12))
        bezierPath.addLineToPoint(CGPointMake(19, 12))
        bezierPath.addLineToPoint(CGPointMake(19, 14))
        bezierPath.addLineToPoint(CGPointMake(0, 14))
        bezierPath.addLineToPoint(CGPointMake(0, 12))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(4, 18))
        bezierPath.addLineToPoint(CGPointMake(16, 18))
        bezierPath.addLineToPoint(CGPointMake(16, 20))
        bezierPath.addLineToPoint(CGPointMake(4, 20))
        bezierPath.addLineToPoint(CGPointMake(4, 18))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    public class func drawSpacingBarItemNormal() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor4 = UIColor(red: 0.608, green: 0.608, blue: 0.608, alpha: 1.000)

        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPointMake(21.2, 4.53))
        clipPath.addLineToPoint(CGPointMake(3.8, 4.53))
        clipPath.addLineToPoint(CGPointMake(6.94, 1.39))
        clipPath.addLineToPoint(CGPointMake(5.54, -0.01))
        clipPath.addLineToPoint(CGPointMake(1.42, 4.11))
        clipPath.addLineToPoint(CGPointMake(1.39, 4.08))
        clipPath.addLineToPoint(CGPointMake(0.01, 5.46))
        clipPath.addLineToPoint(CGPointMake(5.6, 11.04))
        clipPath.addLineToPoint(CGPointMake(6.97, 9.67))
        clipPath.addLineToPoint(CGPointMake(3.78, 6.47))
        clipPath.addLineToPoint(CGPointMake(21.22, 6.47))
        clipPath.addLineToPoint(CGPointMake(18.03, 9.67))
        clipPath.addLineToPoint(CGPointMake(19.4, 11.04))
        clipPath.addLineToPoint(CGPointMake(24.99, 5.46))
        clipPath.addLineToPoint(CGPointMake(23.61, 4.08))
        clipPath.addLineToPoint(CGPointMake(23.58, 4.11))
        clipPath.addLineToPoint(CGPointMake(19.46, -0.01))
        clipPath.addLineToPoint(CGPointMake(18.06, 1.39))
        clipPath.addLineToPoint(CGPointMake(21.2, 4.53))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(0, -0, 25, 11))
        fillColor4.setFill()
        rectanglePath.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

    public class func drawSpacingBarItemSelected() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPointMake(21.2, 4.53))
        clipPath.addLineToPoint(CGPointMake(3.8, 4.53))
        clipPath.addLineToPoint(CGPointMake(6.94, 1.39))
        clipPath.addLineToPoint(CGPointMake(5.54, -0.01))
        clipPath.addLineToPoint(CGPointMake(1.42, 4.11))
        clipPath.addLineToPoint(CGPointMake(1.39, 4.08))
        clipPath.addLineToPoint(CGPointMake(0.01, 5.46))
        clipPath.addLineToPoint(CGPointMake(5.6, 11.04))
        clipPath.addLineToPoint(CGPointMake(6.97, 9.67))
        clipPath.addLineToPoint(CGPointMake(3.78, 6.47))
        clipPath.addLineToPoint(CGPointMake(21.22, 6.47))
        clipPath.addLineToPoint(CGPointMake(18.03, 9.67))
        clipPath.addLineToPoint(CGPointMake(19.4, 11.04))
        clipPath.addLineToPoint(CGPointMake(24.99, 5.46))
        clipPath.addLineToPoint(CGPointMake(23.61, 4.08))
        clipPath.addLineToPoint(CGPointMake(23.58, 4.11))
        clipPath.addLineToPoint(CGPointMake(19.46, -0.01))
        clipPath.addLineToPoint(CGPointMake(18.06, 1.39))
        clipPath.addLineToPoint(CGPointMake(21.2, 4.53))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(0, -0, 25, 11))
        CTAStyleKit.selectedColor.setFill()
        rectanglePath.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

    public class func drawAnimationBarItemNormal() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor4 = UIColor(red: 0.608, green: 0.608, blue: 0.608, alpha: 1.000)

        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPointMake(7.94, 5.5))
        clipPath.addLineToPoint(CGPointMake(22.45, 20.07))
        clipPath.addLineToPoint(CGPointMake(20.53, 22))
        clipPath.addLineToPoint(CGPointMake(6.01, 7.43))
        clipPath.addLineToPoint(CGPointMake(7.94, 5.5))
        clipPath.closePath()
        clipPath.moveToPoint(CGPointMake(7.03, 3.63))
        clipPath.addLineToPoint(CGPointMake(7.03, 0))
        clipPath.addLineToPoint(CGPointMake(8.85, 0))
        clipPath.addLineToPoint(CGPointMake(8.85, 3.63))
        clipPath.addLineToPoint(CGPointMake(7.03, 3.63))
        clipPath.closePath()
        clipPath.moveToPoint(CGPointMake(7.03, 15.2))
        clipPath.addLineToPoint(CGPointMake(7.03, 11.57))
        clipPath.addLineToPoint(CGPointMake(8.85, 11.57))
        clipPath.addLineToPoint(CGPointMake(8.85, 15.2))
        clipPath.addLineToPoint(CGPointMake(7.03, 15.2))
        clipPath.closePath()
        clipPath.moveToPoint(CGPointMake(12.25, 8.39))
        clipPath.addLineToPoint(CGPointMake(12.25, 6.58))
        clipPath.addLineToPoint(CGPointMake(15.88, 6.58))
        clipPath.addLineToPoint(CGPointMake(15.88, 8.39))
        clipPath.addLineToPoint(CGPointMake(12.25, 8.39))
        clipPath.closePath()
        clipPath.moveToPoint(CGPointMake(13.95, 2.84))
        clipPath.addLineToPoint(CGPointMake(11.4, 5.39))
        clipPath.addLineToPoint(CGPointMake(10.09, 4.14))
        clipPath.addLineToPoint(CGPointMake(12.64, 1.53))
        clipPath.addLineToPoint(CGPointMake(13.95, 2.84))
        clipPath.closePath()
        clipPath.moveToPoint(CGPointMake(1.93, 2.84))
        clipPath.addLineToPoint(CGPointMake(3.23, 1.53))
        clipPath.addLineToPoint(CGPointMake(5.78, 4.14))
        clipPath.addLineToPoint(CGPointMake(4.48, 5.39))
        clipPath.addLineToPoint(CGPointMake(1.93, 2.84))
        clipPath.closePath()
        clipPath.moveToPoint(CGPointMake(1.93, 12.3))
        clipPath.addLineToPoint(CGPointMake(4.48, 9.75))
        clipPath.addLineToPoint(CGPointMake(5.78, 11))
        clipPath.addLineToPoint(CGPointMake(3.23, 13.61))
        clipPath.addLineToPoint(CGPointMake(1.93, 12.3))
        clipPath.closePath()
        clipPath.moveToPoint(CGPointMake(0, 8.39))
        clipPath.addLineToPoint(CGPointMake(0, 6.58))
        clipPath.addLineToPoint(CGPointMake(3.63, 6.58))
        clipPath.addLineToPoint(CGPointMake(3.63, 8.39))
        clipPath.addLineToPoint(CGPointMake(0, 8.39))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(-0, 0, 22, 22))
        fillColor4.setFill()
        rectanglePath.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

    public class func drawAnimationBarItemSelected() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPointMake(7.94, 5.5))
        clipPath.addLineToPoint(CGPointMake(22.45, 20.07))
        clipPath.addLineToPoint(CGPointMake(20.53, 22))
        clipPath.addLineToPoint(CGPointMake(6.01, 7.43))
        clipPath.addLineToPoint(CGPointMake(7.94, 5.5))
        clipPath.closePath()
        clipPath.moveToPoint(CGPointMake(7.03, 3.63))
        clipPath.addLineToPoint(CGPointMake(7.03, 0))
        clipPath.addLineToPoint(CGPointMake(8.85, 0))
        clipPath.addLineToPoint(CGPointMake(8.85, 3.63))
        clipPath.addLineToPoint(CGPointMake(7.03, 3.63))
        clipPath.closePath()
        clipPath.moveToPoint(CGPointMake(7.03, 15.2))
        clipPath.addLineToPoint(CGPointMake(7.03, 11.57))
        clipPath.addLineToPoint(CGPointMake(8.85, 11.57))
        clipPath.addLineToPoint(CGPointMake(8.85, 15.2))
        clipPath.addLineToPoint(CGPointMake(7.03, 15.2))
        clipPath.closePath()
        clipPath.moveToPoint(CGPointMake(12.25, 8.39))
        clipPath.addLineToPoint(CGPointMake(12.25, 6.58))
        clipPath.addLineToPoint(CGPointMake(15.88, 6.58))
        clipPath.addLineToPoint(CGPointMake(15.88, 8.39))
        clipPath.addLineToPoint(CGPointMake(12.25, 8.39))
        clipPath.closePath()
        clipPath.moveToPoint(CGPointMake(13.95, 2.84))
        clipPath.addLineToPoint(CGPointMake(11.4, 5.39))
        clipPath.addLineToPoint(CGPointMake(10.09, 4.14))
        clipPath.addLineToPoint(CGPointMake(12.64, 1.53))
        clipPath.addLineToPoint(CGPointMake(13.95, 2.84))
        clipPath.closePath()
        clipPath.moveToPoint(CGPointMake(1.93, 2.84))
        clipPath.addLineToPoint(CGPointMake(3.23, 1.53))
        clipPath.addLineToPoint(CGPointMake(5.78, 4.14))
        clipPath.addLineToPoint(CGPointMake(4.48, 5.39))
        clipPath.addLineToPoint(CGPointMake(1.93, 2.84))
        clipPath.closePath()
        clipPath.moveToPoint(CGPointMake(1.93, 12.3))
        clipPath.addLineToPoint(CGPointMake(4.48, 9.75))
        clipPath.addLineToPoint(CGPointMake(5.78, 11))
        clipPath.addLineToPoint(CGPointMake(3.23, 13.61))
        clipPath.addLineToPoint(CGPointMake(1.93, 12.3))
        clipPath.closePath()
        clipPath.moveToPoint(CGPointMake(0, 8.39))
        clipPath.addLineToPoint(CGPointMake(0, 6.58))
        clipPath.addLineToPoint(CGPointMake(3.63, 6.58))
        clipPath.addLineToPoint(CGPointMake(3.63, 8.39))
        clipPath.addLineToPoint(CGPointMake(0, 8.39))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(-0, 0, 22, 22))
        CTAStyleKit.selectedColor.setFill()
        rectanglePath.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

    public class func drawCameraButton() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor5 = UIColor(red: 0.329, green: 0.321, blue: 0.321, alpha: 0.000)
        let strokeColor = UIColor(red: 0.937, green: 0.200, blue: 0.290, alpha: 1.000)

        //// Group
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.moveToPoint(CGPointMake(-20.5, -20.5))
        clip2Path.addLineToPoint(CGPointMake(108.5, -20.5))
        clip2Path.addLineToPoint(CGPointMake(108.5, 108.5))
        clip2Path.addLineToPoint(CGPointMake(-20.5, 108.5))
        clip2Path.addLineToPoint(CGPointMake(-20.5, -20.5))
        clip2Path.closePath()
        clip2Path.moveToPoint(CGPointMake(44, 88.5))
        clip2Path.addCurveToPoint(CGPointMake(88.5, 44), controlPoint1: CGPointMake(68.58, 88.5), controlPoint2: CGPointMake(88.5, 68.58))
        clip2Path.addCurveToPoint(CGPointMake(44, -0.5), controlPoint1: CGPointMake(88.5, 19.42), controlPoint2: CGPointMake(68.58, -0.5))
        clip2Path.addCurveToPoint(CGPointMake(-0.5, 44), controlPoint1: CGPointMake(19.42, -0.5), controlPoint2: CGPointMake(-0.5, 19.42))
        clip2Path.addCurveToPoint(CGPointMake(44, 88.5), controlPoint1: CGPointMake(-0.5, 68.58), controlPoint2: CGPointMake(19.42, 88.5))
        clip2Path.closePath()
        clip2Path.moveToPoint(CGPointMake(44, 87.5))
        clip2Path.addCurveToPoint(CGPointMake(0.5, 44), controlPoint1: CGPointMake(19.98, 87.5), controlPoint2: CGPointMake(0.5, 68.02))
        clip2Path.addCurveToPoint(CGPointMake(44, 0.5), controlPoint1: CGPointMake(0.5, 19.98), controlPoint2: CGPointMake(19.98, 0.5))
        clip2Path.addCurveToPoint(CGPointMake(87.5, 44), controlPoint1: CGPointMake(68.02, 0.5), controlPoint2: CGPointMake(87.5, 19.98))
        clip2Path.addCurveToPoint(CGPointMake(44, 87.5), controlPoint1: CGPointMake(87.5, 68.02), controlPoint2: CGPointMake(68.02, 87.5))
        clip2Path.closePath()
        clip2Path.usesEvenOddFillRule = true;

        clip2Path.addClip()


        //// Group 2
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPointMake(44, 88))
        clipPath.addCurveToPoint(CGPointMake(88, 44), controlPoint1: CGPointMake(68.3, 88), controlPoint2: CGPointMake(88, 68.3))
        clipPath.addCurveToPoint(CGPointMake(44, 0), controlPoint1: CGPointMake(88, 19.7), controlPoint2: CGPointMake(68.3, 0))
        clipPath.addCurveToPoint(CGPointMake(0, 44), controlPoint1: CGPointMake(19.7, 0), controlPoint2: CGPointMake(0, 19.7))
        clipPath.addCurveToPoint(CGPointMake(44, 88), controlPoint1: CGPointMake(0, 68.3), controlPoint2: CGPointMake(19.7, 88))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(44, 88))
        bezierPath.addCurveToPoint(CGPointMake(88, 44), controlPoint1: CGPointMake(68.3, 88), controlPoint2: CGPointMake(88, 68.3))
        bezierPath.addCurveToPoint(CGPointMake(44, 0), controlPoint1: CGPointMake(88, 19.7), controlPoint2: CGPointMake(68.3, 0))
        bezierPath.addCurveToPoint(CGPointMake(0, 44), controlPoint1: CGPointMake(19.7, 0), controlPoint2: CGPointMake(0, 19.7))
        bezierPath.addCurveToPoint(CGPointMake(44, 88), controlPoint1: CGPointMake(0, 68.3), controlPoint2: CGPointMake(19.7, 88))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor5.setFill()
        bezierPath.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.moveToPoint(CGPointMake(44, 88))
        clip3Path.addCurveToPoint(CGPointMake(88, 44), controlPoint1: CGPointMake(68.3, 88), controlPoint2: CGPointMake(88, 68.3))
        clip3Path.addCurveToPoint(CGPointMake(44, 0), controlPoint1: CGPointMake(88, 19.7), controlPoint2: CGPointMake(68.3, 0))
        clip3Path.addCurveToPoint(CGPointMake(0, 44), controlPoint1: CGPointMake(19.7, 0), controlPoint2: CGPointMake(0, 19.7))
        clip3Path.addCurveToPoint(CGPointMake(44, 88), controlPoint1: CGPointMake(0, 68.3), controlPoint2: CGPointMake(19.7, 88))
        clip3Path.closePath()
        clip3Path.usesEvenOddFillRule = true;

        clip3Path.addClip()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPointMake(44, 88))
        bezier4Path.addCurveToPoint(CGPointMake(88, 44), controlPoint1: CGPointMake(68.3, 88), controlPoint2: CGPointMake(88, 68.3))
        bezier4Path.addCurveToPoint(CGPointMake(44, 0), controlPoint1: CGPointMake(88, 19.7), controlPoint2: CGPointMake(68.3, 0))
        bezier4Path.addCurveToPoint(CGPointMake(0, 44), controlPoint1: CGPointMake(19.7, 0), controlPoint2: CGPointMake(0, 19.7))
        bezier4Path.addCurveToPoint(CGPointMake(44, 88), controlPoint1: CGPointMake(0, 68.3), controlPoint2: CGPointMake(19.7, 88))
        bezier4Path.closePath()
        strokeColor.setStroke()
        bezier4Path.lineWidth = 2
        bezier4Path.stroke()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRectMake(4, 4, 80, 80.9))
        CTAStyleKit.selectedColor.setFill()
        ovalPath.fill()
    }

    public class func drawAddInEditor() {

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRectMake(1, 1, 23, 23))
        CTAStyleKit.selectedColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(19.5, 13.5))
        bezierPath.addLineToPoint(CGPointMake(13.5, 13.5))
        bezierPath.addLineToPoint(CGPointMake(13.5, 19.5))
        bezierPath.addLineToPoint(CGPointMake(11.5, 19.5))
        bezierPath.addLineToPoint(CGPointMake(11.5, 13.5))
        bezierPath.addLineToPoint(CGPointMake(5.5, 13.5))
        bezierPath.addLineToPoint(CGPointMake(5.5, 11.56))
        bezierPath.addLineToPoint(CGPointMake(11.5, 11.56))
        bezierPath.addLineToPoint(CGPointMake(11.5, 5.5))
        bezierPath.addLineToPoint(CGPointMake(13.5, 5.5))
        bezierPath.addLineToPoint(CGPointMake(13.5, 11.56))
        bezierPath.addLineToPoint(CGPointMake(19.5, 11.56))
        bezierPath.addLineToPoint(CGPointMake(19.5, 13.5))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        CTAStyleKit.selectedColor.setFill()
        bezierPath.fill()
    }

    public class func drawGradientInEditor(frame frame: CGRect = CGRectMake(0, 0, 12, 10)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let gradientWhiteColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientClearColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.000)

        //// Gradient Declarations
        let gradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradientWhiteColor.CGColor, gradientWhiteColor.blendedColorWithFraction(0.5, ofColor: gradientWhiteColor).CGColor, gradientWhiteColor.CGColor, gradientClearColor.CGColor], [0, 0.4, 0.5, 1])!

        //// Rectangle Drawing
        let rectangleRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)
        let rectanglePath = UIBezierPath(rect: rectangleRect)
        CGContextSaveGState(context)
        rectanglePath.addClip()
        CGContextDrawLinearGradient(context, gradient,
            CGPointMake(rectangleRect.minX, rectangleRect.midY),
            CGPointMake(rectangleRect.maxX, rectangleRect.midY),
            CGGradientDrawingOptions())
        CGContextRestoreGState(context)
    }

    public class func drawGradientInHubLabel(frame frame: CGRect = CGRectMake(0, 0, 12, 10)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let gradientWhiteColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientClearColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.000)

        //// Gradient Declarations
        let gradient2 = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradientClearColor.CGColor, gradientClearColor.blendedColorWithFraction(0.5, ofColor: gradientWhiteColor).CGColor, gradientWhiteColor.CGColor, gradientWhiteColor.CGColor], [0, 0.1, 0.5, 1])!

        //// Rectangle Drawing
        let rectangleRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)
        let rectanglePath = UIBezierPath(rect: rectangleRect)
        CGContextSaveGState(context)
        rectanglePath.addClip()
        CGContextDrawLinearGradient(context, gradient2,
            CGPointMake(rectangleRect.minX, rectangleRect.midY),
            CGPointMake(rectangleRect.maxX, rectangleRect.midY),
            CGGradientDrawingOptions())
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class var imageOfAlignmentRightSelected: UIImage {
        if Cache.imageOfAlignmentRightSelected != nil {
            return Cache.imageOfAlignmentRightSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            CTAStyleKit.drawAlignmentRightSelected()

        Cache.imageOfAlignmentRightSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentRightSelected!
    }

    public class var imageOfAlignmentRightNormal: UIImage {
        if Cache.imageOfAlignmentRightNormal != nil {
            return Cache.imageOfAlignmentRightNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            CTAStyleKit.drawAlignmentRightNormal()

        Cache.imageOfAlignmentRightNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentRightNormal!
    }

    public class var imageOfAlignmentLeftSelected: UIImage {
        if Cache.imageOfAlignmentLeftSelected != nil {
            return Cache.imageOfAlignmentLeftSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            CTAStyleKit.drawAlignmentLeftSelected()

        Cache.imageOfAlignmentLeftSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentLeftSelected!
    }

    public class var imageOfAlignmentLeftNormal: UIImage {
        if Cache.imageOfAlignmentLeftNormal != nil {
            return Cache.imageOfAlignmentLeftNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            CTAStyleKit.drawAlignmentLeftNormal()

        Cache.imageOfAlignmentLeftNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentLeftNormal!
    }

    public class var imageOfAlignmentCenterSelected: UIImage {
        if Cache.imageOfAlignmentCenterSelected != nil {
            return Cache.imageOfAlignmentCenterSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            CTAStyleKit.drawAlignmentCenterSelected()

        Cache.imageOfAlignmentCenterSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentCenterSelected!
    }

    public class var imageOfAlignmentCenterNormal: UIImage {
        if Cache.imageOfAlignmentCenterNormal != nil {
            return Cache.imageOfAlignmentCenterNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            CTAStyleKit.drawAlignmentCenterNormal()

        Cache.imageOfAlignmentCenterNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentCenterNormal!
    }

    public class var imageOfAlignmentJustNormal: UIImage {
        if Cache.imageOfAlignmentJustNormal != nil {
            return Cache.imageOfAlignmentJustNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            CTAStyleKit.drawAlignmentJustNormal()

        Cache.imageOfAlignmentJustNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentJustNormal!
    }

    public class var imageOfAlignmentJustSelected: UIImage {
        if Cache.imageOfAlignmentJustSelected != nil {
            return Cache.imageOfAlignmentJustSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            CTAStyleKit.drawAlignmentJustSelected()

        Cache.imageOfAlignmentJustSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentJustSelected!
    }

    public class var imageOfLineSpacingNormal: UIImage {
        if Cache.imageOfLineSpacingNormal != nil {
            return Cache.imageOfLineSpacingNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            CTAStyleKit.drawLineSpacingNormal()

        Cache.imageOfLineSpacingNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfLineSpacingNormal!
    }

    public class var imageOfLineSpacingSelected: UIImage {
        if Cache.imageOfLineSpacingSelected != nil {
            return Cache.imageOfLineSpacingSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            CTAStyleKit.drawLineSpacingSelected()

        Cache.imageOfLineSpacingSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfLineSpacingSelected!
    }

    public class var imageOfTextSpacingSelected: UIImage {
        if Cache.imageOfTextSpacingSelected != nil {
            return Cache.imageOfTextSpacingSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            CTAStyleKit.drawTextSpacingSelected()

        Cache.imageOfTextSpacingSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfTextSpacingSelected!
    }

    public class var imageOfTextSpacingNormal: UIImage {
        if Cache.imageOfTextSpacingNormal != nil {
            return Cache.imageOfTextSpacingNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), false, 0)
            CTAStyleKit.drawTextSpacingNormal()

        Cache.imageOfTextSpacingNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfTextSpacingNormal!
    }

    public class var imageOfAdd: UIImage {
        if Cache.imageOfAdd != nil {
            return Cache.imageOfAdd!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(14, 14), false, 0)
            CTAStyleKit.drawAdd()

        Cache.imageOfAdd = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAdd!
    }

    public class var imageOfNode: UIImage {
        if Cache.imageOfNode != nil {
            return Cache.imageOfNode!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(10, 10), false, 0)
            CTAStyleKit.drawNode()

        Cache.imageOfNode = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfNode!
    }

    public class var imageOfFontBarItemNormal: UIImage {
        if Cache.imageOfFontBarItemNormal != nil {
            return Cache.imageOfFontBarItemNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(23, 22), false, 0)
            CTAStyleKit.drawFontBarItemNormal()

        Cache.imageOfFontBarItemNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfFontBarItemNormal!
    }

    public class var imageOfFontBarItemSelected: UIImage {
        if Cache.imageOfFontBarItemSelected != nil {
            return Cache.imageOfFontBarItemSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(23, 22), false, 0)
            CTAStyleKit.drawFontBarItemSelected()

        Cache.imageOfFontBarItemSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfFontBarItemSelected!
    }

    public class var imageOfSizeBarItemNormal: UIImage {
        if Cache.imageOfSizeBarItemNormal != nil {
            return Cache.imageOfSizeBarItemNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 22), false, 0)
            CTAStyleKit.drawSizeBarItemNormal()

        Cache.imageOfSizeBarItemNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfSizeBarItemNormal!
    }

    public class var imageOfSizeBarItemSelected: UIImage {
        if Cache.imageOfSizeBarItemSelected != nil {
            return Cache.imageOfSizeBarItemSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 22), false, 0)
            CTAStyleKit.drawSizeBarItemSelected()

        Cache.imageOfSizeBarItemSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfSizeBarItemSelected!
    }

    public class var imageOfColorBarItemSelected: UIImage {
        if Cache.imageOfColorBarItemSelected != nil {
            return Cache.imageOfColorBarItemSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 23), false, 0)
            CTAStyleKit.drawColorBarItemSelected()

        Cache.imageOfColorBarItemSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfColorBarItemSelected!
    }

    public class var imageOfColorBarItemNormal: UIImage {
        if Cache.imageOfColorBarItemNormal != nil {
            return Cache.imageOfColorBarItemNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 23), false, 0)
            CTAStyleKit.drawColorBarItemNormal()

        Cache.imageOfColorBarItemNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfColorBarItemNormal!
    }

    public class var imageOfRotationBarItemSelected: UIImage {
        if Cache.imageOfRotationBarItemSelected != nil {
            return Cache.imageOfRotationBarItemSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(24, 24), false, 0)
            CTAStyleKit.drawRotationBarItemSelected()

        Cache.imageOfRotationBarItemSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfRotationBarItemSelected!
    }

    public class var imageOfRotationBarItemNormal: UIImage {
        if Cache.imageOfRotationBarItemNormal != nil {
            return Cache.imageOfRotationBarItemNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(24, 24), false, 0)
            CTAStyleKit.drawRotationBarItemNormal()

        Cache.imageOfRotationBarItemNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfRotationBarItemNormal!
    }

    public class var imageOfAlignmentBarItemNormal: UIImage {
        if Cache.imageOfAlignmentBarItemNormal != nil {
            return Cache.imageOfAlignmentBarItemNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(19, 20), false, 0)
            CTAStyleKit.drawAlignmentBarItemNormal()

        Cache.imageOfAlignmentBarItemNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentBarItemNormal!
    }

    public class var imageOfAlignmentBarItemSelected: UIImage {
        if Cache.imageOfAlignmentBarItemSelected != nil {
            return Cache.imageOfAlignmentBarItemSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(19, 20), false, 0)
            CTAStyleKit.drawAlignmentBarItemSelected()

        Cache.imageOfAlignmentBarItemSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAlignmentBarItemSelected!
    }

    public class var imageOfSpacingBarItemNormal: UIImage {
        if Cache.imageOfSpacingBarItemNormal != nil {
            return Cache.imageOfSpacingBarItemNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(25, 11), false, 0)
            CTAStyleKit.drawSpacingBarItemNormal()

        Cache.imageOfSpacingBarItemNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfSpacingBarItemNormal!
    }

    public class var imageOfSpacingBarItemSelected: UIImage {
        if Cache.imageOfSpacingBarItemSelected != nil {
            return Cache.imageOfSpacingBarItemSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(25, 11), false, 0)
            CTAStyleKit.drawSpacingBarItemSelected()

        Cache.imageOfSpacingBarItemSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfSpacingBarItemSelected!
    }

    public class var imageOfAnimationBarItemNormal: UIImage {
        if Cache.imageOfAnimationBarItemNormal != nil {
            return Cache.imageOfAnimationBarItemNormal!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(22, 22), false, 0)
            CTAStyleKit.drawAnimationBarItemNormal()

        Cache.imageOfAnimationBarItemNormal = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAnimationBarItemNormal!
    }

    public class var imageOfAnimationBarItemSelected: UIImage {
        if Cache.imageOfAnimationBarItemSelected != nil {
            return Cache.imageOfAnimationBarItemSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(22, 22), false, 0)
            CTAStyleKit.drawAnimationBarItemSelected()

        Cache.imageOfAnimationBarItemSelected = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAnimationBarItemSelected!
    }

    public class var imageOfCameraButton: UIImage {
        if Cache.imageOfCameraButton != nil {
            return Cache.imageOfCameraButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(88, 88), false, 0)
            CTAStyleKit.drawCameraButton()

        Cache.imageOfCameraButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfCameraButton!
    }

    public class var imageOfAddInEditor: UIImage {
        if Cache.imageOfAddInEditor != nil {
            return Cache.imageOfAddInEditor!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(25, 25), false, 0)
            CTAStyleKit.drawAddInEditor()

        Cache.imageOfAddInEditor = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAddInEditor!
    }

    public class func imageOfGradientInEditor(frame frame: CGRect = CGRectMake(0, 0, 12, 10)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            CTAStyleKit.drawGradientInEditor(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfGradientInEditor = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGradientInEditor
    }

    public class func imageOfGradientInHubLabel(frame frame: CGRect = CGRectMake(0, 0, 12, 10)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            CTAStyleKit.drawGradientInHubLabel(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfGradientInHubLabel = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGradientInHubLabel
    }

    //// Customization Infrastructure

    @IBOutlet var alignmentRightSelectedTargets: [AnyObject]! {
        get { return Cache.alignmentRightSelectedTargets }
        set {
            Cache.alignmentRightSelectedTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfAlignmentRightSelected)
            }
        }
    }

    @IBOutlet var alignmentRightNormalTargets: [AnyObject]! {
        get { return Cache.alignmentRightNormalTargets }
        set {
            Cache.alignmentRightNormalTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfAlignmentRightNormal)
            }
        }
    }

    @IBOutlet var alignmentLeftSelectedTargets: [AnyObject]! {
        get { return Cache.alignmentLeftSelectedTargets }
        set {
            Cache.alignmentLeftSelectedTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfAlignmentLeftSelected)
            }
        }
    }

    @IBOutlet var alignmentLeftNormalTargets: [AnyObject]! {
        get { return Cache.alignmentLeftNormalTargets }
        set {
            Cache.alignmentLeftNormalTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfAlignmentLeftNormal)
            }
        }
    }

    @IBOutlet var alignmentCenterSelectedTargets: [AnyObject]! {
        get { return Cache.alignmentCenterSelectedTargets }
        set {
            Cache.alignmentCenterSelectedTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfAlignmentCenterSelected)
            }
        }
    }

    @IBOutlet var alignmentCenterNormalTargets: [AnyObject]! {
        get { return Cache.alignmentCenterNormalTargets }
        set {
            Cache.alignmentCenterNormalTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfAlignmentCenterNormal)
            }
        }
    }

    @IBOutlet var alignmentJustNormalTargets: [AnyObject]! {
        get { return Cache.alignmentJustNormalTargets }
        set {
            Cache.alignmentJustNormalTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfAlignmentJustNormal)
            }
        }
    }

    @IBOutlet var alignmentJustSelectedTargets: [AnyObject]! {
        get { return Cache.alignmentJustSelectedTargets }
        set {
            Cache.alignmentJustSelectedTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfAlignmentJustSelected)
            }
        }
    }

    @IBOutlet var lineSpacingNormalTargets: [AnyObject]! {
        get { return Cache.lineSpacingNormalTargets }
        set {
            Cache.lineSpacingNormalTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfLineSpacingNormal)
            }
        }
    }

    @IBOutlet var lineSpacingSelectedTargets: [AnyObject]! {
        get { return Cache.lineSpacingSelectedTargets }
        set {
            Cache.lineSpacingSelectedTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfLineSpacingSelected)
            }
        }
    }

    @IBOutlet var textSpacingSelectedTargets: [AnyObject]! {
        get { return Cache.textSpacingSelectedTargets }
        set {
            Cache.textSpacingSelectedTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfTextSpacingSelected)
            }
        }
    }

    @IBOutlet var textSpacingNormalTargets: [AnyObject]! {
        get { return Cache.textSpacingNormalTargets }
        set {
            Cache.textSpacingNormalTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfTextSpacingNormal)
            }
        }
    }

    @IBOutlet var addTargets: [AnyObject]! {
        get { return Cache.addTargets }
        set {
            Cache.addTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfAdd)
            }
        }
    }

    @IBOutlet var nodeTargets: [AnyObject]! {
        get { return Cache.nodeTargets }
        set {
            Cache.nodeTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfNode)
            }
        }
    }

    @IBOutlet var fontBarItemNormalTargets: [AnyObject]! {
        get { return Cache.fontBarItemNormalTargets }
        set {
            Cache.fontBarItemNormalTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfFontBarItemNormal)
            }
        }
    }

    @IBOutlet var fontBarItemSelectedTargets: [AnyObject]! {
        get { return Cache.fontBarItemSelectedTargets }
        set {
            Cache.fontBarItemSelectedTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfFontBarItemSelected)
            }
        }
    }

    @IBOutlet var sizeBarItemNormalTargets: [AnyObject]! {
        get { return Cache.sizeBarItemNormalTargets }
        set {
            Cache.sizeBarItemNormalTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfSizeBarItemNormal)
            }
        }
    }

    @IBOutlet var sizeBarItemSelectedTargets: [AnyObject]! {
        get { return Cache.sizeBarItemSelectedTargets }
        set {
            Cache.sizeBarItemSelectedTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfSizeBarItemSelected)
            }
        }
    }

    @IBOutlet var colorBarItemSelectedTargets: [AnyObject]! {
        get { return Cache.colorBarItemSelectedTargets }
        set {
            Cache.colorBarItemSelectedTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfColorBarItemSelected)
            }
        }
    }

    @IBOutlet var colorBarItemNormalTargets: [AnyObject]! {
        get { return Cache.colorBarItemNormalTargets }
        set {
            Cache.colorBarItemNormalTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfColorBarItemNormal)
            }
        }
    }

    @IBOutlet var rotationBarItemSelectedTargets: [AnyObject]! {
        get { return Cache.rotationBarItemSelectedTargets }
        set {
            Cache.rotationBarItemSelectedTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfRotationBarItemSelected)
            }
        }
    }

    @IBOutlet var rotationBarItemNormalTargets: [AnyObject]! {
        get { return Cache.rotationBarItemNormalTargets }
        set {
            Cache.rotationBarItemNormalTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfRotationBarItemNormal)
            }
        }
    }

    @IBOutlet var alignmentBarItemNormalTargets: [AnyObject]! {
        get { return Cache.alignmentBarItemNormalTargets }
        set {
            Cache.alignmentBarItemNormalTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfAlignmentBarItemNormal)
            }
        }
    }

    @IBOutlet var alignmentBarItemSelectedTargets: [AnyObject]! {
        get { return Cache.alignmentBarItemSelectedTargets }
        set {
            Cache.alignmentBarItemSelectedTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfAlignmentBarItemSelected)
            }
        }
    }

    @IBOutlet var spacingBarItemNormalTargets: [AnyObject]! {
        get { return Cache.spacingBarItemNormalTargets }
        set {
            Cache.spacingBarItemNormalTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfSpacingBarItemNormal)
            }
        }
    }

    @IBOutlet var spacingBarItemSelectedTargets: [AnyObject]! {
        get { return Cache.spacingBarItemSelectedTargets }
        set {
            Cache.spacingBarItemSelectedTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfSpacingBarItemSelected)
            }
        }
    }

    @IBOutlet var animationBarItemNormalTargets: [AnyObject]! {
        get { return Cache.animationBarItemNormalTargets }
        set {
            Cache.animationBarItemNormalTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfAnimationBarItemNormal)
            }
        }
    }

    @IBOutlet var animationBarItemSelectedTargets: [AnyObject]! {
        get { return Cache.animationBarItemSelectedTargets }
        set {
            Cache.animationBarItemSelectedTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfAnimationBarItemSelected)
            }
        }
    }

    @IBOutlet var cameraButtonTargets: [AnyObject]! {
        get { return Cache.cameraButtonTargets }
        set {
            Cache.cameraButtonTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfCameraButton)
            }
        }
    }

    @IBOutlet var addInEditorTargets: [AnyObject]! {
        get { return Cache.addInEditorTargets }
        set {
            Cache.addInEditorTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: CTAStyleKit.imageOfAddInEditor)
            }
        }
    }

}



extension UIColor {
    func blendedColorWithFraction(fraction: CGFloat, ofColor color: UIColor) -> UIColor {
        var r1: CGFloat = 1.0, g1: CGFloat = 1.0, b1: CGFloat = 1.0, a1: CGFloat = 1.0
        var r2: CGFloat = 1.0, g2: CGFloat = 1.0, b2: CGFloat = 1.0, a2: CGFloat = 1.0

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
